<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Littlombie&#39;s Nirvana</title>
  <subtitle>Novelty is the great parent of pleasure.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-25T04:11:18.518Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Littlombie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 中的 this 详解</title>
    <link href="http://yoursite.com/2016/11/25/javascript-this/"/>
    <id>http://yoursite.com/2016/11/25/javascript-this/</id>
    <published>2016-11-25T03:23:56.000Z</published>
    <updated>2016-11-25T04:11:18.518Z</updated>
    
    <content type="html"><![CDATA[<p>关于 js 中的 <code>this</code> 文章的一个总结归纳</p>
<p>在 js 中，<code>this</code> 这个上下文总是变化莫测，很多时候出现 bug 总是一头雾水，其实，只要分清楚不同的情况下如何执行就 ok 了。</p>
<p>全局执行</p>
<p>首先，我们在全局环境中看看它的 <code>this</code> 是什么：</p>
<ol>
<li>浏览器：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="comment">// Window &#123;speechSynthesis: SpeechSynthesis, caches: CacheStorage, localStorage: Storage, sessionStorage: Storage, webkitStorageInfo: DeprecatedStorageInfo…&#125;</span></div></pre></td></tr></table></figure>
<ol>
<li>node：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line"> </div><div class="line"><span class="comment">// global</span></div></pre></td></tr></table></figure>
<p>可以看到打印出了 <code>global</code> 对象；</p>
<p><strong> 总结 </strong>：在全局作用域中它的 <code>this</code> 执行当前的全局对象（浏览器端是 <code>Window</code>，<code>node</code> 中是 <code>global</code>）。</p>
<a id="more"></a>
<p>函数中执行</p>
<blockquote>
<h3 id="纯粹的函数调用"><a href="#纯粹的函数调用" class="headerlink" title="纯粹的函数调用"></a>纯粹的函数调用</h3></blockquote>
<p>这是最普通的函数使用方法了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">test();</div><div class="line"> </div><div class="line"><span class="comment">// Window &#123;speechSynthesis: SpeechSynthesis, caches: CacheStorage, localStorage: Storage, sessionStorage: Storage, webkitStorageInfo: DeprecatedStorageInfo…&#125;</span></div></pre></td></tr></table></figure></p>
<p>我们可以看到，一个函数被直接调用的时候，属于全局调用，这时候它的 <code>this</code> 指向 全局对象；</p>
<blockquote>
<h3 id="严格模式-‘use-strict’"><a href="#严格模式-‘use-strict’" class="headerlink" title="严格模式 ‘use strict’;"></a>严格模式 ‘use strict’;</h3></blockquote>
<p>如果在严格模式的情况下执行纯粹的函数调用，那么这里的的 <code>this</code> 并不会指向全局，而是 <code>undefined</code>，这样的做法是为了消除 js 中一些不严谨的行为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">test();</div><div class="line"> </div><div class="line"><span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<p>当然，把它放在一个立即执行函数中会更好，避免了污染全局：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;)();</div><div class="line"> </div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure></p>
<blockquote>
<h3 id="作为对象的方法调用"><a href="#作为对象的方法调用" class="headerlink" title="作为对象的方法调用"></a>作为对象的方法调用</h3></blockquote>
<p>当一个函数被当作一个对象的方法调用的时候：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc'</span>,</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">obj.foo();</div><div class="line"> </div><div class="line"><span class="comment">// 'qiutc'</span></div></pre></td></tr></table></figure></p>
<p>这时候，<code>this</code> 指向当前的这个对象；</p>
<p>当然，我们还可以这么做：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc'</span>,</div><div class="line">    <span class="attr">foo</span>: test</div><div class="line">&#125;</div><div class="line"> </div><div class="line">obj.foo();</div><div class="line"> </div><div class="line"><span class="comment">// 'qiutc'</span></div></pre></td></tr></table></figure></p>
<p>同样不变，因为在 js 中一切都是对象，函数也是一个对象，对于 <code>test</code> ，它只是一个函数名，函数的引用，它指向这个函数，当 <code>foo = test</code>，<code>foo</code> 同样也指向了这个函数。</p>
<p>如果把对象的方法赋值给一个变量，然后直接调用这个变量呢：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc'</span>,</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> test = obj.foo;</div><div class="line">test();</div><div class="line"> </div><div class="line"><span class="comment">// Window</span></div></pre></td></tr></table></figure></p>
<p>可以看到，这时候 <code>this</code> 执行了全局，当我们把 <code>test = obj.foo</code> ，<code>test</code> 直接指向了一个函数的引用，这时候，其实和 obj 这个对象没有关系了，所以，它是被当作一个普通函数来直接调用，因此，this 指向全局对象。</p>
<blockquote>
<h3 id="一些坑"><a href="#一些坑" class="headerlink" title="一些坑"></a>一些坑</h3></blockquote>
<p>我们经常在回调函数里面会遇到一些坑：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc'</span>,</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">foo2</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">        setTimeout(<span class="keyword">this</span>.foo, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">obj.foo2();</div></pre></td></tr></table></figure></p>
<p>执行这段代码我们会发现两次打印出来的 <code>this</code> 是不一样的：</p>
<p>第一次是 <code>foo2</code> 中直接打印 <code>this</code>，这里指向 <code>obj</code> 这个对象，我们毋庸置疑；</p>
<p>但是在 <code>setTimeout</code> 中执行的 <code>this.foo</code> ，却指向了全局对象，这里不是把它当作函数的方法使用吗？这一点经常让很多初学者疑惑；</p>
<p>其实，<code>setTimeout</code> 也只是一个函数而已，函数必然有可能需要参数，我们把 <code>this.foo</code> 当作一个参数传给 <code>setTimeout</code> 这个函数，就像它需要一个 <code>fun</code> 参数，在传入参数的时候，其实做了个这样的操作 <code>fun = this.foo</code>，看到没有，这里我们直接把 <code>fun</code> 指向 <code>this.foo</code> 的引用；执行的时候其实是执行了 <code>fun()</code> 所以已经和 <code>obj</code> 无关了，它是被当作普通函数直接调用的，因此 <code>this</code> 指向全局对象。</p>
<p>这个问题是很多异步回调函数中普遍会碰到的；</p>
<blockquote>
<p>解决</p>
</blockquote>
<p>为了解决这个问题，我们可以利用 <strong> 闭包 </strong> 的特性来处理：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc'</span>,</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">foo2</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// Window</span></div><div class="line">            <span class="built_in">console</span>.log(_this);  <span class="comment">// Object &#123;name: "qiutc"&#125;</span></div><div class="line">        &#125;, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">obj.foo2();</div></pre></td></tr></table></figure></p>
<p>可以看到直接用 <code>this</code> 仍然是 <code>Window</code>；因为 <code>foo2</code> 中的 <code>this</code> 是指向 <code>obj</code>，我们可以先用一个变量 <code>_this</code> 来储存，然后在回调函数中使用<code>_this</code>，就可以指向当前的这个对象了；</p>
<blockquote>
<h3 id="setTimeout-的另一个坑"><a href="#setTimeout-的另一个坑" class="headerlink" title="setTimeout 的另一个坑"></a>setTimeout 的另一个坑</h3></blockquote>
<p>之前啊说过，如果直接执行回调函数而没有绑定作用域，那么它的 <code>this</code> 是指向全局对象(<code>window</code>)，在严格模式下会指向 <code>undefined</code>，然而在 <code>setTimeout</code> 中的回调函数在严格模式下却表现出不同：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">setTimeout(foo, <span class="number">1</span>);</div><div class="line"> </div><div class="line"><span class="comment">// window</span></div></pre></td></tr></table></figure></p>
<p>按理说我们加了严格模式，<code>foo</code> 调用也没有指定 <code>this</code>，应该是出来 <code>undefined</code>，但是这里仍然出现了全局对象，难道是严格模式失效了吗？</p>
<p>并不，即使在严格模式下，<code>setTimeout</code> 方法在调用传入函数的时候，如果这个函数没有指定了的 <code>this</code>，那么它会做一个隐式的操作—-自动地注入全局上下文，等同于调用 <code>foo.apply(window)</code> 而非 <code>foo()</code>；</p>
<p>当然，如果我们在传入函数的时候已经指定 this，那么就不会被注入全局对象，比如： <code>setTimeout(foo.bind(obj), 1);</code>；</p>
<p><a href="http://stackoverflow.com/questions/21957030/why-is-window-still-defined-in-this-strict-mode-code" target="_blank" rel="external">http://stackoverflow.com/questions/21957030/why-is-window-still-defined-in-this-strict-mode-code</a></p>
<blockquote>
<h3 id="作为一个构造函数使用"><a href="#作为一个构造函数使用" class="headerlink" title="作为一个构造函数使用"></a>作为一个构造函数使用</h3></blockquote>
<p>在 <code>js</code> 中，为了实现类，我们需要定义一些构造函数，在调用一个构造函数的时候需要加上 <code>new</code> 这个关键字：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'qiutc'</span>);</div><div class="line"> </div><div class="line"><span class="comment">// Person &#123;name: "qiutc"&#125;</span></div></pre></td></tr></table></figure>
<p>我们可以看到当作构造函数调用时，<code>this</code> 指向了这个构造函数调用时候实例化出来的对象；</p>
<p>当然，构造函数其实也是一个函数，如果我们把它当作一个普通函数执行，这个 <code>this</code> 仍然执行全局：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> p = Person(<span class="string">'qiutc'</span>);</div><div class="line"> </div><div class="line"><span class="comment">// Window</span></div></pre></td></tr></table></figure></p>
<p>其区别在于，如何调用函数（<code>new</code>）。</p>
<blockquote>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3></blockquote>
<p>在 ES6 的新规范中，加入了箭头函数，它和普通函数最不一样的一点就是<code>this</code> 的指向了，还记得在上文中（<a href="http://www.wdshare.org/article/57cce58874cf8e270b2c5346#解决" target="_blank" rel="external">作为对象的方法调用-一些坑-解决</a>）我们使用闭包来解决 <code>this</code> 的指向问题吗，如果用上了箭头函数就可以更完美的解决了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc'</span>,</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">foo2</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">// Object &#123;name: "qiutc"&#125;</span></div><div class="line">        &#125;, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">obj.foo2();</div></pre></td></tr></table></figure>
<p>可以看到，在 <code>setTimeout</code> 执行的函数中，本应该打印出在 <code>Window</code>，但是在这里 <code>this</code> 却指向了 <code>obj</code>，原因就在于，给 <code>setTimeout</code> 传入的函数（参数）是一个箭头函数：</p>
<p>函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。</p>
<p>根据例子我们理解一下这句话：</p>
<p>在 <code>obj.foo2()</code> 执行的时候，当前的 <code>this</code> 指向 <code>obj</code>；在执行 <code>setTimeout</code> 时候，我们先是定义了一个匿名的箭头函数，关键点就在这，箭头函数内的 <code>this</code> 执行定义时所在的对象，就是指向定义这个箭头函数时作用域内的 <code>this</code>，也就是 <code>obj.foo2</code> 中的 <code>this</code>，即 <code>obj</code>；所以在执行箭头函数的时候，它的 <code>this -&gt; obj.foo2</code> 中的 <code>this -&gt; obj</code>；<br>，<br>简单来说，<strong> 箭头函数中的 <code>this</code> 只和定义它时候的作用域的 <code>this</code> 有关而与在哪里以及如何调用它无关，同时它的 <code>this</code> 指向是不可改变的。 </strong></p>
<blockquote>
<h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call, apply, bind"></a>call, apply, bind</h3></blockquote>
<p>在 js 中，函数也是对象，同样也有一些方法，这里我们介绍三个方法，他们可以更改函数中的 <code>this</code> 指向：</p>
<ul>
<li>call</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.call(thisArg[, arg1[, arg2[, ...]]])</div></pre></td></tr></table></figure>
<p>它会立即执行函数，第一个参数是指定执行函数中 <code>this</code> 的上下文，后面的参数是执行函数需要传入的参数；</p>
<ul>
<li>apply</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fun.apply(thisArg[, [arg1, arg2, ...]])</div></pre></td></tr></table></figure>
<p>它会立即执行函数，第一个参数是指定执行函数中 <code>this</code> 的上下文，第二个参数是一个数组，是传给执行函数的参数（与 <code>call</code> 的区别）；</p>
<ul>
<li>bind</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = fun.bind(thisArg[, arg1[, arg2[, ...]]]);</div></pre></td></tr></table></figure>
<p>它不会执行函数，而是返回一个新的函数，这个新的函数被指定了 <code>this</code> 的上下文，后面的参数是执行函数需要传入的参数；</p>
<p>这三个函数其实大同小异，总的目的就是去指定一个函数的上下文（<code>this</code>），我们以 <code>call</code> 函数为例；</p>
<blockquote>
<h3 id="为一个普通函数指定-this"><a href="#为一个普通函数指定-this" class="headerlink" title="为一个普通函数指定 this"></a>为一个普通函数指定 this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc'</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">foo.call(obj);</div><div class="line"> </div><div class="line"><span class="comment">// Object &#123;name: "qiutc"&#125;</span></div></pre></td></tr></table></figure>
</blockquote>
<p>可以看到，在执行 <code>foo.call(obj)</code> 的时候，函数内的 <code>this</code> 指向了 <code>obj</code> 这个对象，成功；</p>
<blockquote>
<h3 id="为对象中的方法指定一个-this"><a href="#为对象中的方法指定一个-this" class="headerlink" title="为对象中的方法指定一个 this"></a>为对象中的方法指定一个 this</h3></blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc'</span>,</div><div class="line">    <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> obj2 = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'tcqiu222222'</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line">obj.foo.call(obj2);</div><div class="line"> </div><div class="line"><span class="comment">// Object &#123;name: "tcqiu222222"&#125;</span></div></pre></td></tr></table></figure>
<p>可以看到，执行函数的时候这里的 <code>this</code> 指向了 <code>obj2</code>，成功；</p>
<blockquote>
<h3 id="为构造函数指定-this"><a href="#为构造函数指定-this" class="headerlink" title="为构造函数指定 this"></a>为构造函数指定 this</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc2222222'</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person.call(obj, <span class="string">'qiutc'</span>);</div><div class="line"> </div><div class="line"><span class="comment">// Uncaught TypeError: Person.call is not a constructor(…)</span></div></pre></td></tr></table></figure>
</blockquote>
<p>这里报了个错，原因是我们去 <code>new</code> 了 <code>Person.call</code> 函数，而非 <code>Person</code> ，这里的函数不是一个构造函数；</p>
<p>换成 <code>bind</code> 试试：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc2222222'</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> Person2 = Person.bind(obj);</div><div class="line"> </div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person2(<span class="string">'qiutc'</span>);</div><div class="line"> </div><div class="line"><span class="comment">// Person &#123;name: "qiutc"&#125;</span></div><div class="line"> </div><div class="line"><span class="built_in">console</span>.log(obj);</div><div class="line"> </div><div class="line"><span class="comment">// Object &#123;name: "qiutc2222222"&#125;</span></div></pre></td></tr></table></figure>
<p>打印出来的是 <code>Person</code> 实例化出来的对象，而和 <code>obj</code> 没有关系，而 <code>obj</code> 也没有发生变化，说明，我们给 <code>Person</code> 指定 <code>this</code> 上下文并没有生效；</p>
<p>因此可以得出：<strong>  使用 <code>bind</code> 给一个构造函数指定 <code>this</code>，在 <code>new</code> 这个构造函数的时候，<code>bind</code> 函数所指定的 <code>this</code> 并不会生效； </strong></p>
<p>当然 <code>bind</code> 不仅可以指定<code>this</code> ，还能传入参数，我们来试试这个操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc2222222'</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line"><span class="keyword">var</span> Person2 = Person.bind(obj, <span class="string">'qiutc111111'</span>);</div><div class="line"> </div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person2(<span class="string">'qiutc'</span>);</div><div class="line"> </div><div class="line"><span class="comment">// Person &#123;name: "qiutc111111"&#125;</span></div></pre></td></tr></table></figure>
<p>可以看到，虽然指定 <code>this</code> 不起作用，但是传入参数还是起作用了；</p>
<blockquote>
<h3 id="为箭头函数指定-this"><a href="#为箭头函数指定-this" class="headerlink" title="为箭头函数指定 this"></a>为箭头函数指定 this</h3></blockquote>
<p>我们来定义一个全局下的箭头函数，因此这个箭头函数中的 this 必然会指向全局对象，如果用 call 方法改变 this 呢：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> afoo = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">afoo(<span class="number">1</span>);</div><div class="line"> </div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// Window</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'qiutc'</span></div><div class="line">&#125;;</div><div class="line"> </div><div class="line">afoo.call(obj, <span class="number">2</span>);</div><div class="line"> </div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// Window</span></div></pre></td></tr></table></figure></p>
<p>可以看到，这里的<code>call</code> 指向 <code>this</code> 的操作并没有成功，所以可以得出：<strong> 箭头函数中的 <code>this</code> 在定义它的时候已经决定了（执行定义它的作用域中的 <code>this</code>），与如何调用以及在哪里调用它无关，包括 (<code>call, apply, bind</code>) 等操作都无法改变它的 <code>this</code> </strong>。</p>
<p>只要记住箭头函数大法好，不变的 <code>this</code>。</p>
<h6 id="文章来源qiutc-me，如有侵权请联系进行删除，谢谢"><a href="#文章来源qiutc-me，如有侵权请联系进行删除，谢谢" class="headerlink" title="文章来源qiutc.me，如有侵权请联系进行删除，谢谢"></a>文章来源<a href="http://qiutc.me/post/this-this-this-in-javascript.html" target="_blank" rel="external">qiutc.me</a>，如有侵权请联系进行删除，谢谢</h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 js 中的 &lt;code&gt;this&lt;/code&gt; 文章的一个总结归纳&lt;/p&gt;
&lt;p&gt;在 js 中，&lt;code&gt;this&lt;/code&gt; 这个上下文总是变化莫测，很多时候出现 bug 总是一头雾水，其实，只要分清楚不同的情况下如何执行就 ok 了。&lt;/p&gt;
&lt;p&gt;全局执行&lt;/p&gt;
&lt;p&gt;首先，我们在全局环境中看看它的 &lt;code&gt;this&lt;/code&gt; 是什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;浏览器：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Window &amp;#123;speechSynthesis: SpeechSynthesis, caches: CacheStorage, localStorage: Storage, sessionStorage: Storage, webkitStorageInfo: DeprecatedStorageInfo…&amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;node：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// global&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到打印出了 &lt;code&gt;global&lt;/code&gt; 对象；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 总结 &lt;/strong&gt;：在全局作用域中它的 &lt;code&gt;this&lt;/code&gt; 执行当前的全局对象（浏览器端是 &lt;code&gt;Window&lt;/code&gt;，&lt;code&gt;node&lt;/code&gt; 中是 &lt;code&gt;global&lt;/code&gt;）。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入javascript——构造函数和原型对象</title>
    <link href="http://yoursite.com/2016/11/18/javascript-Object/"/>
    <id>http://yoursite.com/2016/11/18/javascript-Object/</id>
    <published>2016-11-18T07:00:10.000Z</published>
    <updated>2016-11-18T07:31:10.923Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常用的几种对象创建模式"><a href="#常用的几种对象创建模式" class="headerlink" title="常用的几种对象创建模式"></a>常用的几种对象创建模式</h4><ul>
<li>使用new关键字创建</li>
</ul>
<p>最基础的对象创建方式，无非就是和其他多数语言一样说的一样：没对象，你new一个呀！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gf = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">gf.name = <span class="string">"zhangSan"</span>;</div><div class="line">gf.bar = <span class="string">"c++"</span>;</div><div class="line">gf.sayWhat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"said:love you forever"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>使用字面量创建</li>
</ul>
<p>这样似乎妥妥的了，但是宅寂的geek们岂能喜欢如此复杂和low土的定义变量的方式，作为一门脚本语言那应该有和其他兄弟们一样的范儿，于是出现了对象字面量的定义方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gf = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">"zhangSan"</span>,</div><div class="line">    <span class="attr">bar</span> : <span class="string">"c++"</span>,</div><div class="line">    <span class="attr">sayWhat</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"said:love you forever"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>工厂模式</li>
</ul>
<p>实际上这是我们在实际中最常用的对象定义方式，但是我要有好多拥有相似属性的对象（想想都让人激动。。。）怎么办呢？那要是一个个的定义，就会产生 大量的代码，何不建个工厂，批量的生产出我们的对象呢，于是，javascript世界中第一个充气娃。。。不，“工厂模式”诞生了！<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createGf</span>(<span class="params">name, bar</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name = name;</div><div class="line">    o.bar = bar;</div><div class="line">    o.sayWhat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name + <span class="string">"said:love you forever"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> gf1 = createGf(<span class="string">"bingbing"</span>,<span class="string">"d"</span>);</div><div class="line"><span class="keyword">var</span> gf2 = createGf(<span class="string">"mimi"</span>,<span class="string">"a"</span>);</div></pre></td></tr></table></figure></p>
<ul>
<li>构造函数</li>
</ul>
<p>工厂模式解决了多个相似对象的创建问题，但是问题又来了，这些对象都是Object整出来的，怎么区分它们的对象具体类型呢？这时候我们就需要切换到另一种模式了，构造函数模式：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Gf</span>(<span class="params">name,bar</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.bar = bar;</div><div class="line">    <span class="keyword">this</span>.sayWhat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name + <span class="string">"said:love you forever"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> gf1 = <span class="keyword">new</span> Gf(<span class="string">"vivian"</span>,<span class="string">"f"</span>);</div><div class="line"><span class="keyword">var</span> gf2 = <span class="keyword">new</span> Gf(<span class="string">"vivian2"</span>,<span class="string">"f"</span>);</div><div class="line"><span class="string">`</span></div></pre></td></tr></table></figure></p>
<p>这里我们使用一个大写字母开头的构造函数替代了上例中的createGf，注意按照约定构造函数的首字母要大写。在这里我们创建一个新对象，然后将构造函数的作用域赋给新对象，调用构造函数中的方法。</p>
<p>上面的方式似乎没什么不妥，但是我们可以发现，两个实例中调用的构造函数中的sayWhat方法不是同一个Function实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(gf1.sayWhat == gf2.sayWhat); <span class="comment">//false</span></div></pre></td></tr></table></figure></p>
<p>调用同一个方法，却声明了不同的实例，实在浪费资源。我们可以优化一下将sayWhat函数放到构造函数外面声明：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Gf</span>(<span class="params">name,bar</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.bar = bar;</div><div class="line">    <span class="keyword">this</span>.sayWhat = sayWhat</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayWhat</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name + <span class="string">"said:love you forever"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样解决了，多个实例多次定义同一个方法实例的问题，但是新问题又来了，我们定义的sayWhat是一个全局作用域的方法，但这个方法其实是没法直接调用的，这就有点矛盾了。如何更优雅的定义一个具备一定封装性的对象呢？我们来看一下javascript原型对象模式。</p>
<h4 id="原型对象模式"><a href="#原型对象模式" class="headerlink" title="原型对象模式"></a>原型对象模式</h4><ul>
<li>理解原型对象</li>
</ul>
<p><img src="/images/post/post2.png" alt="ss"></p>
<p>当我们创建一个函数时，该函数就会具备一个prototype属性，这个属性指向通过构造函数创建的那个函数的原型对象。通俗点讲原型对象就是内存中为其他对象提供共享属性和方法的对象。</p>
<p>在原型模式中，不必再构造函数中定义实例属性，可以将属性信息直接赋予原型对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Gf</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Gf.prototype.name = <span class="string">"vivian"</span>;</div><div class="line">    Gf.prototype.bar = <span class="string">"c++"</span>;</div><div class="line">    Gf.prototype.sayWhat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name + <span class="string">"said:love you forever"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> gf1 = <span class="keyword">new</span> Gf();</div><div class="line">gf1.sayWhat();</div><div class="line"><span class="keyword">var</span> gf2 = <span class="keyword">new</span> Gf();</div></pre></td></tr></table></figure></p>
<p>和构造函数不同的是这里新对象的属性和方法是所有实例都可以共享的，换句话说gf1和gf2访问的是同一份属性和方法。原型对象中除了我们赋予的属性外，还有一些内置的属性，所有原型对象都具备一个constructor属性，这个属性是一个指向包含prototype属性函数的一个指针（敢不敢再绕点！）。通过一幅图我们来清楚的理一下这个绕口的流程：</p>
<p><img src="/images/post/bVcG98.png" alt="ss"></p>
<p>所有的对象都有一个原型对象（prototype），原型对象中有一个constructor属性指向包含prototype属性的函数，Gf的实例gf1和gf2都包含一个内部属性指向原型对象（在firefox浏览器中表现为私有属性proto），当我们访问一个对象中的属性时，首先会询问实例对象中有没有该属性，如果没有则继续查找原型对象。</p>
<ul>
<li>使用原型对象</li>
</ul>
<p>在前面的示例中，我们注意到在为原型对象添加属性时，需要每个都增加Gf.prototype，这个工作很重复，在上面对象的创建模式中，我们知道可以通过字面量的形式创建一个对象，这里我们也可以改进一下：<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Gf</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Gf.prototype = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">"vivian"</span>,</div><div class="line">    <span class="attr">bar</span> : <span class="string">"c++"</span>,</div><div class="line">    <span class="attr">sayWhat</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name + <span class="string">"said:love you forever"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里有一个地方需要特别注意下，constructor属性不再指向对象Gf，因为每定义一个函数，就会同时为其创建一个prototype对象，这个对象也会自动获取一个新的constructor属性，这个地方我们使用Gf.prototype本质上覆写了原有的prototype对象，因此constructor也变成了新对象的constructor属性，不再指向Gf，而是Object:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gf1 = <span class="keyword">new</span> Gf();</div><div class="line"><span class="built_in">console</span>.log(gf1.constructor == Gf);<span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(gf1.constructor == <span class="built_in">Object</span>)<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>一般情况下，这个微妙的改变是不会对我们造成影响的，但如果你对constructor有特殊的需求，我们也可以显式的指定下Gf.prototype的constructor属性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Gf.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span> : Gf,</div><div class="line">    <span class="attr">name</span> : <span class="string">"vivian"</span>,</div><div class="line">    <span class="attr">bar</span> : <span class="string">"c++"</span>,</div><div class="line">    <span class="attr">sayWhat</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name + <span class="string">"said:love you forever"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> gf1 = <span class="keyword">new</span> Gf();</div><div class="line"><span class="built_in">console</span>.log(gf1.constructor == Gf);<span class="comment">//true</span></div></pre></td></tr></table></figure></p>
<p>通过对原型对象模式的初步了解，我们发现所有的实例对象都共享相同的属性，这是原型模式的基本特点，但往往对于开发者来说这是把“双刃剑”，在实际开发中，我们希望的实例应该是具备自己的属性，这也是在实际开发中很少有人单独使用原型模式的主要原因。</p>
<ul>
<li>构造函数和原型组合模式</li>
</ul>
<p>在实际开发中，我们可以使用构造函数来定义对象的属性，使用原型来定义共享的属性和方法，这样我们就可以传递不同的参数来创建出不同的对象，同时又拥有了共享的方法和属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Gf</span>(<span class="params">name,bar</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.bar = bar;</div><div class="line">&#125;</div><div class="line">Gf.prototype = &#123;</div><div class="line">    <span class="attr">constructor</span> : Gf,</div><div class="line">    <span class="attr">sayWhat</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.name + <span class="string">"said:love you forever"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> gf1 = <span class="keyword">new</span> Gf(<span class="string">"vivian"</span>, <span class="string">"f"</span>);</div><div class="line"><span class="keyword">var</span> gf2 = <span class="keyword">new</span> Gf(<span class="string">"vivian1"</span>, <span class="string">"c"</span>);</div></pre></td></tr></table></figure>
<p>在这个例子中，我们再构造函数中定义了对象各自的属性值，在原型对象中定义了constructor属性和sayWhat函数，这样gf1和gf2属性之 间就不会产生影响了。这种模式也是实际开发中最常用的对象定义方式，包括很多js库（bootstrap等）默认的采用的模式。</p>
<p>*文章来自网络，如有侵权请联系进行删除，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;常用的几种对象创建模式&quot;&gt;&lt;a href=&quot;#常用的几种对象创建模式&quot; class=&quot;headerlink&quot; title=&quot;常用的几种对象创建模式&quot;&gt;&lt;/a&gt;常用的几种对象创建模式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用new关键字创建&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最基础的对象创建方式，无非就是和其他多数语言一样说的一样：没对象，你new一个呀！&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gf.name = &lt;span class=&quot;string&quot;&gt;&quot;zhangSan&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gf.bar = &lt;span class=&quot;string&quot;&gt;&quot;c++&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gf.sayWhat = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&quot;said:love you forever&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用字面量创建&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样似乎妥妥的了，但是宅寂的geek们岂能喜欢如此复杂和low土的定义变量的方式，作为一门脚本语言那应该有和其他兄弟们一样的范儿，于是出现了对象字面量的定义方式：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gf = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;zhangSan&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;bar&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;c++&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;sayWhat&lt;/span&gt; : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name + &lt;span class=&quot;string&quot;&gt;&quot;said:love you forever&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>周末随拍（2016.11.13）</title>
    <link href="http://yoursite.com/2016/11/16/the-Accompanying-photograph/"/>
    <id>http://yoursite.com/2016/11/16/the-Accompanying-photograph/</id>
    <published>2016-11-16T07:42:07.000Z</published>
    <updated>2016-11-16T08:18:54.357Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20161113/8.jpg" class="[full-image]">
<a id="more"></a>
<img src="/images/20161113/0.jpg" class="[full-image]">
 <center>兴庆公园</center>

<img src="/images/20161113/2.jpg" class="[full-image]">
 <center>兴庆公园</center>

<img src="/images/20161113/3.jpg" class="[full-image]">
 <center>兴庆公园</center>

<img src="/images/20161113/4.jpg" class="[full-image]">
 <center>兴庆公园</center>

<img src="/images/20161113/5.jpg" class="[full-image]">
 <center>大雁塔北广场音乐喷泉</center>

<img src="/images/20161113/7.jpg" class="[full-image]">
<center>大雁塔北广场音乐喷泉</center>

<img src="/images/20161113/8.jpg" class="[full-image]">
<center>大雁塔北广场音乐喷泉</center>

<img src="/images/20161113/10.jpg" class="[full-image]">
<center>大雁塔北广场音乐喷泉</center>

<img src="/images/20161113/12.jpg" class="[full-image]">
<center>大雁塔</center>

<img src="/images/20161113/13.jpg" class="[full-image]">
<center>小寨</center>



<center>#拍摄来自魅蓝E#</center>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/20161113/8.jpg&quot; class=&quot;[full-image]&quot;&gt;
    
    </summary>
    
      <category term="个人随写" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E5%86%99/"/>
    
    
      <category term="Photo" scheme="http://yoursite.com/tags/Photo/"/>
    
  </entry>
  
  <entry>
    <title>git 上传本地文件到github</title>
    <link href="http://yoursite.com/2016/11/12/upload-git-for-github/"/>
    <id>http://yoursite.com/2016/11/12/upload-git-for-github/</id>
    <published>2016-11-12T04:55:48.000Z</published>
    <updated>2016-11-25T04:57:09.817Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Git 上传本地文件到github</p>
</blockquote>
<p>1 git config –global user.name “Your Real Name” </p>
<p>2 git config –global user.email you@email.address</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line"></div><div class="line">git add .</div><div class="line"></div><div class="line">git commit -m 'Test'</div><div class="line"></div><div class="line">git remote add origin git@github.com:XXX/XXX.git 3 git push -u origin master</div></pre></td></tr></table></figure>
<p>一些可能遇到的问题解决：</p>
<p>如果输入$ git remote add origin<br>git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git<br>提示出错信息：fatal: remote origin already exists.</p>
<p>解决办法如下：</p>
<p>1、先输入<code>$ git remote rm origin</code></p>
<p>2、再输入<code>$ git remote add origin git@github.com:djqiang/gitdemo.git</code> 就不会报错了！</p>
<p>3、如果输入<code>$ git remote rm origin</code> 还是报错的话，<code>error: Could not remove config section ‘remote.origin’.</code>我们需要修改gitconfig文件的内容</p>
<p>4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc</p>
<p>5、找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！<br>如果输入$ ssh -T git@github.com</p>
<p>出现错误提示：<code>Permission denied</code>(publickey).因为新生成的key不能加入ssh就会导致连接不上github。</p>
<p>解决办法如下：</p>
<p>1、先输入$ ssh-agent，再输入$ ssh-add ~/.ssh/id_key，这样就可以了。</p>
<p>2、如果还是不行的话，输入<code>ssh-add ~/.ssh/id_key</code> 命令后出现报错<code>Could not open a connection to your authentication agent.</code>解决方法是key用Git<br>Gui的ssh工具生成，这样生成的时候key就直接保存在ssh中了，不需要再ssh-add命令加入了，其它的user，token等配置都用命令行来做。</p>
<p>3、最好检查一下在你复制id_rsa.pub文件的内容时有没有产生多余的空格或空行，有些编辑器会帮你添加这些的。</p>
<p>如果输入<code>$ git push origin master</code></p>
<p>提示出错信息：<code>error:failed to push som refs to …….</code></p>
<p>解决办法如下：</p>
<p>1、先输入<code>$ git pull origin master</code> //先把远程服务器github上面的文件拉下来</p>
<p>2、再输入<code>$ git push origin master</code></p>
<p>3、如果出现报错 <code>fatal: Couldn’t find remote ref master</code>或者<code>fatal: ‘origin’ does not appear to be a git repository</code>以及<code>fatal: Could not read from remote repository.</code></p>
<p>4、则需要重新输<code>入$ git remote add origingit@github.com:djqiang/gitdemo.git</code></p>
<p>使用git在本地创建一个项目的过程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ makdir ~/hello-world    //创建一个项目hello-world</div><div class="line">$ cd ~/hello-world       //打开这个项目</div><div class="line">$ git init             //初始化</div><div class="line">$ touch README</div><div class="line">$ git add README        //更新README文件</div><div class="line">$ git commit -m ‘first commit’     //提交更新，并注释信息“first commit”</div><div class="line">$ git remote add origin git@github.com:defnngj/hello-world.git     //连接远程github项目</div><div class="line">$ git push -u origin master     //将本地项目更新到github项目上去</div></pre></td></tr></table></figure></p>
<p>我的github 同步测试：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">echo "# text" &gt;&gt; README.md</div><div class="line">git init</div><div class="line">git add README.md</div><div class="line">git commit -m "first commit"</div><div class="line">git remote add origin https://github.com/Littlombie/text.git</div><div class="line">git push -u origin master</div><div class="line">…or push an existing repository from the command line</div><div class="line"></div><div class="line"></div><div class="line">git remote add origin https://github.com/Littlombie/text.git</div><div class="line">git push -u origin master</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Git 上传本地文件到github&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1 git config –global user.name “Your Real Name” &lt;/p&gt;
&lt;p&gt;2 git config –global user.ema
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>css3导航动画切换</title>
    <link href="http://yoursite.com/2016/11/09/Rotate-the-navigation/"/>
    <id>http://yoursite.com/2016/11/09/Rotate-the-navigation/</id>
    <published>2016-11-09T10:14:22.000Z</published>
    <updated>2016-11-09T11:11:17.292Z</updated>
    
    <content type="html"><![CDATA[<p>我们浏览有些手机网站时，有时会发现页面的导航打开动画很有意思，类似下图这种：</p>
<p><img src="http://littlombie.github.io/images/nav.gif" alt="nav"></p>
<p>现在我们用<code>html</code> <code>input</code>表单以及<code>css3</code>实现这个功能，原理如下：</p>
<ul>
<li><p>html为用<code>input</code> 与<code>label</code>表单，<code>label</code>下边三个<code>div</code>表示导航的三条横线；</p>
</li>
<li><p>当点击<code>label</code>时，<code>input</code>会选中,与之对应的<code>label</code>下边三个<code>div</code>执行动画,其中第二个div让宽度为0，位置发生变化，第一个与第三个div执行旋转动画，形成<code>×</code>；</p>
</li>
<li><p>再次点击取消选中时，利用<code>input</code>的属性，恢复到选中之前的状态。</p>
</li>
</ul>
<p>html代码如下：</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav_bar"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"nemu_button"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"nemu_button"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line_top transition"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line_meddle transition"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line_bottom transition"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>css代码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*过渡动画transition*/</span></div><div class="line"><span class="selector-class">.transition</span> &#123;</div><div class="line">	<span class="attribute">-webkit-transition</span>: all .<span class="number">25s</span> ease-in-out;</div><div class="line">	   <span class="attribute">-moz-transition</span>: all .<span class="number">25s</span> ease-in-out;</div><div class="line">	    <span class="attribute">-ms-transition</span>: all .<span class="number">25s</span> ease-in-out;</div><div class="line">	     <span class="attribute">-o-transition</span>: all .<span class="number">25s</span> ease-in-out;</div><div class="line">	        <span class="attribute">transition</span>: all .<span class="number">25s</span> ease-in-out;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#nemu_button</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">9999px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">label</span> &#123;</div><div class="line">	<span class="attribute">position</span>: absolute;</div><div class="line">	<span class="attribute">right</span>:<span class="number">50px</span>;</div><div class="line">	<span class="attribute">cursor</span>:pointer;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">label</span>&gt;<span class="selector-tag">div</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">30px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">2px</span>;</div><div class="line">	<span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</div><div class="line">	<span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*input选中是 label下边的三条横线的过渡动画*/</span></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span> <span class="selector-class">.line_top</span> &#123;</div><div class="line">	<span class="attribute">margin-top</span>: <span class="number">15px</span>;</div><div class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">	   <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">	    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">	     <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">	        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-45deg);</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span> <span class="selector-class">.line_meddle</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">	<span class="attribute">margin-top</span>: -<span class="number">15px</span>;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span> + <span class="selector-tag">label</span> <span class="selector-class">.line_bottom</span> &#123;</div><div class="line">	<span class="attribute">margin-top</span>: -<span class="number">5px</span>;</div><div class="line">	<span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">	   <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">	    <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">	     <span class="attribute">-o-transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">	        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们浏览有些手机网站时，有时会发现页面的导航打开动画很有意思，类似下图这种：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://littlombie.github.io/images/nav.gif&quot; alt=&quot;nav&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在我们用&lt;code&gt;html&lt;/code&gt; &lt;code&gt;input&lt;/code&gt;表单以及&lt;code&gt;css3&lt;/code&gt;实现这个功能，原理如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;html为用&lt;code&gt;input&lt;/code&gt; 与&lt;code&gt;label&lt;/code&gt;表单，&lt;code&gt;label&lt;/code&gt;下边三个&lt;code&gt;div&lt;/code&gt;表示导航的三条横线；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当点击&lt;code&gt;label&lt;/code&gt;时，&lt;code&gt;input&lt;/code&gt;会选中,与之对应的&lt;code&gt;label&lt;/code&gt;下边三个&lt;code&gt;div&lt;/code&gt;执行动画,其中第二个div让宽度为0，位置发生变化，第一个与第三个div执行旋转动画，形成&lt;code&gt;×&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再次点击取消选中时，利用&lt;code&gt;input&lt;/code&gt;的属性，恢复到选中之前的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;html代码如下：&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>数字化Loading</title>
    <link href="http://yoursite.com/2016/11/07/Loading-Page/"/>
    <id>http://yoursite.com/2016/11/07/Loading-Page/</id>
    <published>2016-11-07T10:15:27.000Z</published>
    <updated>2016-11-07T11:11:37.153Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>js页面从0~100%的loading；</li>
</ul>
<p>javascript代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSB</span>(<span class="params">v, el</span>) </span>&#123;</div><div class="line">        <span class="comment">//判断页面是否加载完成</span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.readyState == <span class="string">"complete"</span>) &#123;</div><div class="line">            valueEl = el.children[<span class="number">0</span>];</div><div class="line">            valueEl.innerText = v + <span class="string">"%"</span>;<span class="comment">//显示百分比</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fakeProgress</span>(<span class="params">v, el</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (v &gt; <span class="number">100</span>)&#123;<span class="comment">//加载完成</span></div><div class="line">            <span class="built_in">document</span>.querySelector(<span class="string">'#text'</span>).innerHTML=<span class="string">"加载完成"</span>;</div><div class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="built_in">document</span>.querySelector(<span class="string">'#sb'</span>).style.display=<span class="string">"none"</span>;</div><div class="line">            &#125;,<span class="number">200</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            setSB(v, el);</div><div class="line">            <span class="built_in">window</span>.setTimeout(<span class="string">"fakeProgress("</span> + (++v) + <span class="string">", document.all['"</span> + el.id + <span class="string">"'])"</span>, <span class="number">20</span>); </div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>html代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"fakeProgress(0, sb)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span>正在载入中，请稍侯……<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">'sb'</span> <span class="attr">style</span>=<span class="string">"width: 302px"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"font-size: 9pt; width: 100%; text-align: center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">center</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      js页面从0~100%的loading； 用`document.readyState == &quot;complete&quot;`判断页面是否加载完成，loading完成后显示加载完成。
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js轮播图(适用于PC)</title>
    <link href="http://yoursite.com/2016/11/03/20161103js-Slider/"/>
    <id>http://yoursite.com/2016/11/03/20161103js-Slider/</id>
    <published>2016-11-03T08:22:46.000Z</published>
    <updated>2016-11-07T06:41:42.636Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>实现自动左右轮播</li>
<li>鼠标移入停止轮播，鼠标移开继续轮播</li>
<li>prev next点击左右切换</li>
<li>点击下边导航可以跳转到相应的页</li>
</ul>
<a id="more"></a>
<p>首先引入自己封装的简单的js运动库 move.js<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"move.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, name</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (obj.currentStyle) &#123;</div><div class="line">            <span class="keyword">return</span> obj.currentStyle[name];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">false</span>)[name];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj, attr, iTarget</span>) </span>&#123;</div><div class="line">        clearInterval(obj.timer);</div><div class="line">        obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> cur = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span> (attr == <span class="string">'opacity'</span>) &#123;</div><div class="line">                cur = <span class="built_in">parseFloat</span>(getStyle(obj, attr)) * <span class="number">100</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                cur = <span class="built_in">parseInt</span>(getStyle(obj, attr));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> speed = <span class="built_in">parseInt</span>(iTarget - cur) / <span class="number">6</span>;</div><div class="line">            speed = speed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(speed) : <span class="built_in">Math</span>.floor(speed);</div><div class="line">            <span class="keyword">if</span> (cur == iTarget) &#123;</div><div class="line">                clearInterval(obj.timer);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (attr == <span class="string">'opacity'</span>) &#123;</div><div class="line">                    obj.style.filter = <span class="string">'alpha(opacity:'</span> + (cur + speed) + <span class="string">')'</span>;</div><div class="line">                    obj.style.opacity = (cur + speed) / <span class="number">100</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    obj.style[attr] = cur + speed + <span class="string">'px'</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">30</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>javascript代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getByClass</span>(<span class="params">oParent, sClass</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> aEle = oParent.getElementsByTagName(<span class="string">'*'</span>);</div><div class="line">    <span class="keyword">var</span> aResult = [];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aEle.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (aEle[i].className = sClass) &#123;</div><div class="line">            aResult.push(aEle[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> aResult;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> con = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</div><div class="line">    <span class="keyword">var</span> bd = <span class="built_in">document</span>.getElementById(<span class="string">'bd'</span>);</div><div class="line">    <span class="keyword">var</span> oUl = bd.querySelector(<span class="string">'ul'</span>);</div><div class="line">    <span class="keyword">var</span> oLi = bd.querySelectorAll(<span class="string">'li'</span>);</div><div class="line">    <span class="keyword">var</span> prev = <span class="built_in">document</span>.getElementById(<span class="string">'prev'</span>);</div><div class="line">    <span class="keyword">var</span> next = <span class="built_in">document</span>.getElementById(<span class="string">'next'</span>);</div><div class="line">    <span class="keyword">var</span> hd = <span class="built_in">document</span>.getElementById(<span class="string">'hd'</span>);</div><div class="line">    <span class="keyword">var</span> piont = hd.getElementsByTagName(<span class="string">'span'</span>);</div><div class="line">    <span class="keyword">var</span> nowNav = <span class="built_in">document</span>.querySelector(<span class="string">'.nowNav'</span>);</div><div class="line">    <span class="keyword">var</span> op = oLi[<span class="number">0</span>].offsetWidth;</div><div class="line">    <span class="keyword">var</span> move = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">var</span> speed = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> now = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> navi = <span class="number">1</span>;</div><div class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.navig'</span>).innerHTML = oLi.length;</div><div class="line">    oUl.style.width = op * oLi.length + <span class="string">'px'</span>;</div><div class="line">    <span class="comment">// 鼠标滑过时停止轮播；滑出式又开始轮播</span></div><div class="line">    con.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        clearInterval(move);</div><div class="line">    &#125;;</div><div class="line">    con.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        autoMove();</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 点击上边的点，跳到相应的页面</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; piont.length; i++) &#123;</div><div class="line">        piont[i].index = i;</div><div class="line">        piont[i].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// console.log(oUl.offsetLeft);</span></div><div class="line">            now = <span class="keyword">this</span>.index;</div><div class="line">            tab();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 点击上边的点，跳到相应的页面函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">tab</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; piont.length; i++) &#123;</div><div class="line">            piont[i].className = <span class="string">''</span>;</div><div class="line">        &#125;</div><div class="line">        piont[now].className = <span class="string">'cur'</span>;</div><div class="line">        startMove(oUl, <span class="string">'left'</span>, <span class="number">-1200</span> * now);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 点击向前一页</span></div><div class="line">    prev.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        speed -= op;</div><div class="line">        <span class="keyword">if</span> (oUl.offsetLeft &gt;= <span class="number">0</span>) &#123;</div><div class="line">            speed = <span class="number">3600</span>;</div><div class="line">        &#125;</div><div class="line">        moving();</div><div class="line">        now--;</div><div class="line">        <span class="keyword">if</span> (now == <span class="number">-1</span>) &#123;</div><div class="line">            now = piont.length - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        tab();</div><div class="line">        <span class="keyword">if</span> (navi &lt; <span class="number">2</span>) &#123;</div><div class="line">            navi = <span class="number">5</span>;</div><div class="line">        &#125;</div><div class="line">        nowNav.innerHTML = navi<span class="number">-1</span>;</div><div class="line">        navi--;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 点击向后一页</span></div><div class="line">    next.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        speed += op;</div><div class="line">        <span class="keyword">if</span> (oUl.offsetLeft &lt;= <span class="number">-3600</span>) &#123;</div><div class="line">            speed = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        moving();</div><div class="line">        now++;</div><div class="line">        <span class="keyword">if</span> (now == piont.length) &#123;</div><div class="line">            now = <span class="number">0</span></div><div class="line">        &#125;</div><div class="line">        tab();</div><div class="line">        navi++;</div><div class="line">        <span class="keyword">if</span> (navi &gt; <span class="number">4</span>) &#123;</div><div class="line">            navi = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        nowNav.innerHTML = navi;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 轮播的函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">moving</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        startMove(oUl, <span class="string">'left'</span>, -speed);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 自动轮播 轮播间隔时间3000</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autoMove</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        move = setInterval(next.onclick, <span class="number">3000</span>);</div><div class="line">    &#125;</div><div class="line">    autoMove();</div></pre></td></tr></table></figure>
<p>html代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bd"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/0.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control"</span> <span class="attr">id</span>=<span class="string">"control"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"prev"</span> <span class="attr">id</span>=<span class="string">"prev"</span>&gt;</span>&amp;lsaquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"next"</span> <span class="attr">id</span>=<span class="string">"next"</span>&gt;</span>&amp;rsaquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"navigtion"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"nowNav"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span>/<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"navig"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hd"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cur"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>css代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-tag">ul</span>,</div><div class="line">    <span class="selector-tag">li</span> &#123;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">list-style</span>: none;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.container</span> &#123;</div><div class="line">        <span class="attribute">position</span>: relative;</div><div class="line">        <span class="attribute">width</span>: <span class="number">1200px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">610px</span>;</div><div class="line">        <span class="attribute">margin</span>: <span class="number">150px</span> auto;</div><div class="line">        <span class="attribute">overflow</span>: hidden;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.container</span> <span class="selector-id">#bd</span> <span class="selector-tag">ul</span>,</div><div class="line">    <span class="selector-class">.container</span> <span class="selector-id">#bd</span> <span class="selector-tag">li</span> &#123;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.container</span> <span class="selector-id">#bd</span> <span class="selector-tag">ul</span> &#123;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.container</span> <span class="selector-id">#bd</span> <span class="selector-tag">li</span> &#123;</div><div class="line">        <span class="attribute">float</span>: left;</div><div class="line">        <span class="attribute">width</span>: <span class="number">1200px</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.container</span> <span class="selector-id">#bd</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</div><div class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.control</span> <span class="selector-tag">span</span> &#123;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">z-index</span>: <span class="number">19</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">32px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">32px</span>;</div><div class="line">        <span class="attribute">margin</span>: auto;</div><div class="line">        <span class="attribute">background</span>: <span class="number">#ff0</span>;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">32px</span>;</div><div class="line">        <span class="attribute">line-height</span>: <span class="number">30px</span>;</div><div class="line">        <span class="attribute">text-align</span>: center;</div><div class="line">        <span class="attribute">cursor</span>: pointer;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.control</span> <span class="selector-tag">span</span><span class="selector-class">.next</span> &#123;</div><div class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-id">#hd</span> &#123;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">        <span class="attribute">z-index</span>: <span class="number">29</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">20%</span>;</div><div class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">margin</span>: auto;</div><div class="line">        <span class="attribute">bottom</span>: <span class="number">2%</span>;</div><div class="line">        <span class="attribute">text-align</span>: center;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-id">#hd</span> <span class="selector-tag">span</span> &#123;</div><div class="line">        <span class="attribute">width</span>: <span class="number">10px</span>;</div><div class="line">        <span class="attribute">height</span>: <span class="number">10px</span>;</div><div class="line">        <span class="attribute">background</span>: <span class="number">#f00</span>;</div><div class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">        <span class="attribute">cursor</span>: pointer;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-id">#hd</span> <span class="selector-class">.cur</span> &#123;</div><div class="line">        <span class="attribute">background</span>: <span class="number">#ff0</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-class">.navigtion</span> &#123;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">        <span class="attribute">bottom</span>: <span class="number">3%</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">10%</span>;</div><div class="line">        <span class="comment">/* margin: 0 auto; */</span></div><div class="line">        <span class="attribute">display</span>: block;</div><div class="line">        <span class="attribute">text-align</span>: center;</div><div class="line">        <span class="attribute">left</span>: <span class="number">45%</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;实现自动左右轮播&lt;/li&gt;
&lt;li&gt;鼠标移入停止轮播，鼠标移开继续轮播&lt;/li&gt;
&lt;li&gt;prev next点击左右切换&lt;/li&gt;
&lt;li&gt;点击下边导航可以跳转到相应的页&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js实现活动倒计时</title>
    <link href="http://yoursite.com/2016/11/02/javascript-add-Date/"/>
    <id>http://yoursite.com/2016/11/02/javascript-add-Date/</id>
    <published>2016-11-02T10:35:28.000Z</published>
    <updated>2016-11-02T10:50:21.175Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>js倒计时</p>
<ul>
<li>包括天数、时、分、秒</li>
<li>手动填写活动开始/结束时间</li>
</ul>
</blockquote>
<p>javascript 获取当前时间 然后在填写活动开始/结束时间</p>
<p>javascript 代码如下：<br> <a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//获取当前时间</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetServerTime</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> urodz = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"11/7/2016 10:00:00"</span>); <span class="comment">//填写活动开始/结束时间</span></div><div class="line">    now.setTime(now.getTime() + <span class="number">250</span>);</div><div class="line">    days = (urodz - now) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; <span class="comment">//获取天数</span></div><div class="line">    daysRound = <span class="built_in">Math</span>.floor(days);</div><div class="line">    hours = (urodz - now) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * daysRound); <span class="comment">//获取小时</span></div><div class="line">    hoursRound = <span class="built_in">Math</span>.floor(hours);</div><div class="line">    minutes = (urodz - now) / <span class="number">1000</span> / <span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * daysRound) - (<span class="number">60</span> * hoursRound); <span class="comment">//获取分钟</span></div><div class="line">    minutesRound = <span class="built_in">Math</span>.floor(minutes);</div><div class="line">    seconds = (urodz - now) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * daysRound) - (<span class="number">60</span> * <span class="number">60</span> * hoursRound) - (<span class="number">60</span> * minutesRound); <span class="comment">//获取秒钟</span></div><div class="line">    secondsRound = <span class="built_in">Math</span>.round(seconds);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"date"</span>).innerHTML = daysRound;</div><div class="line">    <span class="comment">//把时分秒显示出来</span></div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"time"</span>).innerHTML = hoursRound + <span class="string">"Hours,"</span> + minutesRound + <span class="string">"Minutes,"</span> + secondsRound + <span class="string">"Seconds"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//保持页面1/4秒重新获取一次 </span></div><div class="line">setInterval(<span class="string">"GetServerTime()"</span>, <span class="number">250</span>);</div></pre></td></tr></table></figure></p>
<p>html代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"date"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"white14b"</span>&gt;</span>Days,<span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;js倒计时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括天数、时、分、秒&lt;/li&gt;
&lt;li&gt;手动填写活动开始/结束时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;javascript 获取当前时间 然后在填写活动开始/结束时间&lt;/p&gt;
&lt;p&gt;javascript 代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>javascript基本运动框架</title>
    <link href="http://yoursite.com/2016/11/01/my-blog/"/>
    <id>http://yoursite.com/2016/11/01/my-blog/</id>
    <published>2016-11-01T03:42:21.000Z</published>
    <updated>2016-11-01T05:00:24.454Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基础的形变"><a href="#基础的形变" class="headerlink" title="基础的形变"></a>基础的形变</h4><ul>
<li>长度、宽度</li>
<li>字体大小</li>
<li>边框宽度</li>
<li>透明度</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//基本的运动动画</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj, name</span>) </span>&#123;<span class="comment">//获取行内的样式 name表示获取的样式</span></div><div class="line">    <span class="keyword">if</span> (obj.currentStyle) &#123;</div><div class="line">        <span class="keyword">return</span> obj.currentStyle[name];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> getComputedStyle(obj, <span class="literal">false</span>)[name];</div><div class="line">   &#125; </div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">//运动框架主体</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">startMove</span>(<span class="params">obj, attr, iTarget</span>) </span>&#123;<span class="comment">//attr 变化的样式；iTarget 最后变化目标</span></div><div class="line">    clearInterval(obj.timer);<span class="comment">//初始化 清除所有的计时器</span></div><div class="line">    obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> cur = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (attr == <span class="string">'opacity'</span>) &#123;<span class="comment">//如果变化的是透明度  执行下边</span></div><div class="line">            cur = <span class="built_in">parseFloat</span>(getStyle(obj, attr)) * <span class="number">100</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            cur = <span class="built_in">parseInt</span>(getStyle(obj, attr));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> speed = <span class="built_in">parseInt</span>(iTarget - cur) / <span class="number">6</span>;<span class="comment">// 动画进行的事件 6可以修改 </span></div><div class="line">        speed = speed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(speed) : <span class="built_in">Math</span>.floor(speed);</div><div class="line">        <span class="keyword">if</span> (cur == iTarget) &#123;</div><div class="line">            clearInterval(obj.timer);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (attr == <span class="string">'opacity'</span>) &#123;<span class="comment">//如果变化的是透明度  执行下边</span></div><div class="line">                obj.style.filter = <span class="string">'alpha(opacity:'</span> + (cur + speed) + <span class="string">')'</span>;</div><div class="line">                obj.style.opacity = (cur + speed) / <span class="number">100</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                obj.style[attr] = cur + speed + <span class="string">'px'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;, <span class="number">30</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//改变宽度</span></div><div class="line">oDiv.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    startMove(<span class="keyword">this</span>, <span class="string">'width'</span>, <span class="number">200</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//透明度</span></div><div class="line">oDiv.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    startMove(<span class="keyword">this</span>, <span class="string">'opacity'</span>, <span class="number">30</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="颜色的渐变"><a href="#颜色的渐变" class="headerlink" title="颜色的渐变"></a>颜色的渐变</h4><ul>
<li>通过修改元素的rgb值 来实现渐变</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//颜色的渐变动画  改变的是 rgb值</span></div><div class="line"><span class="comment">//所有代码的执行时间只有24毫秒左右。  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fadeColor</span>(<span class="params">from, to, callback, duration, totalFrames</span>) </span>&#123;<span class="comment">//form 初始颜色 to最终颜色 callback完后的回调函数  duration 动画执行时间  totalFrames总帧数，默认为持续秒数*15帧，也即每秒15帧   </span></div><div class="line"><span class="comment">//用一个函数来包裹setTimeout，根据帧数来确定延时     </span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doTimeout</span>(<span class="params">color, frame</span>) </span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                callback(color);</div><div class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">                JSLog.write(e);</div><div class="line">            &#125;</div><div class="line">        &#125;, (duration * <span class="number">1000</span> / totalFrames) * frame);</div><div class="line">        <span class="comment">//总持续秒数/每秒帧数*当前帧数=延时(秒)，再乘以1000作为延时(毫秒)      </span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 整个渐变过程的持续时间，默认为1秒     </span></div><div class="line">    <span class="keyword">var</span> duration = duration || <span class="number">1</span>;</div><div class="line">    <span class="comment">// 总帧数，默认为持续秒数*15帧，也即每秒15帧      </span></div><div class="line">    <span class="keyword">var</span> totalFrames = totalFrames || duration * <span class="number">15</span>;</div><div class="line">    <span class="keyword">var</span> r, g, b;</div><div class="line">    <span class="keyword">var</span> frame = <span class="number">1</span>;</div><div class="line">    <span class="comment">//在第0帧设置起始颜色      </span></div><div class="line">    doTimeout(<span class="string">'rgb('</span> + <span class="keyword">from</span>.r + <span class="string">','</span> + <span class="keyword">from</span>.g + <span class="string">','</span> + <span class="keyword">from</span>.b + <span class="string">')'</span>, <span class="number">0</span>);</div><div class="line">    <span class="comment">//计算每次变化所需要改变的rgb值      </span></div><div class="line">    <span class="keyword">while</span> (frame &lt; totalFrames + <span class="number">1</span>) &#123;</div><div class="line">        r = <span class="built_in">Math</span>.ceil(<span class="keyword">from</span>.r * ((totalFrames - frame) / totalFrames) + to.r * (frame / totalFrames));</div><div class="line">        g = <span class="built_in">Math</span>.ceil(<span class="keyword">from</span>.g * ((totalFrames - frame) / totalFrames) + to.g * (frame / totalFrames));</div><div class="line">        b = <span class="built_in">Math</span>.ceil(<span class="keyword">from</span>.b * ((totalFrames - frame) / totalFrames) + to.b * (frame / totalFrames));</div><div class="line">        <span class="comment">// 调用本frame的doTimeout          </span></div><div class="line">        doTimeout(<span class="string">'rgb('</span> + r + <span class="string">','</span> + g + <span class="string">','</span> + b + <span class="string">')'</span>, frame);</div><div class="line">        frame++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">oDiv.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    fadeColor(&#123;</div><div class="line">        <span class="attr">r</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">g</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">b</span>: <span class="number">0</span></div><div class="line">    &#125;, <span class="comment">//star color</span></div><div class="line">    &#123;</div><div class="line">        <span class="attr">r</span>: <span class="number">18</span>,</div><div class="line">        <span class="attr">g</span>: <span class="number">162</span>,</div><div class="line">         <span class="attr">b</span>: <span class="number">143</span></div><div class="line">    &#125;, <span class="comment">//end color</span></div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">color</span>) </span>&#123;</div><div class="line">        oDiv6.style.borderColor = color;</div><div class="line">    &#125;, <span class="number">0.25</span>, <span class="number">10</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      javascript 基本运动框架，包括变化元素的宽高，透明度 以及文字、背景、边框颜色的渐变
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>hexo 在github上部署成功</title>
    <link href="http://yoursite.com/2016/10/31/my-new-post-0/"/>
    <id>http://yoursite.com/2016/10/31/my-new-post-0/</id>
    <published>2016-10-31T10:07:47.000Z</published>
    <updated>2016-11-25T04:52:11.539Z</updated>
    
    <content type="html"><![CDATA[<p>终于把本地Hexo部署到github上了，之前不知为什么 就是不成功，今天重新试了一下命令 就成功了 命令为：</p>
<h3 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h3><ul>
<li>首先打开文件夹 <code>hexo</code>，再右键打开Git Bash， 在Git Bash 上执行下列命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new <span class="string">"my new post"</span> //<span class="string">"my new post"</span>为文件名</div></pre></td></tr></table></figure>
<p>在hexo文件夹下 <code>source_post</code> 中打开<code>my-new-post.md</code>进行编辑</p>
<p>或者在存放博客的目录下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo n <span class="string">"新建博客的名字"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">title: Hello World</div><div class="line"><span class="section">date: 2013/7/13 20:46:25</span></div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>
<p>参数    描述    默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">layout:	    布局	</div><div class="line"></div><div class="line">title:	    标题	</div><div class="line"></div><div class="line">date:	    建立日期	文件建立日期</div><div class="line"></div><div class="line">updated	:	更新日期	文件更新日期</div><div class="line"></div><div class="line">comments:	开启文章的评论功能	true</div><div class="line"></div><div class="line">tags:	    标签（不适用于分页）	</div><div class="line"></div><div class="line">categories:	分类（不适用于分页）	</div><div class="line"></div><div class="line">permalink:	覆盖文章网址</div></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: 标题</div><div class="line">date: 2016-11-01 11:42:21</div><div class="line">categories: web</div><div class="line">tags: [javascript,css] //多个标签用[,]标记</div><div class="line">description: 这是说明，在首页显示的文字</div><div class="line">---</div></pre></td></tr></table></figure>
<h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>hexo 本地环境查看时首先打开文件夹 <code>hexo</code>， 在内执行以下命令</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s -p 5000 //后边的-p 5000是修改端口</div></pre></td></tr></table></figure>
<p>然后打开浏览器 输如<code>http://localhost:5000/</code>即可查看</p>
<h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo g //生成静态文件</div><div class="line">hexo s  //在本地预览效果</div><div class="line">hexo d //同步到github 上</div></pre></td></tr></table></figure>
<p>-&gt; <a href="http://blog.csdn.net/qq_15807167/article/details/51601234" target="_blank" rel="external">参考</a>&lt;:</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于把本地Hexo部署到github上了，之前不知为什么 就是不成功，今天重新试了一下命令 就成功了 命令为：&lt;/p&gt;
&lt;h3 id=&quot;发布新文章&quot;&gt;&lt;a href=&quot;#发布新文章&quot; class=&quot;headerlink&quot; title=&quot;发布新文章&quot;&gt;&lt;/a&gt;发布新文章&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先打开文件夹 &lt;code&gt;hexo&lt;/code&gt;，再右键打开Git Bash， 在Git Bash 上执行下列命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo new &lt;span class=&quot;string&quot;&gt;&quot;my new post&quot;&lt;/span&gt; //&lt;span class=&quot;string&quot;&gt;&quot;my new post&quot;&lt;/span&gt;为文件名&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在hexo文件夹下 &lt;code&gt;source_post&lt;/code&gt; 中打开&lt;code&gt;my-new-post.md&lt;/code&gt;进行编辑&lt;/p&gt;
&lt;p&gt;或者在存放博客的目录下&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo n &lt;span class=&quot;string&quot;&gt;&quot;新建博客的名字&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>这是我的第一篇Hexo博客</title>
    <link href="http://yoursite.com/2016/10/21/My-New-Post/"/>
    <id>http://yoursite.com/2016/10/21/My-New-Post/</id>
    <published>2016-10-21T02:59:40.000Z</published>
    <updated>2016-11-08T03:00:24.731Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一天不独处，我就会变得虚弱。我不以孤独为荣，但我以此为生。</p>
<footer><strong>————</strong><cite>布考斯基</cite></footer></blockquote>
<p><br><br> <img src="/images/20140111004002.jpg" class="[full-image]"><br> 这是我的第一篇博客，我现在正在熟悉Hexo,所使用的主题是NexT,我觉得这个主题简洁大方，而且里边的缓动效果特别舒服。</p>
<p> 我以后会不定时的在这上边更新一些博客，什么类型的都有，写给自己看，写给多年后的自己看。</p>
<p> 加油， 每天进步一点，不断努力，终会取得不错的成绩！<br> <a id="more"></a></p>
<p><img src="/images/bg_web.jpg" class="full-image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;一天不独处，我就会变得虚弱。我不以孤独为荣，但我以此为生。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;————&lt;/strong&gt;&lt;cite&gt;布考斯基&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;br/&gt;&lt;br&gt; &lt;img src=&quot;/images/20140111004002.jpg&quot; class=&quot;[full-image]&quot;&gt;&lt;br&gt; 这是我的第一篇博客，我现在正在熟悉Hexo,所使用的主题是NexT,我觉得这个主题简洁大方，而且里边的缓动效果特别舒服。&lt;/p&gt;
&lt;p&gt; 我以后会不定时的在这上边更新一些博客，什么类型的都有，写给自己看，写给多年后的自己看。&lt;/p&gt;
&lt;p&gt; 加油， 每天进步一点，不断努力，终会取得不错的成绩！&lt;br&gt;
    
    </summary>
    
      <category term="个人随写" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E5%86%99/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/10/21/hello-world/"/>
    <id>http://yoursite.com/2016/10/21/hello-world/</id>
    <published>2016-10-21T02:02:37.884Z</published>
    <updated>2016-10-21T02:02:37.884Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
