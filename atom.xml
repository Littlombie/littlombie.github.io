<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Littlombie&#39;s Nirvana</title>
  
  <subtitle>Novelty is the great parent of pleasure.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-20T17:10:30.308Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Littlombie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6学习（16）- Module模块化</title>
    <link href="http://yoursite.com/2019/08/21/ES6-18-module/"/>
    <id>http://yoursite.com/2019/08/21/ES6-18-module/</id>
    <published>2019-08-20T17:09:52.000Z</published>
    <updated>2019-08-20T17:10:30.308Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h3 id="ES6-的模块化语法"><a href="#ES6-的模块化语法" class="headerlink" title="ES6 的模块化语法"></a>ES6 的模块化语法</h3><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出用export 变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> A = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    test()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'class'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要导入文件中写法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//花括号中需要哪项就 导入哪项 </span></span><br><span class="line"><span class="keyword">import</span> &#123;A,test,Hello&#125; form <span class="string">`./<span class="subst">$&#123;js路径&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(A,test,Hello);</span><br></pre></td></tr></table></figure><p>第二种写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> lesson form <span class="string">`./<span class="subst">$&#123;js路径&#125;</span>`</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(lesson.A,lesson.test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="另一种写法"><a href="#另一种写法" class="headerlink" title="另一种写法"></a>另一种写法</h3><p>需要导出的文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> A = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'class'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    test()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'class'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//书写需要导出的类 变量  类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    A,</span><br><span class="line">    test,</span><br><span class="line">    Hello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lesson form <span class="string">'$&#123;js路径&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(lesson.A,lesson.test);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;h3 id=&quot;ES6-的模块化语法&quot;&gt;&lt;a href=&quot;#ES6-的模块化语法&quot; class=&quot;headerlink&quot; title=&quot;ES6 的模块化语法&quot;&gt;&lt;/a&gt;ES6 的模块化语法&lt;/h3&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（16）- Decorators</title>
    <link href="http://yoursite.com/2019/08/21/ES6-17-decorators/"/>
    <id>http://yoursite.com/2019/08/21/ES6-17-decorators/</id>
    <published>2019-08-20T17:08:31.000Z</published>
    <updated>2019-08-20T17:09:02.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><p>修饰器  </p><p>修饰函数类的行为，也可以理解为 类的扩展功能</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>需要安装插件<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-transform-decorators-legacy --save-dev</span><br></pre></td></tr></table></figure><p>修改babel文件 添加插件<br><code>plugins:[babel-plugin-transform-decorators-legacy]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="comment">//限制某个属性是只读的</span></span><br><span class="line">    <span class="keyword">let</span> readonly = <span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">        descriptor.writable = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> decriptor</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修饰器</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">        @readonly <span class="comment">//修改readonly 的行为 让其只读  </span></span><br><span class="line">        time()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'2017-08-06'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> test = <span class="keyword">new</span> Test();</span><br><span class="line">    </span><br><span class="line">    rtest.time = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'rest time'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(test.time());<span class="comment">//Cannot assign to read only property 'time' of object '#&lt;Test&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> typename = <span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">        target.myname = <span class="string">'hello'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @typename <span class="comment">//修饰器在类的外部</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'类修饰符'</span>,Test.myname); <span class="comment">//hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三方库 修饰器的js库：<strong>core-decortors</strong>;<br>内置以上的方法</p><p>可以通过下载<br><code>npm install core-decorators</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> log=<span class="function">(<span class="params">type</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target,name,descriptor</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> src_method = descriptor.value;</span><br><span class="line">            descriptor.value = <span class="function">(<span class="params">...arg</span>)=&gt;</span>&#123;</span><br><span class="line">                src_method.apply(target,arg);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`log<span class="subst">$&#123;type&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">AD</span></span>&#123;</span><br><span class="line">        @log(<span class="string">'show'</span>)</span><br><span class="line">        show()&#123;</span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">'ad is show'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        @log(<span class="string">'click'</span>)</span><br><span class="line">        click()&#123;</span><br><span class="line">            <span class="built_in">console</span>.info(<span class="string">'ad is click'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> ad = <span class="keyword">new</span> AD();</span><br><span class="line">    ad.show();<span class="comment">//ad is show</span></span><br><span class="line">    ad.click();<span class="comment">//ad is show</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Decorator&quot;&gt;&lt;a href=&quot;#Decorator&quot; class=&quot;headerlink&quot; title=&quot;Decorator&quot;&gt;&lt;/a&gt;Decorator&lt;/h3&gt;&lt;p&gt;修饰器  &lt;/p&gt;
&lt;p&gt;修饰函数类的行为，也可以理解为 类的扩展功能&lt;/p&gt;
&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h3&gt;&lt;p&gt;需要安装插件&lt;br&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（16）- Generator</title>
    <link href="http://yoursite.com/2019/08/21/ES6-16-generator/"/>
    <id>http://yoursite.com/2019/08/21/ES6-16-generator/</id>
    <published>2019-08-20T17:07:34.000Z</published>
    <updated>2019-08-20T17:08:04.661Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Generator-基本概念"><a href="#Generator-基本概念" class="headerlink" title="Generator 基本概念"></a>Generator 基本概念</h3><p>异步编程的总解决方案<br>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。</p><p>Generator 函数有多种理解角度。从语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。</p><p>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p><p>形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//generator基本定义</span></span><br><span class="line">    <span class="keyword">let</span> tell = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'c'</span></span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> k = tell();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(k.next());<span class="comment">//Object&#123;value:'a',done:false&#125;    </span></span><br><span class="line">    <span class="built_in">console</span>.log(k.next());<span class="regexp">/Object&#123;value:'b',done:false&#125;    </span></span><br><span class="line"><span class="regexp">    console.log(k.next());/</span><span class="regexp">/Object&#123;value:'c',done:true&#125;    </span></span><br><span class="line"><span class="regexp">    console.log(k.next());/</span><span class="regexp">/Object&#123;value:ubdefined,done:true&#125;    </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj=&#123;&#125;;</span><br><span class="line">    <span class="comment">//创建generator函数</span></span><br><span class="line">    obj[<span class="built_in">Symbol</span>.ierator]=<span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> obj)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'value'</span>,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>generator的最大作用</p><p>状态机</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> state = <span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">'B'</span>;</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">'c'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> status = state();</span><br><span class="line">    <span class="built_in">console</span>.log(status.next());<span class="comment">//A</span></span><br><span class="line">    <span class="built_in">console</span>.log(status.next());<span class="comment">//B</span></span><br><span class="line">    <span class="built_in">console</span>.log(status.next());<span class="comment">//C</span></span><br><span class="line">    <span class="built_in">console</span>.log(status.next());<span class="comment">//A</span></span><br><span class="line">    <span class="built_in">console</span>.log(status.next());<span class="comment">//B</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="next-函数用法"><a href="#next-函数用法" class="headerlink" title="next 函数用法"></a>next 函数用法</h3><h3 id="yield-的语法"><a href="#yield-的语法" class="headerlink" title="yield*的语法"></a>yield*的语法</h3><p>抽奖次数  逻辑 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> draw = <span class="function"><span class="keyword">function</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//具体抽奖逻辑 </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//输出剩余次数</span></span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">`剩余<span class="subst">$&#123;count&#125;</span>次`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> residuce = <span class="function"><span class="keyword">function</span>*(<span class="params">count</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(cuont&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            count--;</span><br><span class="line">            <span class="comment">//抽奖具体逻辑</span></span><br><span class="line">            <span class="keyword">yield</span> draw(count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> star = residue(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">    btn.id = <span class="string">'start'</span>;</span><br><span class="line">    btn.textContent = <span class="string">'抽奖'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(btn);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        star.next();</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>长轮询<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//长轮询</span></span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve(&#123;<span class="attr">code</span>:<span class="number">0</span>&#125;)</span><br><span class="line">            &#125;,<span class="number">200</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> pull = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> genertaor = jax();</span><br><span class="line">        <span class="keyword">let</span> step = genertaor.next();</span><br><span class="line">        step.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(d.code!=<span class="number">0</span>)&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.info(<span class="string">'wait'</span>);</span><br><span class="line">                    pull();</span><br><span class="line">                &#125;,<span class="number">1000</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.info(d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    pull();<span class="comment">//Object &#123;code:0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Generator-基本概念&quot;&gt;&lt;a href=&quot;#Generator-基本概念&quot; class=&quot;headerlink&quot; title=&quot;Generator 基本概念&quot;&gt;&lt;/a&gt;Generator 基本概念&lt;/h3&gt;&lt;p&gt;异步编程的总解决方案&lt;br&gt;Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。&lt;/p&gt;
&lt;p&gt;Generator 函数有多种理解角度。从语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。&lt;/p&gt;
&lt;p&gt;执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。&lt;/p&gt;
&lt;p&gt;形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。&lt;br&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（15）- Iterator</title>
    <link href="http://yoursite.com/2019/08/21/ES6-15-iterator/"/>
    <id>http://yoursite.com/2019/08/21/ES6-15-iterator/</id>
    <published>2019-08-20T17:02:46.000Z</published>
    <updated>2019-08-20T17:09:12.499Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Iterator接口"><a href="#Iterator接口" class="headerlink" title="Iterator接口"></a>Iterator接口</h3><p>在整个es6中，操作数据结构，数据结合的读取方式</p><h3 id="Iterator-的基本用法"><a href="#Iterator-的基本用法" class="headerlink" title="Iterator 的基本用法"></a>Iterator 的基本用法</h3><p>调用方式 arr<a href>Symbol.iterator</a></p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr=[<span class="string">'hello world!'</span>];</span><br><span class="line">    <span class="keyword">let</span> map= arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(map.next());<span class="comment">//Object &#123;value:'hello',done:false&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(map.next());<span class="comment">//Object &#123;value:'world',done:false&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(map.next());<span class="comment">//Object &#123;value:undefined,done:false&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义 Iterator 接口 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj=&#123;</span><br><span class="line">        start:[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>];</span><br><span class="line">        end:[<span class="number">7</span>,<span class="number">9</span>,<span class="number">8</span>];</span><br><span class="line">        <span class="comment">//es6新增方式</span></span><br><span class="line">        [<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">           <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">           <span class="keyword">let</span> index=<span class="number">0</span>;</span><br><span class="line">           <span class="keyword">let</span> arr=self.start.concat(self.end);</span><br><span class="line">           <span class="keyword">let</span> len =arr.length;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="comment">//返回对象必须要包含next()</span></span><br><span class="line">               next()&#123;</span><br><span class="line">                   <span class="comment">//遍历的过程</span></span><br><span class="line">                   <span class="keyword">if</span>(index&lt;length)&#123;</span><br><span class="line">                       <span class="keyword">return</span> &#123;</span><br><span class="line">                           value:arr[index++],<span class="comment">//当前遍历</span></span><br><span class="line">                           done:<span class="literal">false</span><span class="comment">//表示是否结束</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                       <span class="keyword">return</span> &#123;</span><br><span class="line">                           value:arr[index++];</span><br><span class="line">                           done:<span class="literal">true</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> obj)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for…of…"><a href="#for…of…" class="headerlink" title="for…of…"></a>for…of…</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> arr=[<span class="string">'hello world!'</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> arr)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'value'</span>,value);<span class="comment">//value hello,value world!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Iterator接口&quot;&gt;&lt;a href=&quot;#Iterator接口&quot; class=&quot;headerlink&quot; title=&quot;Iterator接口&quot;&gt;&lt;/a&gt;Iterator接口&lt;/h3&gt;&lt;p&gt;在整个es6中，操作数据结构，数据结合的读取方式&lt;/p&gt;
&lt;h3 id=&quot;Iterator-的基本用法&quot;&gt;&lt;a href=&quot;#Iterator-的基本用法&quot; class=&quot;headerlink&quot; title=&quot;Iterator 的基本用法&quot;&gt;&lt;/a&gt;Iterator 的基本用法&lt;/h3&gt;&lt;p&gt;调用方式 arr&lt;a href&gt;Symbol.iterator&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（14）- Promise</title>
    <link href="http://yoursite.com/2019/08/21/ES6-14-promise/"/>
    <id>http://yoursite.com/2019/08/21/ES6-14-promise/</id>
    <published>2019-08-20T17:01:37.000Z</published>
    <updated>2019-08-20T17:02:01.327Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Promise-概念"><a href="#Promise-概念" class="headerlink" title="Promise 概念"></a>Promise 概念</h3><p><strong>Promise</strong> 是异步编程的解决方案</p><h3 id="什么是异步"><a href="#什么是异步" class="headerlink" title="什么是异步"></a>什么是异步</h3><p>有一个函数A ，A执行完后执行B，<br>异步方式有：</p><ul><li>回调方式，</li><li>事件触发 </li></ul><p>Promise 不同于以上两种方式</p><h3 id="Promise-的作用"><a href="#Promise-的作用" class="headerlink" title="Promise 的作用"></a>Promise 的作用</h3><p>用来解决异步操作的解决方法<br><a id="more"></a></p><h3 id="Promise的基本用法"><a href="#Promise的基本用法" class="headerlink" title="Promise的基本用法"></a>Promise的基本用法</h3><h4 id="之前的写法"><a href="#之前的写法" class="headerlink" title="之前的写法"></a>之前的写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//基本定义 用 计时器模拟ajax 的回调 </span></span><br><span class="line">    <span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行'</span>);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            callback &amp;&amp; callback.call();</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    ajax(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout1'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//先输出'执行' 1s后输出timeout1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写影响后期维护，回调的顺序很乱</p><h4 id="使用Promise"><a href="#使用Promise" class="headerlink" title="使用Promise"></a>使用Promise</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行2'</span>);</span><br><span class="line">        <span class="comment">//返回new Promise实例 该实例有个then()方法  resolve 表示执行下一步 reject中断当前操作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125;,<span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//then()方法 表示执行下一步 </span></span><br><span class="line">    ajax().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'promise'</span>,<span class="string">'timeout2'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>串行过程 ，then()链式操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行3'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125;,<span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    ajax()</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//继续返回Promise实例 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve();</span><br><span class="line">            &#125;,<span class="number">2000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout3'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>catch 捕获异常错误</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> ajax=<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'执行4'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//如果参数大于5 继续向下执行</span></span><br><span class="line">                <span class="keyword">if</span>(num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">                    resolve();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;<span class="comment">//否则 抛出错误 </span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'出错了'</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="number">1000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    ajax(<span class="number">6</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'log'</span>,<span class="number">6</span>);<span class="comment">// log 6</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'catch'</span>,err);</span><br><span class="line">    &#125;);</span><br><span class="line">    ajax(<span class="number">3</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'log'</span>,<span class="number">3</span>);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'catch'</span>,err);<span class="comment">//catch 出错了 </span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-高级用法"><a href="#Promise-高级用法" class="headerlink" title="Promise 高级用法"></a>Promise 高级用法</h3><p>fade流  今日头条、uc 新闻案例 加载新闻图片 </p><ul><li><strong>Promise.all</strong> 所有图片加载完再添加到页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//所有图片加载完再添加到页面</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.creatElement(<span class="string">'img'</span>);</span><br><span class="line">            img.src=src;</span><br><span class="line">            <span class="comment">//本身就是一个Promise实例 </span></span><br><span class="line">            img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve(img);</span><br><span class="line">            &#125;</span><br><span class="line">            img.onerror=<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImgs</span>(<span class="params">imgs</span>)</span>&#123;</span><br><span class="line">        imgs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(img);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加载图片 Promise.all返回的是一个实例 表示把多个 promise 实例当做一个promise实例来</span></span><br><span class="line">    <span class="built_in">Promise</span>.all([</span><br><span class="line">        loadImg(<span class="string">'https://img.com/1.png'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://img.com/2.png'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://img.com/3.png'</span>)</span><br><span class="line">    ]).then(showImgs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先到先得 </p><ul><li><strong>Promise.race</strong> 表示有一个状态率先改变 那么这个race 状态就改变  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="comment">//有一个图加载完 就添加到页面中 </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> img = <span class="built_in">document</span>.creatElement(<span class="string">'img'</span>);</span><br><span class="line">            img.src=src;</span><br><span class="line">            img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                resolve(img);</span><br><span class="line">            &#125;</span><br><span class="line">            img.onerror=<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                reject(err);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showImgs</span>(<span class="params">img</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="built_in">document</span>.creatElement(<span class="string">'p'</span>);</span><br><span class="line">        p.appendChild(img);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Promise</span>.race([</span><br><span class="line">        loadImg(<span class="string">'https://img.com/1.png'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://img.com/2.png'</span>),</span><br><span class="line">        loadImg(<span class="string">'https://img.com/3.png'</span>)</span><br><span class="line">    ]).then(showImgs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Promise-概念&quot;&gt;&lt;a href=&quot;#Promise-概念&quot; class=&quot;headerlink&quot; title=&quot;Promise 概念&quot;&gt;&lt;/a&gt;Promise 概念&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Promise&lt;/strong&gt; 是异步编程的解决方案&lt;/p&gt;
&lt;h3 id=&quot;什么是异步&quot;&gt;&lt;a href=&quot;#什么是异步&quot; class=&quot;headerlink&quot; title=&quot;什么是异步&quot;&gt;&lt;/a&gt;什么是异步&lt;/h3&gt;&lt;p&gt;有一个函数A ，A执行完后执行B，&lt;br&gt;异步方式有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回调方式，&lt;/li&gt;
&lt;li&gt;事件触发 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Promise 不同于以上两种方式&lt;/p&gt;
&lt;h3 id=&quot;Promise-的作用&quot;&gt;&lt;a href=&quot;#Promise-的作用&quot; class=&quot;headerlink&quot; title=&quot;Promise 的作用&quot;&gt;&lt;/a&gt;Promise 的作用&lt;/h3&gt;&lt;p&gt;用来解决异步操作的解决方法&lt;br&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（13）- 类与对象</title>
    <link href="http://yoursite.com/2019/08/21/ES6-13-class/"/>
    <id>http://yoursite.com/2019/08/21/ES6-13-class/</id>
    <published>2019-08-20T16:59:43.000Z</published>
    <updated>2019-08-20T17:00:39.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类的概念</p><table><thead><tr><th>-</th><th>-</th><th>-</th></tr></thead><tbody><tr><td>基本语法</td><td>类的继承</td><td>静态方法</td></tr><tr><td>静态属性</td><td>getter</td><td>setter</td></tr></tbody></table><h3 id="class-基本定义和生成实例"><a href="#class-基本定义和生成实例" class="headerlink" title="class  基本定义和生成实例"></a>class  基本定义和生成实例</h3><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//基本定义和生成实例 通过class + 关键字 类来定义类 </span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name='mukewang')&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> v_parent = <span class="keyword">new</span> Parent(<span class="string">'v'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'构造函数的实例'</span>,v_parent);<span class="comment">// v_parent &#123;name 'v'&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//继承</span></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name='mukewang')&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用 extends继承 </span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'继承'</span>, <span class="keyword">new</span> Child());<span class="comment">// 继承 Child &#123;name 'mukewang'&#125;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承传递参数 修改参数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//继承传递参数</span></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name='mukewang')&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用 extends继承 </span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name='child')&#123;</span><br><span class="line">            <span class="keyword">super</span>(name);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//定义自己属性要用this 一定要用 super 的后边 </span></span><br><span class="line">            <span class="keyword">this</span>.type=<span class="string">'child'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'继承'</span>, <span class="keyword">new</span> Child(<span class="string">'hello'</span>));<span class="comment">// 继承 Child &#123;name： 'hello',type:'child'&#125;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter,setter"></a>getter,setter</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//getter,setter</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name='mukewang')&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//属性 不是方法 </span></span><br><span class="line">    <span class="keyword">get</span> longName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'mk'</span>+<span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> longName(value)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> v= <span class="keyword">new</span> Parent();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'getter'</span>,v.longName);<span class="comment">//getter mkmukewang </span></span><br><span class="line">    </span><br><span class="line">    v.longName=<span class="string">'hello'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setter'</span>,v.longName); <span class="comment">//setter mkhello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的-静态方法"><a href="#类的-静态方法" class="headerlink" title="类的 静态方法"></a>类的 静态方法</h3><p>使用 <strong>static</strong> 关键词 后边加 <strong>方法名称</strong> 所以 就变成静态方法   <strong>静态方法意思就是 通过 类去调用  而不是通过 类的实例去调用</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name='mukewang')&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法  使用 static 关键词 后边加 方法名称 所以 就变成静态方法   静态方法意思就是 通过 类去调用  而不是通过 类的实例去调用  </span></span><br><span class="line">    <span class="keyword">static</span> tell()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'tell'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用 用类去调用 </span></span><br><span class="line">    Parent.tell();<span class="comment">//tell</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="类的-静态属性"><a href="#类的-静态属性" class="headerlink" title="类的 静态属性"></a>类的 静态属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//静态属性</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name='mukewang')&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态方法 </span></span><br><span class="line">    <span class="keyword">static</span> tell()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'tell'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态属性</span></span><br><span class="line">    Parent.type=<span class="string">'test'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'静态属性'</span>,Parent.type);<span class="comment">// 静态属性 test </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h2&gt;&lt;p&gt;类的概念&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;th&gt;-&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;基本语法&lt;/td&gt;
&lt;td&gt;类的继承&lt;/td&gt;
&lt;td&gt;静态方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;静态属性&lt;/td&gt;
&lt;td&gt;getter&lt;/td&gt;
&lt;td&gt;setter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;class-基本定义和生成实例&quot;&gt;&lt;a href=&quot;#class-基本定义和生成实例&quot; class=&quot;headerlink&quot; title=&quot;class  基本定义和生成实例&quot;&gt;&lt;/a&gt;class  基本定义和生成实例&lt;/h3&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（12）- Proxy和Reflect</title>
    <link href="http://yoursite.com/2019/08/21/ES6-12-proxy-reflect/"/>
    <id>http://yoursite.com/2019/08/21/ES6-12-proxy-reflect/</id>
    <published>2019-08-20T16:58:33.000Z</published>
    <updated>2019-08-20T16:59:03.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Proxy和Reflect的概念"><a href="#Proxy和Reflect的概念" class="headerlink" title="Proxy和Reflect的概念"></a>Proxy和Reflect的概念</h2><h3 id="Proxy对象"><a href="#Proxy对象" class="headerlink" title="Proxy对象"></a>Proxy对象</h3><p>代理  </p><p>生成对象：  new Proxy();</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        time:<span class="string">'2017-03-11'</span>,</span><br><span class="line">        name:<span class="string">'net'</span>,</span><br><span class="line">        _r:<span class="number">123</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//第一个参数是需要代理的对象 ，第二个是代理的方法 </span></span><br><span class="line">    <span class="keyword">let</span> monitor = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</span><br><span class="line">        <span class="comment">//拦截对象属性的读取，跟代理是一个意思 target</span></span><br><span class="line">        <span class="keyword">get</span>(target,key)&#123;</span><br><span class="line">            <span class="keyword">return</span> target[key].replace(<span class="string">'2017'</span>,<span class="string">'2018'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拦截对象设置属性</span></span><br><span class="line">        <span class="keyword">set</span>(target,key,value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key===<span class="string">'name'</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> target[key]=value;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> target[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拦截 key in object 操作</span></span><br><span class="line">        has(target,key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key===<span class="string">'name'</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> target[key];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拦截delete</span></span><br><span class="line">        deleteProperty(target,key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key.indexOf(<span class="string">"_"</span>&gt;<span class="number">-1</span>))&#123;</span><br><span class="line">                <span class="keyword">delete</span> target[key];</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> target[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//拦截object.keys,Object.getOwnPropertySymbols,Object.getOwnPropertyNames</span></span><br><span class="line">        ownKeys(target)&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">            <span class="built_in">Object</span>.keys(target).filter(filter(<span class="function"><span class="params">item</span>=&gt;</span>item!=<span class="string">'time'</span>));<span class="comment">//过滤掉time属性 ，不让返回</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'get'</span>,monitor.time);<span class="comment">//get 2018-03-11</span></span><br><span class="line">    </span><br><span class="line">    monitor.name=<span class="string">'mukewang'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'set'</span>,monitor.time,monitor);<span class="comment">//set 2018-03-11  Proxy&#123;time:'2017-03-11',name:'mukewang',_r:123&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'has'</span>,<span class="string">'name'</span><span class="keyword">in</span> monitor,<span class="string">'time'</span> <span class="keyword">in</span> monitor);<span class="comment">//has true false;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>.monitor.time;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'delete'</span>,monitor); <span class="comment">//time没有被删除  还是全部 输出 Proxy&#123;time:'2017-03-11',name:'mukewang',_r:123&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span>.monitor._r;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'delete'</span>,monitor);<span class="comment">//Proxy&#123;time:'2017-03-11',name:'mukewang',&#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ownKeys'</span>,<span class="built_in">Object</span>.keys(monitor));<span class="comment">//Proxy &#123;time,_r&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reflect对象"><a href="#Reflect对象" class="headerlink" title="Reflect对象"></a>Reflect对象</h3><p>反射的是Object</p><p>生成对象： 直接 Reflect</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        time:<span class="string">'2017-03-11'</span>,</span><br><span class="line">        name:<span class="string">'net'</span>,</span><br><span class="line">        _r:<span class="number">123</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Reflect     get'</span>,<span class="built_in">Reflect</span>.get(obj,<span class="string">'time'</span>));<span class="comment">//Reflect get  time:"2017-03-11",</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Reflect</span>.set(obj,<span class="string">'name'</span>,<span class="string">'mukewang'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Reflect set'</span>, obj);<span class="comment">//'Reflect set' Object &#123;time:"2017-03-11",name:"mukewang",_r:123&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Reflect     has'</span>,<span class="built_in">Reflect</span>.has(obj,<span class="string">'name'</span>));<span class="comment">//true  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Proxy和Reflect的适用场景"><a href="#Proxy和Reflect的适用场景" class="headerlink" title="Proxy和Reflect的适用场景"></a>Proxy和Reflect的适用场景</h2><p>通用方式  </p><p>数的校验，数据类型 格式校验  表单验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">target,validator</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target,&#123;</span><br><span class="line">            _validator:validator,</span><br><span class="line">            <span class="keyword">set</span>(target,key,value,proxy)&#123;</span><br><span class="line">                <span class="keyword">if</span>(target.hasOwnProperty(key))&#123;</span><br><span class="line">                    <span class="keyword">let</span> va=<span class="keyword">this</span>._validator[key];</span><br><span class="line">                    <span class="keyword">if</span>(!!va(value))&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target,key,value,proxy)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`不能设置<span class="subst">$&#123;key&#125;</span>到<span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不存在`</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> personValidators=&#123;</span><br><span class="line">        name(val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> val===<span class="string">'tring'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        age(val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> val===<span class="string">'number'</span> &amp;&amp; val&gt;<span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(name,age)&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> validator(<span class="keyword">this</span>,personValidators)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> =person = <span class="keyword">new</span> Person(<span class="string">'lilei'</span>,<span class="number">30</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.info(person);<span class="comment">//Proxy &#123;name,'lilei',age,30&#125;</span></span><br><span class="line">    </span><br><span class="line">    person.name = <span class="number">48</span>;</span><br><span class="line">    <span class="built_in">console</span>.info(person);<span class="comment">//throw Error '不能设置name 到 48' </span></span><br><span class="line">    </span><br><span class="line">    person.name = <span class="string">'Han meimei'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.info(person);<span class="comment">//Proxy &#123;name,'Han meimei',age,30&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Proxy和Reflect的概念&quot;&gt;&lt;a href=&quot;#Proxy和Reflect的概念&quot; class=&quot;headerlink&quot; title=&quot;Proxy和Reflect的概念&quot;&gt;&lt;/a&gt;Proxy和Reflect的概念&lt;/h2&gt;&lt;h3 id=&quot;Proxy对象&quot;&gt;&lt;a href=&quot;#Proxy对象&quot; class=&quot;headerlink&quot; title=&quot;Proxy对象&quot;&gt;&lt;/a&gt;Proxy对象&lt;/h3&gt;&lt;p&gt;代理  &lt;/p&gt;
&lt;p&gt;生成对象：  new Proxy();&lt;/p&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（11）- map-set与数组和对象的比较</title>
    <link href="http://yoursite.com/2019/08/21/ES6-11-Set-Map/"/>
    <id>http://yoursite.com/2019/08/21/ES6-11-Set-Map/</id>
    <published>2019-08-20T16:56:40.000Z</published>
    <updated>2019-08-20T17:06:47.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Map-与Array的对比"><a href="#Map-与Array的对比" class="headerlink" title="Map 与Array的对比"></a>Map 与Array的对比</h3><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//数据结构的横向对比 增、删、改、查</span></span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> array=[];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    map.set(<span class="string">'t'</span>,<span class="number">1</span>);</span><br><span class="line">    array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'map-array'</span>,map,array);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查</span></span><br><span class="line">    <span class="keyword">let</span> map_exist = map.has(<span class="string">'t'</span>);</span><br><span class="line">    <span class="keyword">let</span> array_exist =array.find(<span class="function"><span class="params">item</span>=&gt;</span>item.t);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'map-array'</span>,map_exist,array_exist);<span class="comment">//true Object&#123;t:1&#125; 第一个返回的事布尔值  第二个直接返回对象 </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//改</span></span><br><span class="line">    map.set(<span class="string">'t'</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//通过数组的forEach遍历，看数组中是否存在该值 ，如果存在 ，改变其值，如果不存在 ，返回空</span></span><br><span class="line">    array.forEach(<span class="function"><span class="params">item</span>=&gt;</span>item.t?item.t=<span class="number">2</span>:<span class="string">''</span>); </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'map-array-modify'</span>,map,array); <span class="comment">//Map(1)&#123;'t',2&#125;  </span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删</span></span><br><span class="line">    map.delete(<span class="string">'t'</span>);</span><br><span class="line">    <span class="keyword">let</span> idnex = array.findIndex(<span class="function"><span class="params">item</span>=&gt;</span>item.t);</span><br><span class="line">    array.splice(index,<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'map-array-empty'</span>,map,array);<span class="comment">//  Map(0) &#123;&#125; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Set-与Array的对比"><a href="#Set-与Array的对比" class="headerlink" title="Set 与Array的对比"></a>Set 与Array的对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//set和array 的对比</span></span><br><span class="line">   <span class="keyword">let</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">   let array =[];</span><br><span class="line">  </span><br><span class="line">   //增</span><br><span class="line">   <span class="keyword">set</span>.add(&#123;t:<span class="number">1</span>&#125;);</span><br><span class="line">   array.push(&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;);</span><br><span class="line">  </span><br><span class="line">   <span class="built_in">console</span>.info(<span class="string">'set-array'</span>,<span class="keyword">set</span>,array); //Set(1)  &#123;<span class="built_in">Object</span> &#123;<span class="attr">t</span>:<span class="number">1</span>&#125;&#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">//查</span></span><br><span class="line">   <span class="keyword">let</span> set_exist = <span class="keyword">set</span>.has(&#123;t:<span class="number">1</span>&#125;);</span><br><span class="line">   <span class="keyword">let</span> array_exist =array.find(<span class="function"><span class="params">item</span>=&gt;</span>item.t);</span><br><span class="line">   </span><br><span class="line">   <span class="built_in">console</span>.info(<span class="string">'set-array'</span>,set_exist,array_exist);<span class="comment">//false </span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//改</span></span><br><span class="line">   <span class="keyword">set</span>.forEach(item =&gt;item.t?item.t=2:'');</span><br><span class="line">   array.forEach(item =&gt;item.t?item.t=2:'');</span><br><span class="line">   </span><br><span class="line">   console.info('<span class="keyword">set</span>-array-modefy',set_exist,array_exist);// Set(1) Object&#123;t:<span class="number">2</span>&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//删</span></span><br><span class="line">   <span class="keyword">set</span>.forEach(item=&gt;item.t?<span class="keyword">set</span>.delete(item):'');</span><br><span class="line">   let index = array,findIndex(item=&gt;item.t);</span><br><span class="line">   arr.splice(index,1);</span><br><span class="line">   </span><br><span class="line">   console.info('<span class="keyword">set</span>-array-empty',<span class="keyword">set</span>,array);// Set(0) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map-Set-Object-的对比"><a href="#Map-Set-Object-的对比" class="headerlink" title="Map , Set , Object 的对比"></a>Map , Set , Object 的对比</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Map,Set ,Objec 对比 </span></span><br><span class="line">    <span class="keyword">let</span> item= &#123;<span class="attr">t</span>:<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">set</span> = new Set();</span><br><span class="line">    let obj = &#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    map.set(<span class="string">'t'</span>:<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">set</span>.add(item);</span><br><span class="line">    obj['t']=1;</span><br><span class="line">    </span><br><span class="line">    console.info('map-<span class="keyword">set</span>-obj',map,<span class="keyword">set</span>,obj);//Map(1)&#123;<span class="string">"t"</span>=&gt;<span class="number">1</span>&#125; <span class="keyword">set</span>(1) &#123;<span class="built_in">Object</span>&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;&#125; <span class="built_in">Object</span>&#123;<span class="attr">t</span>:<span class="number">1</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查</span></span><br><span class="line">    <span class="built_in">console</span>.info(&#123;</span><br><span class="line">        map_exist:map.has(<span class="string">'t'</span>);</span><br><span class="line">        set_exist:<span class="keyword">set</span>.has(item);</span><br><span class="line">        obj_exist:'t' in obj</span><br><span class="line">    &#125;);//map_exist:true;set_exist: true;obj_exist:true</span><br><span class="line">    </span><br><span class="line">    //改</span><br><span class="line">    map.<span class="keyword">set</span>('t',2);</span><br><span class="line">    item.t=2;</span><br><span class="line">    obj['t']=2;</span><br><span class="line">    </span><br><span class="line">    console.info('map-<span class="keyword">set</span>-obj-modify',map,<span class="keyword">set</span>,obj);//Map(1)&#123;<span class="string">'t'</span>=&gt;<span class="number">2</span>&#125; <span class="built_in">Set</span>(<span class="number">1</span>) &#123;<span class="built_in">Object</span> &#123;<span class="attr">t</span>:<span class="number">2</span>&#125;&#125; <span class="built_in">Object</span> &#123;<span class="attr">t</span>:<span class="number">2</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删</span></span><br><span class="line">    map.delete(<span class="string">'t'</span>);</span><br><span class="line">    <span class="keyword">set</span>.delete(item);</span><br><span class="line">    delete obj['t'];</span><br><span class="line">    </span><br><span class="line">    console.log('<span class="keyword">set</span>-array-empty',map,<span class="keyword">set</span>,obj);//Map(0)  Set(0)  Object &#123;&#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上边的对比 ，可以看出：<br><strong>对于复杂的数组结构，优先使用Map，如果要求 数组的唯一性，则使用Set()，在数据的存储中尽量使用 Map,而放弃使用 Object 和数组</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Map-与Array的对比&quot;&gt;&lt;a href=&quot;#Map-与Array的对比&quot; class=&quot;headerlink&quot; title=&quot;Map 与Array的对比&quot;&gt;&lt;/a&gt;Map 与Array的对比&lt;/h3&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（10）- set-map数据结构</title>
    <link href="http://yoursite.com/2019/08/21/ES6-10-Set-Map/"/>
    <id>http://yoursite.com/2019/08/21/ES6-10-Set-Map/</id>
    <published>2019-08-20T16:54:44.000Z</published>
    <updated>2019-08-20T17:03:25.896Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Set的用法"><a href="#Set的用法" class="headerlink" title="Set的用法"></a>Set的用法</h3><p>当做数组去用 Set 集合中的元素是不能重复的  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="comment">//声明普通的变量 </span></span><br><span class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  <span class="comment">//添加两个元素</span></span><br><span class="line">  list.add(<span class="number">5</span>);</span><br><span class="line">  list.add(<span class="number">7</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//长度 .size</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'size'</span>,list.size);<span class="comment">//size 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>Set 初始化的时候就把元素初始化进去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'size'</span>,list.size);<span class="comment">//size 5 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set 数据元素必须是唯一的,不能重复 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">  list.add(<span class="number">1</span>);</span><br><span class="line">  list.add(<span class="number">2</span>);</span><br><span class="line">  list.add(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//添加重复的元素不会添加进去的  ，也不会报错 </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'list'</span>,list); <span class="comment">//list 1 ,list 2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="string">'2'</span>];</span><br><span class="line">  <span class="keyword">let</span> list2=<span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//不会做数据类型的转化</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'unique'</span>,list2);<span class="comment">//unique Set&#123;1,2,3,'2'&#125; 成功的过滤掉重复的元素 但是后边的字符串 ‘2’ 也输出了 </span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//通过new Set（）去重，然后转换为数组</span></span><br><span class="line">  <span class="keyword">let</span> arrs =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">"tre"</span>];</span><br><span class="line">  <span class="keyword">let</span> sets = <span class="keyword">new</span> <span class="built_in">Set</span>(arrs);</span><br><span class="line">  <span class="built_in">Array</span>.from(sets) <span class="comment">//[1,2,3,4,"tre"]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set 的使用方法 </p><ul><li><strong>list.add()</strong>，数组中添加元素</li><li><strong>list.deledte()</strong>， 数组中移除元素</li><li><strong>list.clear()</strong>，数组中清空元素</li><li><strong>list.has()</strong> ，数组中判断有无元素 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr=[<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>];</span><br><span class="line">  <span class="keyword">let</span> list=<span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'has'</span>,list.has(<span class="string">'add'</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'delete'</span>,list.delete(<span class="string">'add'</span>),list);</span><br><span class="line">  list.clear();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'list'</span>,list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Set 实例的遍历 （读取）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr=[<span class="string">'add'</span>,<span class="string">'delete'</span>,<span class="string">'clear'</span>,<span class="string">'has'</span>];</span><br><span class="line">  <span class="keyword">let</span> list=<span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//用 for... of... 遍历</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> list.keys())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'keys'</span>,key);<span class="comment">// keys add, keys delete,keys clear,keys has </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> list.values())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'value'</span>,value);<span class="comment">// keys add, keys delete,keys clear,keys has 打印出来跟上边的一样  都是 元素的名称 </span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> list)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'value'</span>,value);<span class="comment">// keys add, keys delete,keys clear,keys has 直接遍历list也是也可的  值跟上边的一样 </span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> list.entries())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'entries'</span>,key,value);<span class="comment">//打印出了 entries and and ,entries delete delete, entries clear clear, entries has has</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//foreach 遍历 返回  item // and delete clear has </span></span><br><span class="line">  list.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="built_in">console</span>.log(item);&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WeakSet的用法"><a href="#WeakSet的用法" class="headerlink" title="WeakSet的用法"></a>WeakSet的用法</h3><p>WeakSet 与 Set的比较 </p><ul><li>WeakSet 跟Set的支持数据类型不一样，  WeakSet只是必须是<strong>对象</strong> 不能是 <strong>数值</strong> <strong>字符串</strong> </li><li>WeakSet 是<strong>弱引用</strong>，不会检测这个对象在其他地方用过 ，不会检测器其是否在垃圾回收掉 </li><li>没有clear 方法 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//生成weakSet变量  </span></span><br><span class="line">  <span class="keyword">let</span> weakList=<span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> arg=&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  weakList.add(arg);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// weakList.add(2); // 不支持其他的类型 只能是对象</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'weakList'</span>,weakList); <span class="comment">//weakList wekSet &#123;Object&#123;&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Map的用法"><a href="#Map的用法" class="headerlink" title="Map的用法"></a>Map的用法</h3><p>key 可以是任意的类型  数字 字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let map = new Map();</span><br><span class="line">  let arr=[&apos;123&apos;];</span><br><span class="line">  // Map() 添加元素用 .set()不是 .add()</span><br><span class="line">  map.set(arr,456);</span><br><span class="line"></span><br><span class="line">  console.log(&apos;map&apos;,map,map.get(arr));// map Map&#123;[&quot;123&quot;]=&gt;456&#125; 456 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>,<span class="number">123</span>],[<span class="string">'b'</span>,<span class="number">456</span>]]);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'map args'</span>,map); <span class="comment">// a=&gt;123 b=&gt;456</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'size'</span>,map.size);<span class="comment">//2 </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'delete'</span>,map.delete(<span class="string">'a'</span>),map);<span class="comment">//b=&gt;456</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'clear'</span>,map.clear(),map); <span class="comment">//map&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WeakMap的用法"><a href="#WeakMap的用法" class="headerlink" title="WeakMap的用法"></a>WeakMap的用法</h3><p>weakMap 与Map 跟 WeakSet 与 Set的 的区别一样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> weakmap=<span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> o=&#123;&#125;;</span><br><span class="line">  weakmap.set(o,<span class="number">123</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(weakmap.get(o));<span class="comment">//123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Set的用法&quot;&gt;&lt;a href=&quot;#Set的用法&quot; class=&quot;headerlink&quot; title=&quot;Set的用法&quot;&gt;&lt;/a&gt;Set的用法&lt;/h3&gt;&lt;p&gt;当做数组去用 Set 集合中的元素是不能重复的  &lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//声明普通的变量 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; list = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//添加两个元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  list.add(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  list.add(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//长度 .size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;size&#39;&lt;/span&gt;,list.size);&lt;span class=&quot;comment&quot;&gt;//size 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（9）- Symbol</title>
    <link href="http://yoursite.com/2019/08/21/ES6-09-symbol/"/>
    <id>http://yoursite.com/2019/08/21/ES6-09-symbol/</id>
    <published>2019-08-20T16:51:51.000Z</published>
    <updated>2019-08-20T16:52:48.948Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Symbol-概念"><a href="#Symbol-概念" class="headerlink" title="Symbol 概念"></a>Symbol 概念</h3><p>Symbol()声明的变量永远都是独一无二的 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 声明</span></span><br><span class="line">  <span class="keyword">let</span> a1=<span class="built_in">Symbol</span>();<span class="comment">//生成一个独一无二的值</span></span><br><span class="line">  <span class="keyword">let</span> a2=<span class="built_in">Symbol</span>();</span><br><span class="line">  <span class="built_in">console</span>.log(a1===a2);<span class="comment">//false </span></span><br><span class="line">  <span class="keyword">let</span> a3=<span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</span><br><span class="line">  <span class="keyword">let</span> a4=<span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(a3===a4);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Symbol-作用"><a href="#Symbol-作用" class="headerlink" title="Symbol 作用"></a>Symbol 作用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a1=<span class="built_in">Symbol</span>.for(<span class="string">'abc'</span>);</span><br><span class="line">  <span class="keyword">let</span> obj=&#123;</span><br><span class="line">    [a1]:<span class="string">'123'</span>,</span><br><span class="line">    <span class="string">'abc'</span>:<span class="number">345</span>,</span><br><span class="line">    <span class="string">'c'</span>:<span class="number">456</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'obj'</span>,obj);<span class="comment">//Object abc:345 c:456 Symbol(abc):"123"  这跟之前的abc不冲突</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'let of'</span>,key,value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// let of abc 345,let of c 456 拿不到a1（Symbol.for('abc')）的值 </span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//getOwnPropertySymbols 只能拿到 Symbol.for('abc')的值</span></span><br><span class="line">  <span class="built_in">Object</span>.getOwnPropertySymbols(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj[item]);<span class="comment">//123</span></span><br><span class="line">  &#125;)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="comment">//Reflect.ownKeys(obj)  能返回了 所有的key 和value 值（包括Symbol.for('abc') 的值 ）</span></span><br><span class="line">  <span class="built_in">Reflect</span>.ownKeys(obj).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ownkeys'</span>,item,obj[item]);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Symbol-概念&quot;&gt;&lt;a href=&quot;#Symbol-概念&quot; class=&quot;headerlink&quot; title=&quot;Symbol 概念&quot;&gt;&lt;/a&gt;Symbol 概念&lt;/h3&gt;&lt;p&gt;Symbol()声明的变量永远都是独一无二的 &lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a1=&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;();&lt;span class=&quot;comment&quot;&gt;//生成一个独一无二的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a2=&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a1===a2);&lt;span class=&quot;comment&quot;&gt;//false &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a3=&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;.for(&lt;span class=&quot;string&quot;&gt;&#39;a3&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a4=&lt;span class=&quot;built_in&quot;&gt;Symbol&lt;/span&gt;.for(&lt;span class=&quot;string&quot;&gt;&#39;a3&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a3===a4);&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（8）- 对象扩展</title>
    <link href="http://yoursite.com/2019/08/21/ES6-08-object/"/>
    <id>http://yoursite.com/2019/08/21/ES6-08-object/</id>
    <published>2019-08-20T16:50:47.000Z</published>
    <updated>2019-08-20T17:06:26.541Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介表示法"><a href="#简介表示法" class="headerlink" title="简介表示法"></a>简介表示法</h3><p>注意下列ES5，ES6代码的不同写法<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 简洁表示法</span></span><br><span class="line">  <span class="keyword">let</span> o=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> k=<span class="number">2</span>;</span><br><span class="line">  <span class="comment">//es5的写法</span></span><br><span class="line">  <span class="keyword">let</span> es5=&#123;</span><br><span class="line">    o:o,</span><br><span class="line">    k:k</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//es6的写法</span></span><br><span class="line">  <span class="keyword">let</span> es6=&#123;</span><br><span class="line">    o,</span><br><span class="line">    k</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(es5,es6);</span><br><span class="line">  <span class="comment">//es5中的方法</span></span><br><span class="line">  <span class="keyword">let</span> es5_method=&#123;</span><br><span class="line">    hello:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//es6中的方法</span></span><br><span class="line">  <span class="keyword">let</span> es6_method=&#123;</span><br><span class="line">    hello()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(es5_method.hello(),es6_method.hello());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="属性表示法"><a href="#属性表示法" class="headerlink" title="属性表示法"></a>属性表示法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 属性表达式</span></span><br><span class="line">  <span class="keyword">let</span> a=<span class="string">'b'</span>;</span><br><span class="line">  <span class="keyword">let</span> es5_obj=&#123;</span><br><span class="line">    a:<span class="string">'c'</span>,</span><br><span class="line">    b:<span class="string">'c'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//key 值，表达式 </span></span><br><span class="line">  <span class="keyword">let</span> es6_obj=&#123;</span><br><span class="line">    [a]:<span class="string">'c'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(es5_obj,es6_obj);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>es6_obj</code>输出的值为 <code>b:&#39;c&#39;</code></p><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p><strong><code>Object.is</code></strong> 判断是否相等<br><strong><code>Object.assign</code></strong> 浅拷贝<br><strong><code>Object.entries</code></strong> 对象的遍历<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 新增API</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'字符串'</span>,<span class="built_in">Object</span>.is(<span class="string">'abc'</span>,<span class="string">'abc'</span>),<span class="string">'abc'</span>===<span class="string">'abc'</span>); <span class="literal">true</span> <span class="literal">true</span> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'数组'</span>,<span class="built_in">Object</span>.is([],[]),[]===[]);<span class="comment">//false false </span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//浅拷贝 </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'拷贝'</span>,<span class="built_in">Object</span>.assign(&#123;<span class="attr">a</span>:<span class="string">'a'</span>&#125;,&#123;<span class="attr">b</span>:<span class="string">'b'</span>&#125;));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> test=&#123;<span class="attr">k</span>:<span class="number">123</span>,<span class="attr">o</span>:<span class="number">456</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> [key,value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(test))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log([key,value]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Object新增方法"><a href="#Object新增方法" class="headerlink" title="Object新增方法"></a>Object新增方法</h3><p>扩展运算符 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 扩展运算符</span></span><br><span class="line">  <span class="comment">// let &#123;a,b,...c&#125;=&#123;a:'test',b:'kill',c:'ddd',d:'ccc'&#125;;</span></span><br><span class="line">  <span class="comment">// c=&#123;</span></span><br><span class="line">  <span class="comment">//   c:'ddd',</span></span><br><span class="line">  <span class="comment">//   d:'ccc'</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介表示法&quot;&gt;&lt;a href=&quot;#简介表示法&quot; class=&quot;headerlink&quot; title=&quot;简介表示法&quot;&gt;&lt;/a&gt;简介表示法&lt;/h3&gt;&lt;p&gt;注意下列ES5，ES6代码的不同写法&lt;br&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（7）- 函数扩展</title>
    <link href="http://yoursite.com/2019/08/21/ES6-07-function/"/>
    <id>http://yoursite.com/2019/08/21/ES6-07-function/</id>
    <published>2019-08-20T16:49:05.000Z</published>
    <updated>2019-08-20T16:49:56.779Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h3><p>函数参数里边直接赋默认值，但是可以被重新赋值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x, y = <span class="string">'world'</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'默认值'</span>,x,y);</span><br><span class="line">  &#125;</span><br><span class="line">  test(<span class="string">'hello'</span>);</span><br><span class="line">  test(<span class="string">'hello'</span>,<span class="string">'kill'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>强调：默认值的后边不能再有没有默认值的变量，比如在<code>y = &#39;world&#39;</code>后边添加个参数<code>c</code>，这样就会报错，如果写成<code>c = &#39;www&#39;</code>这样是可以的 </p><p>作用域<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> x=<span class="string">'test'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params">x,y=x</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'作用域'</span>,x,y);<span class="comment">//kill kill</span></span><br><span class="line">  &#125;</span><br><span class="line">  test2(<span class="string">'kill'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果<code>test2()</code>不赋值，那么输出为<code>undefined undefined</code>；但是如果把第一个参数<code>x</code>变为<code>c</code>，那么输出的值为 <code>kill test</code>，它会把上边x的值给<code>y</code> </p><h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>…;作用是把一系列的参数转换为一个数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  function test3(...arg)&#123;</span><br><span class="line">    for(let v of arg)&#123;</span><br><span class="line">      console.log(&apos;rest&apos;,v);//rest 1,rest2,rest 3,rest 4,rest a,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  test3(1,2,3,4,&apos;a&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意rest参数之后就不能有其他参数 </p><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>rest的逆运算<br>把数组拆成了离散的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  console.log(...[1,2,4]);//1,2,4</span><br><span class="line">  console.log(&apos;a&apos;,...[1,2,4]);//a,1,2,4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数-gt"><a href="#箭头函数-gt" class="headerlink" title="箭头函数 =&gt;"></a>箭头函数 =&gt;</h3><p>先看下边箭头函数的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  let arrow = v =&gt; v*2;</span><br><span class="line">  let arrow2 = () =&gt; 5;</span><br><span class="line">  console.log(&apos;arrow&apos;,arrow(3));//arrow 6</span><br><span class="line">  console.log(arrow2());//5</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上边第一个函数 的<code>arrow</code>为函数名，第二个<code>v</code>表示函数的参数；第三个<code>=&gt;</code>后边的表示执行的函数;第二个函数，如果箭头函数没有参数时 就写个<code>()</code></p><h3 id="this绑定"><a href="#this绑定" class="headerlink" title="this绑定"></a>this绑定</h3><p>箭头函数中<code>this</code>的指向，指函数在定义是的指向的所在，</p><p>ES5是函数在调用的时候的指向</p><p>注意作<code>this</code>绑定的时候要看特性，有事可用，有时勿用</p><h3 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h3><p>尾调用存在于函数式编程的里边,主要能提升性能，主要针对函数嵌套<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  function tail(x)&#123;</span><br><span class="line">    console.log(&apos;tail&apos;,x);</span><br><span class="line">  &#125;</span><br><span class="line">  function fx(x)&#123;</span><br><span class="line">    return tail(x)</span><br><span class="line">  &#125;</span><br><span class="line">  fx(123)// tail 123</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参数默认值&quot;&gt;&lt;a href=&quot;#参数默认值&quot; class=&quot;headerlink&quot; title=&quot;参数默认值&quot;&gt;&lt;/a&gt;参数默认值&lt;/h3&gt;&lt;p&gt;函数参数里边直接赋默认值，但是可以被重新赋值&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y = &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;默认值&#39;&lt;/span&gt;,x,y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  test(&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  test(&lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;kill&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（6）- 数组扩展</title>
    <link href="http://yoursite.com/2019/08/21/ES6-06-array/"/>
    <id>http://yoursite.com/2019/08/21/ES6-06-array/</id>
    <published>2019-08-20T16:48:48.000Z</published>
    <updated>2019-08-20T17:04:15.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p>Array.of()把一组数据变量转换成数据类型,如果里边不传任何参数，那么输出的就是一个空数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'arr='</span>,arr);<span class="comment">//[3,4,7,9,11]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> empty=<span class="built_in">Array</span>.of();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'empty'</span>,empty);<span class="comment">//[]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p>Array.from() 把一些伪数组、集合转换为数组；为了演示这个功能 需要在在HTML里边添加几个标签<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>因为p是一个集合，需要把它转换为数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> p=<span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</span><br><span class="line">  <span class="keyword">let</span> pArr=<span class="built_in">Array</span>.from(p);</span><br><span class="line">  pArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item.textContent);<span class="comment">//item.textContent；textContent 原生js获取dom节点文本内容的方法、属性</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//类似于Map()的映射的作用</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>],<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> item*<span class="number">2</span>&#125;));<span class="comment">//[2,6,10]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上边的Array.from()有两个参数，第一个为数组，第二个就相当于map 的作用，把里边每个元素都乘以2</p><h3 id="Array-fill-填充数组"><a href="#Array-fill-填充数组" class="headerlink" title="Array.fill() 填充数组"></a>Array.fill() 填充数组</h3><p>把数组内部的值全部替换成需要的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fill-7'</span>,[<span class="number">1</span>,<span class="string">'a'</span>,<span class="literal">undefined</span>].fill(<span class="number">7</span>));<span class="comment">//[7,7,7]</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//第一个参数表示替换的内容，第二个表示替换的起始位置，第三个参数为换的长度</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fill,pos'</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>].fill(<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="keys-，-values-，-entries"><a href="#keys-，-values-，-entries" class="headerlink" title=".keys()，.values()，.entries()"></a>.keys()，.values()，.entries()</h3><ol><li><code>.keys()</code> 返回所有数组的下标（索引）</li><li><code>.values()</code>  返回数组的值 （现在存在兼容性问题，需要插件polylily）</li><li><code>.entries()</code> 既能取到索引，也能取到值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].keys())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'keys'</span>,index);<span class="comment">//0,1,2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].values())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'values'</span>,value);<span class="comment">//1,c,ks</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> [index,value] <span class="keyword">of</span> [<span class="string">'1'</span>,<span class="string">'c'</span>,<span class="string">'ks'</span>].entries())&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'values'</span>,index,value);<span class="comment">// values 0 1 , values 1 c, values 2 ks</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title=".copyWithin()"></a>.copyWithin()</h3><p>有三个参数；第一个参数为从那个位置开始替换，第二个值为读取数据的位置，第三个值为截至位置<br>(使用频率不高)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>));<span class="comment">//[4,2,3,4,5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="find-，-findIndex"><a href="#find-，-findIndex" class="headerlink" title=".find()，.findIndex()"></a>.find()，.findIndex()</h3><p>查找 </p><ol><li><code>.find()</code> 内部可以写条件，只找出符合条件的第一个就停止查找了 </li><li><code>.findIndex()</code> 返回 找出符合条件的下标（索引）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">3</span>&#125;));<span class="comment">//4</span></span><br><span class="line">  <span class="built_in">console</span>.log([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">3</span>&#125;));<span class="comment">//3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title=".includes()"></a>.includes()</h3><p>判断数组中是否包含某个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'number'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="number">1</span>));<span class="comment">//number true 说明数组中包含1，也没有判断数组中有NaN </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'number'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)); <span class="comment">//number true  表示NaN也能找到  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Array-of&quot;&gt;&lt;a href=&quot;#Array-of&quot; class=&quot;headerlink&quot; title=&quot;Array.of()&quot;&gt;&lt;/a&gt;Array.of()&lt;/h3&gt;&lt;p&gt;Array.of()把一组数据变量转换成数据类型,如果里边不传任何参数，那么输出的就是一个空数组&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.of(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;arr=&#39;&lt;/span&gt;,arr);&lt;span class=&quot;comment&quot;&gt;//[3,4,7,9,11]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; empty=&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.of();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;empty&#39;&lt;/span&gt;,empty);&lt;span class=&quot;comment&quot;&gt;//[]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Array-from&quot;&gt;&lt;a href=&quot;#Array-from&quot; class=&quot;headerlink&quot; title=&quot;Array.from()&quot;&gt;&lt;/a&gt;Array.from()&lt;/h3&gt;&lt;p&gt;Array.from() 把一些伪数组、集合转换为数组；为了演示这个功能 需要在在HTML里边添加几个标签&lt;br&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（5）- 数值扩展</title>
    <link href="http://yoursite.com/2019/08/21/ES6-05-numerical-expansion/"/>
    <id>http://yoursite.com/2019/08/21/ES6-05-numerical-expansion/</id>
    <published>2019-08-20T16:47:52.000Z</published>
    <updated>2019-08-20T17:05:38.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6-的-数值扩展"><a href="#ES6-的-数值扩展" class="headerlink" title="ES6 的 数值扩展"></a>ES6 的 数值扩展</h2><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'B'</span>,<span class="number">0B111110111</span>);<span class="comment">//503； 二进制都是以'0B'开头，大小写都可以，后边跟二进制数字</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">0o767</span>);<span class="comment">//503 ；八进制是以'0o'开头后边跟八进制数字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'15'</span>,<span class="built_in">Number</span>.isFinite(<span class="number">15</span>));<span class="comment">//15 true ;isFinite 判断有无群大；有尽 </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'NaN'</span>,<span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>));<span class="comment">//NaN false</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1/0'</span>,<span class="built_in">Number</span>.isFinite(<span class="string">'true'</span>/<span class="number">0</span>));<span class="comment">//1/0 false </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'NaN'</span>,<span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>));<span class="comment">//NaN ture </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'0'</span>,<span class="built_in">Number</span>.isNaN(<span class="number">0</span>));<span class="comment">//0 false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Number.isInteger 判断是不是整数 </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'25'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25</span>));<span class="comment">//25 ture</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'25.0'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25.0</span>));<span class="comment">//25.0 ture </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'25.1'</span>,<span class="built_in">Number</span>.isInteger(<span class="number">25.1</span>));<span class="comment">//25.1 false </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'25.1'</span>,<span class="built_in">Number</span>.isInteger(<span class="string">'25'</span>));<span class="comment">//25.1 false 不是数字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER,<span class="built_in">Number</span>.MIN_SAFE_INTEGER);<span class="comment">//9007199254740991,-9007199254740991 判断最大值 最小值</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'10'</span>,<span class="built_in">Number</span>.isSafeInteger(<span class="number">10</span>));<span class="comment">//ture 判断数是否安全范围的数</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>,<span class="built_in">Number</span>.isSafeInteger(<span class="string">'a'</span>));<span class="comment">//false 不为数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Math.trunc(num) 判断带小数的整数部分 并返回</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4.1</span>,<span class="built_in">Math</span>.trunc(<span class="number">4.1</span>));<span class="comment">//4</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4.9</span>,<span class="built_in">Math</span>.trunc(<span class="number">4.9</span>));<span class="comment">//4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Math.sign(num) 判断一个数到底为正数，负数，还是0</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'-5'</span>,<span class="built_in">Math</span>.sign(<span class="number">-5</span>));<span class="comment">//-5 -1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'0'</span>,<span class="built_in">Math</span>.sign(<span class="number">0</span>));<span class="comment">//0 0</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'5'</span>,<span class="built_in">Math</span>.sign(<span class="number">5</span>));<span class="comment">//5 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'50'</span>,<span class="built_in">Math</span>.sign(<span class="string">'50'</span>));<span class="comment">//50 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'foo'</span>,<span class="built_in">Math</span>.sign(<span class="string">'foo'</span>));<span class="comment">//foo NaN (非数字)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Math.cbrt(num)立方根的计算 </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'-1'</span>,<span class="built_in">Math</span>.cbrt(<span class="number">-1</span>));<span class="comment">// -1 -1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'8'</span>,<span class="built_in">Math</span>.cbrt(<span class="number">8</span>));<span class="comment">//8 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES6-的-数值扩展&quot;&gt;&lt;a href=&quot;#ES6-的-数值扩展&quot; class=&quot;headerlink&quot; title=&quot;ES6 的 数值扩展&quot;&gt;&lt;/a&gt;ES6 的 数值扩展&lt;/h2&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（4）- 字符串扩展</title>
    <link href="http://yoursite.com/2019/08/21/ES6-04-string-extension/"/>
    <id>http://yoursite.com/2019/08/21/ES6-04-string-extension/</id>
    <published>2019-08-20T16:46:34.000Z</published>
    <updated>2019-08-20T17:05:56.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES6的字符串扩展"><a href="#ES6的字符串扩展" class="headerlink" title="ES6的字符串扩展"></a>ES6的字符串扩展</h2><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>,<span class="string">`\u0061`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'s'</span>,<span class="string">`\u20BB7`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'s'</span>,<span class="string">`\u&#123;20BB7&#125;`</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> s=<span class="string">'𠮷'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'length'</span>,s.length);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'0'</span>,s.charAt(<span class="number">0</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>,s.charAt(<span class="number">1</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'at0'</span>,s.charCodeAt(<span class="number">0</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'at1'</span>,s.charCodeAt(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> s1=<span class="string">'𠮷a'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'length'</span>,s1.length);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'code0'</span>,s1.codePointAt(<span class="number">0</span>));<span class="comment">//取第一个字符的码值</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'code0'</span>,s1.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>));<span class="comment">//取第一个字符的码值，转换为16进制</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'code1'</span>,s1.codePointAt(<span class="number">1</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'code2'</span>,s1.codePointAt(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="string">"0x20bb7"</span>));<span class="comment">//es5</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCodePoint(<span class="string">"0x20bb7"</span>));<span class="comment">//es6 通过码值返回字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> str=<span class="string">'\u&#123;20bb7&#125;abc'</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'es5'</span>,str[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> code <span class="keyword">of</span> str)&#123;<span class="comment">//遍历输出字符串</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'es6'</span>,code);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> str=<span class="string">"string"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'includes'</span>,str.includes(<span class="string">"c"</span>));<span class="comment">//查看字符串中包含‘c’字符</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'start'</span>,str.startsWith(<span class="string">'str'</span>));<span class="comment">//判断字符串是否以'str'起始</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'end'</span>,str.endsWith(<span class="string">'ng'</span>));<span class="comment">//判断字符串是否以'ng'结束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> str=<span class="string">"abc"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(str.repeat(<span class="number">2</span>));<span class="comment">//指定重复的次数，相当于字符串的复制粘贴</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//*模板字符串(很重要)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> name=<span class="string">"list"</span>;</span><br><span class="line">  <span class="keyword">let</span> info=<span class="string">"hello world"</span>;</span><br><span class="line">  <span class="keyword">let</span> m=<span class="string">`i am <span class="subst">$&#123;name&#125;</span>,<span class="subst">$&#123;info&#125;</span>`</span>;<span class="comment">//`` 不是单引号'' ,是 键盘上数字1左边的字符 </span></span><br><span class="line">  <span class="built_in">console</span>.log(m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 字符串补白 （es7,需要babel-polyfill插件）</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>.padStart(<span class="number">2</span>,<span class="string">'0'</span>));<span class="comment">//01，补白的作用（es7），第一个参数‘2’表示两位，在前边补个0</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>.padEnd(<span class="number">2</span>,<span class="string">'0'</span>));<span class="comment">//10，补白的作用（es7），在后边补个0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标签模板 ，1防止xss攻击时用这个模板，2处理多语言转换 </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> user=&#123;</span><br><span class="line">    name:<span class="string">'list'</span>,</span><br><span class="line">    info:<span class="string">'hello world'</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(abc<span class="string">`i am <span class="subst">$&#123;user.name&#125;</span>,<span class="subst">$&#123;user.info&#125;</span>`</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">s,v1,v2</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s,v1,v2);</span><br><span class="line">    <span class="keyword">return</span> s+v1+v2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//.raw 对所有的\进行了转译</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span>+<span class="number">2</span>&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ES6的字符串扩展&quot;&gt;&lt;a href=&quot;#ES6的字符串扩展&quot; class=&quot;headerlink&quot; title=&quot;ES6的字符串扩展&quot;&gt;&lt;/a&gt;ES6的字符串扩展&lt;/h2&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（3）- 正则扩展</title>
    <link href="http://yoursite.com/2019/08/20/ES6-03-regular-extension/"/>
    <id>http://yoursite.com/2019/08/20/ES6-03-regular-extension/</id>
    <published>2019-08-20T10:35:25.000Z</published>
    <updated>2019-08-20T16:40:02.851Z</updated>
    
    <content type="html"><![CDATA[<p>在 ES5 中，RegExp构造函数的参数有两种情况。<br>第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="comment">// #构造函数#</span></span><br><span class="line">    <span class="keyword">let</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>, <span class="string">'i'</span>); <span class="comment">//第一个参数是字符串，第二个是修饰符</span></span><br><span class="line">    <span class="keyword">let</span> regex2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>); <span class="comment">//第一个参数是正则表达式，不接受第二个参数，否则会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span>;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">但是，ES5 不允许此时使用第二个参数添加修饰符，否则会报错。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/xyz/</span>, <span class="string">'i'</span>);</span><br><span class="line"><span class="comment">// Uncaught TypeError: Cannot supply flags when constructing one RegExp from another</span></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">ES6 改变了这种行为。如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/ig</span>, <span class="string">'i'</span>).flags   <span class="comment">// "i"</span></span><br></pre></td></tr></table></figure></p><p>上面代码中，原有正则对象的修饰符是ig，它会被第二个参数i覆盖。</p><p>ES6<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> regex3 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/ig</span>, <span class="string">'i'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(regex3.flags); <span class="comment">//原有正则对象的修饰符是ig，它会被第二个参数i覆盖</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>es6 允许 第一个参数为正则表达式，也有第二个参数，为修饰符，原有正则对象的修饰符是ig，所以它会被第二个参数i覆盖</p><p><a href="http://es6.ruanyifeng.com/#docs/regex" target="_blank" rel="noopener">更多参考</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 ES5 中，RegExp构造函数的参数有两种情况。&lt;br&gt;第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// #构造函数#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; regex = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;xyz&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;i&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//第一个参数是字符串，第二个是修饰符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; regex2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;(&lt;span class=&quot;regexp&quot;&gt;/xyz/i&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//第一个参数是正则表达式，不接受第二个参数，否则会报错&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（2）- 解构赋值</title>
    <link href="http://yoursite.com/2019/08/20/ES6-02-destructuring/"/>
    <id>http://yoursite.com/2019/08/20/ES6-02-destructuring/</id>
    <published>2019-08-20T10:05:31.000Z</published>
    <updated>2019-08-20T10:09:34.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组类的解构赋值"><a href="#数组类的解构赋值" class="headerlink" title="数组类的解构赋值"></a>数组类的解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a,b,rest;</span><br><span class="line">  [a,b]=[<span class="number">1</span>,<span class="number">2</span>];<span class="comment">//等价于 let a = 1,b = 2;</span></span><br><span class="line">  <span class="built_in">console</span>.log(a,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边的<code>[a,b]=[1,2];</code>等价于 <code>let a = 1,b = 2 ;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a,b,rest;</span><br><span class="line">[a,b,...rest] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a,b,rest);<span class="comment">//1,2,[3,4,5,6]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>上边的<code>[a,b,...rest] = [1,2,3,4,5,6];</code>等价于 <code></code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a,b,c,rest;</span><br><span class="line">  [a,b,c=<span class="number">3</span>]=[<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">  <span class="built_in">console</span>.log(a,b,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果上边的<code>c=3</code>改为<code>c</code>,那么直接就是输出的c为undefined，所以 <code>c=3</code>防止没有配对成功时的undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b=<span class="number">2</span>;</span><br><span class="line">  [a,b]=[b,a];</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);<span class="comment">//2,1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过解构赋值 可以实现变量交换，不用es5里边需要中间值存储</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  fucntion f()&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">let</span> a,b;</span><br><span class="line">  [a,b]=f();</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);<span class="comment">//1,2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个重要的场景<br>如果我们没有解构赋值，我们想取到第一个或者第二个元素，那么我们得用一个变量来接收这个函数运行的结果，然后通过索引返回0,1两个位置返回的值，这样写比较麻烦，用ES6 写就很方便</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> a,b,c;</span><br><span class="line">  [a,,,b]=f();</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);<span class="comment">//1,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> a,b,c;</span><br><span class="line">  [a,,...b]=f();</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);<span class="comment">//1,[3,4,5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>,</code>是把中间的值忽略获取 ；</p><h3 id="对象类解构赋值"><a href="#对象类解构赋值" class="headerlink" title="对象类解构赋值"></a>对象类解构赋值</h3><p>新建一个块作用域<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a,b;</span><br><span class="line">    (&#123;a,b&#125;=&#123;<span class="attr">a</span>:<span class="number">1</span>;b:<span class="number">2</span>;&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(a,b);<span class="comment">//1,2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> o=&#123;<span class="attr">p</span>:<span class="number">42</span>,<span class="attr">q</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">  <span class="keyword">let</span> &#123;p,q&#125;=o;</span><br><span class="line">  <span class="built_in">console</span>.log(p,q);<span class="comment">//42,true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象的解构赋值的左右必须为对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123;a=<span class="number">10</span>,b=<span class="number">5</span>&#125;=&#123;<span class="attr">a</span>:<span class="number">3</span>&#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(a,b);<span class="comment">//3,5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> metaData=&#123;</span><br><span class="line">    title:<span class="string">'abc'</span>,</span><br><span class="line">    test:[&#123;</span><br><span class="line">      title:<span class="string">'test'</span>,</span><br><span class="line">      desc:<span class="string">'description'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> &#123;<span class="attr">title</span>:esTitle,<span class="attr">test</span>:[&#123;<span class="attr">title</span>:cnTitle&#125;]&#125;=metaData;</span><br><span class="line">  <span class="built_in">console</span>.log(esTitle,cnTitle);<span class="comment">//abc,test</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数组类的解构赋值&quot;&gt;&lt;a href=&quot;#数组类的解构赋值&quot; class=&quot;headerlink&quot; title=&quot;数组类的解构赋值&quot;&gt;&lt;/a&gt;数组类的解构赋值&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a,b,rest;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [a,b]=[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//等价于 let a = 1,b = 2;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a,b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上边的&lt;code&gt;[a,b]=[1,2];&lt;/code&gt;等价于 &lt;code&gt;let a = 1,b = 2 ;&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a,b,rest;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[a,b,...rest] = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a,b,rest);&lt;span class=&quot;comment&quot;&gt;//1,2,[3,4,5,6]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习（1）-let,const</title>
    <link href="http://yoursite.com/2019/08/20/ES6-01-let-const/"/>
    <id>http://yoursite.com/2019/08/20/ES6-01-let-const/</id>
    <published>2019-08-20T10:04:31.000Z</published>
    <updated>2019-08-20T17:11:14.442Z</updated>
    
    <content type="html"><![CDATA[<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><h4 id="作用域的概念"><a href="#作用域的概念" class="headerlink" title="作用域的概念"></a>作用域的概念</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//var a = 1;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">test();<span class="comment">//1,2，i is not defined</span></span><br></pre></td></tr></table></figure><p>块作用域 ：如果一个方法（函数）用大括号包裹起来 ，那么这就是块级作用域；<br><code>let</code>只在块级作用域内有效；<br> <a id="more"></a><br>ES6 是强制启用严格模式 （’use strict’）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = 1;</span><br><span class="line">let a = 2;</span><br></pre></td></tr></table></figure><p>强调：以上会报错  * 使用<code>let</code>不能重复声明变量</p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p><code>const</code> 用来定义成常量，常量的作用是其值不能修改 (不严谨);<br>声明的时候必须赋值；</p><p>如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fucntion last()&#123;</span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">    PI = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(PI);</span><br><span class="line">&#125;</span><br><span class="line">last();<span class="comment">//报错 “PI” is read-only</span></span><br></pre></td></tr></table></figure></p><p>上边PI 的值改变了 ，所以报错<br><code>const</code> 也是有块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fucntion last()&#123;</span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">    <span class="keyword">const</span> k = &#123;</span><br><span class="line">        a:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    k.b = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(PI,k);</span><br><span class="line">&#125;</span><br><span class="line">last();</span><br></pre></td></tr></table></figure><p>上边 用<code>const</code>声明 <code>k</code> 为一个对象 ；对象是引用类型，对象本身是可以变的，<code>k</code>只是指向的是其不变的指针 </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;let&quot;&gt;&lt;a href=&quot;#let&quot; class=&quot;headerlink&quot; title=&quot;let&quot;&gt;&lt;/a&gt;let&lt;/h3&gt;&lt;h4 id=&quot;作用域的概念&quot;&gt;&lt;a href=&quot;#作用域的概念&quot; class=&quot;headerlink&quot; title=&quot;作用域的概念&quot;&gt;&lt;/a&gt;作用域的概念&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//var a = 1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i =&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test();&lt;span class=&quot;comment&quot;&gt;//1,2，i is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;块作用域 ：如果一个方法（函数）用大括号包裹起来 ，那么这就是块级作用域；&lt;br&gt;&lt;code&gt;let&lt;/code&gt;只在块级作用域内有效；&lt;br&gt;
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>vue深度学习（6）- render 函数</title>
    <link href="http://yoursite.com/2018/10/25/render-function/"/>
    <id>http://yoursite.com/2018/10/25/render-function/</id>
    <published>2018-10-25T15:27:58.000Z</published>
    <updated>2018-10-25T15:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="render"><a href="#render" class="headerlink" title="render"></a>render</h1><ul><li><p>研究方向</p><ul><li>render机制</li></ul></li><li><p>研究方法</p><ul><li>条件渲染、列表渲染、update、模板、服务器渲染、渲染性能，如何编译，ast是什么</li></ul></li></ul><hr><a id="more"></a><p><a href="https://cn.vuejs.org/v2/guide/render-function.html" target="_blank" rel="noopener">渲染函数</a></p><p>web页面渲染分四种方式  </p><ul><li>后端模板渲染： <ul><li>指使用PHP等后端语言来生成页面，通常情况下，需要后端配合，混合项目开发。以前项目都这样搞，缺点大于优点</li></ul></li><li>客户端渲染：<ul><li>指使用 JS 来渲染页面大部分内容，后端资源都是通过ajax请求数据来渲染。代表是现在流行的 SPA 单页面应用；</li></ul></li><li>node中间层：<ul><li>前后端分离，但优于前端直接请求接口从而产生的一系列问题。 比如可以用PHP写后端简单的接口，Node.js封装PHP接口，前端axios请求封装后的接口，将需要的数据返回到对应的view层页面，既解决了跨域问题（Node.js作为服务端，服务端没有跨域一说），同时又不需要配后端环境，只需要一个PHP接口 <a href="https://segmentfault.com/a/1190000012950302" target="_blank" rel="noopener">详细说明</a></li></ul></li><li>服务端渲染（ssr）：<ul><li>主要指的是ssr，在准确点说就是「同构渲染」指前后端共用 JS，首次渲染时使用 Node.js 来直出 HTML。一般来说同构渲染是介于前后端中的共有部分。</li></ul></li></ul><h3 id="什么是render函数"><a href="#什么是render函数" class="headerlink" title="什么是render函数"></a>什么是render函数</h3><p>Render函数是Vue2.x版本新增的一个函数；使用虚拟dom来渲染节点提升性能，因为它是基于JavaScript计算。通过使用createElement(h)来创建dom节点。createElement是render的核心方法。其Vue编译的时候会把template里面的节点解析成虚拟dom；</p><p>vue推荐在绝大多数情况下使用template来创建我们的HTML。然而在一些场景中，我们真的需要JavaScript的完全编程的能力，这就是render函数，它比template更接近编译器。</p><p><a href="https://github.com/Littlombie/Vue-analysis/tree/master/06-render/template" target="_blank" rel="noopener">demo</a></p><blockquote><p>在之前的Vue1.X版本中没有Virtual DOM,Vue2.0之后添加了此功能，而Virtual DOM 最后是通过<code>render</code>函数来生成模板页面<br>vue  在new Vue()最后的渲染只认render 函数 所有的东西 html,template 都会编译成render函数  </p></blockquote><h3 id="createElement-参数"><a href="#createElement-参数" class="headerlink" title="createElement 参数"></a>createElement 参数</h3><p>demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render (h) &#123;</span><br><span class="line">  return h(&apos;div&apos;, &#123;&#125;, this.text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>render</code>函数里面的传参h就是Vue里面的<code>createElement</code>方法，<code>return</code>返回一个<code>createElement</code>方法，（官方文档：返回的其实不是一个实际的 DOM 元素。它更准确的名字可能是 createNodeDescription，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，及其子节点。我们把这样的节点描述为“虚拟节点 (Virtual Node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。）</p><p>其中可以传三个参数：</p><ul><li>第一个参数 {String | Object | Function} 表示可以传一个 HTML 标签字符串，组件选项对象，或者解析上述任何一种的一个 async 异步函数。必需参数；</li><li><p>第二个参数 {Object} 一个包含模板相关属性的数据对象，对象里面可以是我们组件上面的props，或者是事件之类的东西，你可以在 template 中使用这些特性。可选参数；<br>data的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">  <span class="comment">// 和`v-bind:class`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或字符串和对象组成的数组</span></span><br><span class="line">  <span class="string">'class'</span>: &#123;</span><br><span class="line">    foo: <span class="literal">true</span>,</span><br><span class="line">    bar: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 和`v-bind:style`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或对象组成的数组</span></span><br><span class="line">  style: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'14px'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 普通的 HTML 特性</span></span><br><span class="line">  attrs: &#123;</span><br><span class="line">    id: <span class="string">'foo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 组件 props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    myProp: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// DOM 属性</span></span><br><span class="line">  domProps: &#123;</span><br><span class="line">    innerHTML: <span class="string">'baz'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件监听器基于 `on`</span></span><br><span class="line">  <span class="comment">// 所以不再支持如 `v-on:keyup.enter` 修饰器</span></span><br><span class="line">  <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.clickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 仅用于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">  <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">  nativeOn: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.nativeClickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span></span><br><span class="line">  <span class="comment">// 赋值，因为 Vue 已经自动为你进行了同步。</span></span><br><span class="line">  directives: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'my-custom-directive'</span>,</span><br><span class="line">      value: <span class="string">'2'</span>,</span><br><span class="line">      expression: <span class="string">'1 + 1'</span>,</span><br><span class="line">      arg: <span class="string">'foo'</span>,</span><br><span class="line">      modifiers: &#123;</span><br><span class="line">        bar: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 作用域插槽格式</span></span><br><span class="line">  <span class="comment">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">  scopedSlots: &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> createElement(<span class="string">'span'</span>, props.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果组件是其他组件的子组件，需为插槽指定名称</span></span><br><span class="line">  slot: <span class="string">'name-of-slot'</span>,</span><br><span class="line">  <span class="comment">// 其他特殊顶层属性</span></span><br><span class="line">  key: <span class="string">'myKey'</span>,</span><br><span class="line">  ref: <span class="string">'myRef'</span>,</span><br><span class="line">  <span class="comment">// 如果你在渲染函数中向多个元素都应用了相同的 ref 名，</span></span><br><span class="line">  <span class="comment">// 那么 `$refs.myRef` 会变成一个数组。</span></span><br><span class="line">  refInFor: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三个参数 {String | Array} 子虚拟节点 (VNodes)，由 <code>createElement()</code> 构建而成， 也可以使用字符串来生成“文本虚拟节点”。可选参数。<br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">'先写一些文字'</span>,</span><br><span class="line">  createElement(<span class="string">'h1'</span>, <span class="string">'一则头条'</span>),</span><br><span class="line">  createElement(MyComponent, &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      someProp: <span class="string">'foobar'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p>使用render函数的结果和我们之前使用<code>template</code>解析出来的结果是一样的。<code>render</code>函数是发生在<code>beforeMount</code>和<code>mounted</code>之间的，这也从侧面说明了，在<code>beforeMount</code>的时候，<code>$el</code>还只是我们在HTML里面写的节点，然后到<code>mounted</code>的时候，它就把渲染出来的内容挂载到了<code>DOM</code>节点上。这中间的过程其实是执行了<code>render function</code>的内容。    </p><p>在使用<code>.vue</code>文件开发的过程当中，我们在里面写了<code>template</code>模板，在经过了<code>vue-loader</code>的处理之后，就变成了<code>render function</code>，最终放到了<code>vue-loader</code>解析过的文件里面。这样做有什么好处呢？原因是由于在解析<code>template</code>变成<code>render function</code>的过程，是一个非常耗时的过程，<code>vue-loader</code>帮我们处理了这些内容之后，当我们在页面上执行<code>vue</code>代码的时候，效率会变得更高。  </p><p>VNodes必须唯一<br>组件树中的所有 VNodes 必须是唯一的。这意味着，下面的 render function 是无效的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myParagraphVNode = createElement(<span class="string">'p'</span>, <span class="string">'hi'</span>)</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'div'</span>, [</span><br><span class="line">    <span class="comment">// 错误-重复的 VNodes</span></span><br><span class="line">    myParagraphVNode, myParagraphVNode</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你真的需要重复很多次的元素/组件，你可以使用工厂函数来实现。例如，下面这个例子 render 函数完美有效地渲染了 20 个相同的段落：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'div'</span>,</span><br><span class="line">    <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123; <span class="attr">length</span>: <span class="number">20</span> &#125;).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">'p'</span>, <span class="string">'hi'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用JavaScript-代替模板功能"><a href="#使用JavaScript-代替模板功能" class="headerlink" title="使用JavaScript 代替模板功能"></a>使用JavaScript 代替模板功能</h3><p>只要在原生的 JavaScript 中可以轻松完成的操作，Vue 的 render 函数就不会提供专有的替代方法。比如，在 template 中使用的 v-if 和 v-for：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">"items.length"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No items found.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这些都会在 render 函数中被 JavaScript 的 if/else 和 map 重写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'items'</span>],</span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.items.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">'ul'</span>, <span class="keyword">this</span>.items.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">'li'</span>, item.name)</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">'p'</span>, <span class="string">'No items found.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>v-model<br>render 函数中没有与 v-model 的直接对应 - 你必须自己实现相应的逻辑：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'value'</span>],</span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'input'</span>, &#123;</span><br><span class="line">    domProps: &#123;</span><br><span class="line">      value: self.value</span><br><span class="line">    &#125;,</span><br><span class="line">    on: &#123;</span><br><span class="line">      input: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        self.$emit(<span class="string">'input'</span>, event.target.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这就是深入底层的代价，但与 v-model 相比，这可以让你更好地控制交互细节。</p><h4 id="事件-amp-案件修饰符"><a href="#事件-amp-案件修饰符" class="headerlink" title="事件&amp;案件修饰符"></a>事件&amp;案件修饰符</h4><p>对于 .passive、.capture 和 .once事件修饰符, Vue 提供了相应的前缀可以用于 on：<br>Modifier(s) |    Prefix<br>|-|-|<br>.passive |    &amp;<br>.capture|    !<br>.once|    ~<br>.capture.once or .once.capture    | ~!</p><p>例如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">on: &#123;</span><br><span class="line">  <span class="string">'!click'</span>: <span class="keyword">this</span>.doThisInCapturingMode,</span><br><span class="line">  <span class="string">'~keyup'</span>: <span class="keyword">this</span>.doThisOnce,</span><br><span class="line">  <span class="string">'~!mouseover'</span>: <span class="keyword">this</span>.doThisOnceInCapturingMode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于其他的修饰符，前缀不是很重要，因为你可以在事件处理函数中使用事件方法：<br>Modifier(s) |    Equivalent in Handler<br>|-|-|<br>.stop |    event.stopPropagation()<br>.prevent|    event.preventDefault()<br>.self |    if (event.target !== event.currentTarget) return<br>Keys: .enter, .13     | if (event.keyCode !== 13) return (change 13 to another key code for other key modifiers)<br>Modifiers Keys: .ctrl, .alt, .shift, .meta |    if (!event.ctrlKey) return (change ctrlKey to altKey, shiftKey, or metaKey, respectively)<br>这里是一个使用所有修饰符的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">on: &#123;</span><br><span class="line">  keyup: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果触发事件的元素不是事件绑定的元素</span></span><br><span class="line">    <span class="comment">// 则返回</span></span><br><span class="line">    <span class="keyword">if</span> (event.target !== event.currentTarget) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 如果按下去的不是 enter 键或者</span></span><br><span class="line">    <span class="comment">// 没有同时按下 shift 键</span></span><br><span class="line">    <span class="comment">// 则返回</span></span><br><span class="line">    <span class="keyword">if</span> (!event.shiftKey || event.keyCode !== <span class="number">13</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 阻止 事件冒泡</span></span><br><span class="line">    event.stopPropagation()</span><br><span class="line">    <span class="comment">// 阻止该元素默认的 keyup 事件</span></span><br><span class="line">    event.preventDefault()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>你可以通过 this.$slots 访问静态插槽的内容，得到的是一个 VNodes 数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `&lt;div&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'div'</span>, <span class="keyword">this</span>.$slots.default)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以通过 this.$scopedSlots 访问作用域插槽，得到的是一个返回 VNodes 的函<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'message'</span>],</span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `&lt;div&gt;&lt;slot :text="message"&gt;&lt;/slot&gt;&lt;/div&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'div'</span>, [</span><br><span class="line">    <span class="keyword">this</span>.$scopedSlots.default(&#123;</span><br><span class="line">      text: <span class="keyword">this</span>.message</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果要用渲染函数向子组件中传递作用域插槽，可以利用 <code>VNode</code> 数据对象中的 <code>scopedSlots</code> 域：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'div'</span>, [</span><br><span class="line">    createElement(<span class="string">'child'</span>, &#123;</span><br><span class="line">      <span class="comment">// 在数据对象中传递 `scopedSlots`</span></span><br><span class="line">      <span class="comment">// 格式：&#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">      scopedSlots: &#123;</span><br><span class="line">        <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> createElement(<span class="string">'span'</span>, props.text)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="AST"><a href="#AST" class="headerlink" title="AST"></a><a href="http://www.php.cn/js-tutorial-407382.html" target="_blank" rel="noopener">AST</a></h3><p>AST是指抽象语法树（abstract syntax tree），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式。Vue在mount过程中，template会被编译成AST语法树。<br>然后，经过generate（将AST语法树转化成render function字符串的过程）得到render函数，返回VNode。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>编译相关的代码都在 compiler文件中</p><p>core/instance / render.js 中</p><p>observe - 响应式<br>_ 在js中默认为是定义的私有属性 ，建议不要多次访问 </p><p>(视频2-5， 2-6)<br>platform/util/index.js  判断是否是render 还是template</p><p>new watcher() 渲染 watcher (observer/watcher.js ) </p><p>#</p><p>Vue 的 _render 方法是实例的一个私有方法，它用来把实例渲染成一个虚拟 Node。它的定义在 src/core/instance/render.js 文件中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再此定义一个render私有方法  返回一个vnode，通过vm.$options拿到render函数</span></span><br><span class="line">Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> &#123; render, _parentVnode &#125; = vm.$options </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复位_render标志在插槽上用于重复的插槽检查</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> vm.$slots) &#123;</span><br><span class="line">      <span class="comment">// $flow-disable-line</span></span><br><span class="line">      vm.$slots[key]._rendered = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (_parentVnode) &#123;</span><br><span class="line">    vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置父vnode。这允许呈现函数访问占位符节点上的数据。</span></span><br><span class="line">  vm.$vnode = _parentVnode</span><br><span class="line">  <span class="comment">// render self</span></span><br><span class="line">  <span class="keyword">let</span> vnode</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//利用call的方法 参数一当前上下文，vm._renderProxy再生产环境下 就是vm，也就是this 本身，开发环境是一个proxy 对象</span></span><br><span class="line">    vnode = render.call(vm._renderProxy, vm.$createElement)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    handleError(e, vm, <span class="string">`render`</span>)</span><br><span class="line">    <span class="comment">// 返回错误呈现结果，</span></span><br><span class="line">    <span class="comment">// 或先前的vnode，以防止呈现错误导致空白组件</span></span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (vm.$options.renderError) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          handleError(e, vm, <span class="string">`renderError`</span>)</span><br><span class="line">          vnode = vm._vnode</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vnode = vm._vnode</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vnode = vm._vnode</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上边 会返回一个 vnode ， $options 这个函数可以自己写 ，也可以通过编译生成</span></span><br><span class="line">  <span class="comment">// 如果呈现函数出错，返回空vnode</span></span><br><span class="line">  <span class="keyword">if</span> (!(vnode <span class="keyword">instanceof</span> VNode)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; <span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'Multiple root nodes returned from render function. Render function '</span> +</span><br><span class="line">        <span class="string">'should return a single root node.'</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    vnode = createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// set parent</span></span><br><span class="line">  vnode.parent = _parentVnode</span><br><span class="line">  <span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码最关键的是 <code>render</code> 方法的调用，我们在平时的开发工作中手写 <code>render</code> 方法的场景比较少，而写的比较多的是 <code>template</code> 模板，在之前的 mounted 方法的实现中，会把 <code>template</code> 编译成 <code>render</code> 方法，但这个编译过程是非常复杂的，我们不打算在这里展开讲，之后会专门花一个章节来分析 <code>Vue</code> 的编译过程。  </p><p>在 Vue 的官方文档中介绍了 <code>render</code> 函数的第一个参数是 <code>createElement</code>，那么结合之前的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>相当于我们编写如下 <code>render</code> 函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render (createElement) &#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">'div'</span>, &#123;</span><br><span class="line">      attrs: &#123;</span><br><span class="line">        id: <span class="string">'app'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="keyword">this</span>.message)</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>再回到 <code>_render</code> 函数中的 <code>render</code>方法的调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnode = render.call(vm._renderProxy, vm.$createElement)</span><br></pre></td></tr></table></figure><p>可以看到，<code>render</code> 函数中的 <code>createElement</code> 方法就是 <code>vm.$createElement</code> 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initRender</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">//将createElement fn绑定到这个实例，这样我们就可以在其中获得适当的呈现上下文。</span></span><br><span class="line">  <span class="comment">// args顺序:标签、数据、子元素、normalizationType、alwaysNormalize内部版本由模板编译的呈现函数使用</span></span><br><span class="line">  vm._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">false</span>)</span><br><span class="line">  <span class="comment">//规范化通常应用于公共版本，用于用户编写的呈现函数。</span></span><br><span class="line">  <span class="comment">//手写render函数 创建的方法</span></span><br><span class="line">  vm.$createElement = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际上，<code>vm.$createElement</code> 方法定义是在执行 <code>initRender</code> 方法的时候，可以看到除了 <code>vm.$createElement</code> 方法，还有一个 <code>vm._c</code> 方法，它是被模板编译成的 <code>render</code> 函数使用，而 <code>vm.$createElement</code> 是用户手写 <code>render</code> 方法使用的， 这俩个方法支持的参数相同，并且内部都调用了 <code>createElement</code> 方法。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>render方法的实质就是生成template模板； </li><li>通过调用一个方法来生成，而这个方法是通过render方法的参数传递给它的； </li><li>这个方法有三个参数，分别提供标签名，标签相关属性，标签内部的html内容 </li><li>通过这三个参数，可以生成一个完整的模板  </li></ol><p>备注：<br>render方法可以使用JSX语法，但需要Babel plugin插件；<br>render方法里的第三个参数可以使用函数来生成多个组件（特别是如果他们相同的话），只要生成结果是一个数组，且数组元素都是VNode即可；  </p><p>注意：<br>render函数室友限制的，Vue.js 2.X支持，但是1.X无法使用。</p><p><code>vm._render</code>最终是通过执行 <code>createElement</code> 方法并返回的是 <code>vnode</code>，它是一个虚拟 <code>Node</code>。Vue 2.0 相比 Vue 1.0 最大的升级就是利用了 <code>Virtual DOM</code>。因此在分析 <code>createElement</code> 的实现前，我们先了解一下 <code>Virtual DOM</code> 的概念。</p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="[参考博客]"></a>[参考博客]</h3><p><a href="https://blog.csdn.net/wngzhem/article/details/54291024" target="_blank" rel="noopener">vue Render函数进阶</a><br><a href="https://www.cnblogs.com/tugenhua0707/p/7528621.html" target="_blank" rel="noopener">理解Vue中的Render渲染函数</a><br><a href="https://blog.csdn.net/weixin_42229553/article/details/80444919" target="_blank" rel="noopener">(一) Vue基础个人总结，条件渲染，列表渲染，组件等</a><br><a href="https://www.jb51.net/article/122424.htm" target="_blank" rel="noopener">如何理解Vue的render函数的具体用法</a><br><a href="https://www.cnblogs.com/leungUwah/p/6921873.html" target="_blank" rel="noopener">Vue2.x中的Render函数</a><br><a href="http://www.alloyteam.com/2017/07/12918/" target="_blank" rel="noopener">用jsx写vue组件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;render&quot;&gt;&lt;a href=&quot;#render&quot; class=&quot;headerlink&quot; title=&quot;render&quot;&gt;&lt;/a&gt;render&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;研究方向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;render机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;研究方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件渲染、列表渲染、update、模板、服务器渲染、渲染性能，如何编译，ast是什么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="render" scheme="http://yoursite.com/tags/render/"/>
    
  </entry>
  
  <entry>
    <title>vue深度学习（2）- 生命周期</title>
    <link href="http://yoursite.com/2018/10/20/vue-lifeCycle-2/"/>
    <id>http://yoursite.com/2018/10/20/vue-lifeCycle-2/</id>
    <published>2018-10-20T15:35:04.000Z</published>
    <updated>2018-10-25T15:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue的生命周期方法"><a href="#Vue的生命周期方法" class="headerlink" title="Vue的生命周期方法"></a>Vue的生命周期方法</h3><ul><li><p>研究方向</p><ul><li>hook机制</li></ul></li><li><p>研究方法</p><ul><li>各个hook在哪个阶段触发，为啥会在这个阶段触发？触发这个钩子可以改变什么或者得到什么？</li></ul></li></ul><hr><a id="more"></a><h3 id="钩子函数（Hook）"><a href="#钩子函数（Hook）" class="headerlink" title="钩子函数（Hook）"></a>钩子函数（Hook）</h3><p>钩子是Windows消息处理机制的一个平台,应用程序可以在上面设置子程以监视指定窗口的某种消息；<br>钩子机制允许应用程序截获处理window消息或特定事件，<br>钩子函数可以理解为js运行进程中在其特定段时的回调函数</p><h3 id="什么是生命周期？"><a href="#什么是生命周期？" class="headerlink" title="什么是生命周期？"></a>什么是生命周期？</h3><p>生命周期：Vue 实例从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期，各个阶段有相对应的事件钩子<br><img src="https://github.com/Littlombie/Vue-analysis/blob/master/02-lifeCycle/LifeCycle1.png?raw=true" alt="vue 的生命周期"></p><ul><li>图中 数据观测：</li></ul><p>在new Vue() 时 开始观测数据</p><ul><li><code>init event &amp; lifeCycle</code>:  表示<code>new Vue</code> 后事件和生命周期的<code>init</code></li><li>当<code>created</code>完成之后，它会去判断<code>instance</code>（实例）里面是否含有<code>“el”option</code>（选项），如果没有的话，它会调用<code>vm.$mount(el)</code>这个方法，然后执行下一步；如果有的话，直接执行下一步。紧接着会判断是否含有<code>“template”</code>这个选项，如果有的话，它会把<code>template</code>解析成一个<code>render function</code> ，这是一个<code>template</code>编译的过程，结果是解析成了<code>render</code>函数：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render (h) &#123;</span><br><span class="line">  return h(&apos;div&apos;, &#123;&#125;, this.text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>render</code>函数里面的传参h就是Vue里面的<code>createElement</code>方法，<code>return</code>返回一个<code>createElement</code>方法，其中要传3个参数，第一个参数就是创建的div标签；第二个参数传了一个对象，对象里面可以是我们组件上面的props，或者是事件之类的东西；第三个参数就是div标签里面的内容，这里我们指向了data里面的text。  </p><p>使用render函数的结果和我们之前使用<code>template</code>解析出来的结果是一样的。<code>render</code>函数是发生在<code>beforeMount</code>和<code>mounted</code>之间的，这也从侧面说明了，在<code>beforeMount</code>的时候，<code>$el</code>还只是我们在HTML里面写的节点，然后到<code>mounted</code>的时候，它就把渲染出来的内容挂载到了<code>DOM</code>节点上。这中间的过程其实是执行了<code>render function</code>的内容。    </p><p>在使用<code>.vue</code>文件开发的过程当中，我们在里面写了<code>template</code>模板，在经过了<code>vue-loader</code>的处理之后，就变成了<code>render function</code>，最终放到了<code>vue-loader</code>解析过的文件里面。这样做有什么好处呢？原因是由于在解析<code>template</code>变成<code>render function</code>的过程，是一个非常耗时的过程，<code>vue-loader</code>帮我们处理了这些内容之后，当我们在页面上执行<code>vue</code>代码的时候，效率会变得更高。  </p><p><code>beforeMount</code>在有了<code>render function</code>的时候才会执行，当执行完<code>render function</code>之后，就会调用<code>mounted</code>这个钩子，在<code>mounted</code>挂载完毕之后，这个实例就算是走完流程了。<br>后续的钩子函数执行的过程都是需要外部的触发才会执行。比如说有数据的变化，会调用<code>beforeUpdate</code>，然后经过<code>Virtual DOM</code>，最后<code>updated</code>更新完毕。当组件被销毁的时候，它会调用<code>beforeDestory</code>，以及<code>destoryed</code>。  </p><h3 id="生命周期的钩子-lifecyclehook"><a href="#生命周期的钩子-lifecyclehook" class="headerlink" title="生命周期的钩子 (lifecyclehook)"></a>生命周期的钩子 (lifecyclehook)</h3><p>Vue所有的生命周期钩子自动绑定在this上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法。这是因为箭头函数绑定了父上下文，因此this与你期待的Vue实例不同。</p><table><thead><tr><th>生命周期中的钩子函数</th><th>组建状态</th><th>最佳实践</th></tr></thead><tbody><tr><td>beforeCreate</td><td>实例初始化之后,this指向创建的实例，此时还不能访问到<code>data</code>,<code>computed</code>,<code>watch</code>,<code>methods</code>上的数据和方法</td><td>常用于初始化非响应式变量</td></tr><tr><td>created</td><td>实例创建完成，可以访问到 <code>data</code>,<code>computed</code>,<code>watch</code>,<code>methods</code>上的数据和方法，未挂载到dom 上，不能访问<code>#el</code> 属性， <code>$ref</code>属性d额内容为空数组</td><td>常用语简单的<code>ajax请求</code>,页面的初始化</td></tr><tr><td>beforeMount</td><td>在挂载开始前被调用，<code>beforeMount</code>之前，会找到对应的<code>template</code>，并编译成<code>render</code>函数</td><td>-</td></tr><tr><td>mounted</td><td>实例挂载到DOM上，此时可以通过<code>DOM API</code> 获取到<code>DOM</code> 节点，<code>$ref</code> 属性可以访问</td><td>常用于获取vnode信息和操作，<code>ajax</code>请求</td></tr><tr><td>beforeUpdate</td><td>响应式数据更新时调用，发生在虚拟DOM打补丁之前</td><td>适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器</td></tr><tr><td>updated</td><td>虚拟DOM重新渲染和打补丁之后调用，组件DOM已经更新，可执行依赖于DOM的操作</td><td>避免在这个钩子函数中操作数据，可能陷入死循环</td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。这一步，实力任然完全可用，<code>this</code>仍能获取到实例</td><td>常用于销毁定时器，解绑迁居时间，销毁插件对象等操作</td></tr><tr><td>destroyed</td><td>实力销毁后调用，调用后，Vue实例只是的所有东西都会解绑，所有的事件监听器会被移除，所有的姿势里也会被销毁</td><td>在此也可以用于销毁定时器</td></tr></tbody></table><!-- - beforeCreate:   - 组件状态： 实例初始化之后,this指向创建的实例，此时还不能访问到`data`,`computed`,`watch`,`methods`上的数据和方法  - 最佳实践：常用于初始化非响应式变量- created:  - 组件状态：实例创建完成，可以访问到 `data`,`computed`,`watch`,`methods`上的数据和方法，未挂载到dom 上，不能访问`#el` 属性， `$ref`属性d额内容为空数组  - 最佳实践：常用语简单的`ajax请求`,页面的初始化  - beforeMount:   - 组件状态：在挂载开始前被调用，`beforeMount`之前，会找到对应的`template`，并编译成`render`函数- mounted:  - 组件状态：实例挂载到DOM上，此时可以通过`DOM API` 获取到`DOM` 节点，`$ref` 属性可以访问  - 最佳实践：常用于获取vnode信息和操作，`ajax`请求- beforeUpdate:  - 组件状态：响应式数据更新时调用，发生在虚拟DOM打补丁之前  - 最佳实践：适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器- updated:  - 组件状态：虚拟DOM重新渲染和打补丁之后调用，组件DOM已经更新，可执行依赖于DOM的操作  - 最佳实践：避免在这个钩子函数中操作数据，可能陷入死循环- beforeDestroy:   - 组件状态：实例销毁之前调用。这一步，实力任然完全可用，`this`仍能获取到实例   - 最佳实践：常用于销毁定时器，解绑迁居时间，销毁插件对象等操作- destroyed:  - 组件状态：实力销毁后调用，调用后，Vue实例只是的所有东西都会解绑，所有的事件监听器会被移除，所有的姿势里也会被销毁    - 最佳实践：在此也可以用于销毁定时器， --><p>注：</p><ul><li>created阶段的<code>ajax</code>请求与<code>mounted</code>请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态，此时如果做<code>DOM</code>请求时会报错,页面还没有渲染出来</li><li><p>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 <a href="https://blog.csdn.net/shuidinaozhongyan/article/details/72630573" target="_blank" rel="noopener"><code>vm.$nextTick</code></a><br>(<a href="https://blog.csdn.net/sinat_17775997/article/details/71638144" target="_blank" rel="noopener">https://blog.csdn.net/sinat_17775997/article/details/71638144</a>)</p></li><li><p><code>beforeCreate</code>，<code>created</code>，<code>beforeMount</code>，<code>mounted</code> 是自动被调用  </p></li><li><p><code>beforeUpdate</code>, <code>updated</code>,<code>beforeDestroy</code>,<code>destroyed</code> 是手动调用  </p></li><li><p>子组件的<code>created</code> 优先于父组件的<code>created</code> 执行， 父组件的<code>beforeCreate</code> 优先于子组件的<code>beforeCreate</code></p></li><li>子组件的<code>mounted</code>优先于父组件的<code>mounted</code>， 父组件的<code>beforeMount</code> 优先于子组件的 <code>beforeMount</code></li><li>子组件的<code>destroyed</code>优先于父组件的<code>beforeDestroy</code>， 父组件的<code>beforeDestroy</code> 优先于子组件的 <code>beforeDestroy</code></li></ul><h4 id="最后还有-两个钩子函数没显示"><a href="#最后还有-两个钩子函数没显示" class="headerlink" title="最后还有 两个钩子函数没显示"></a>最后还有 两个钩子函数没显示</h4><p>activated &amp; deactivated<br>使用<code>&lt;keep-alive&gt;</code>会将数据保留在内存中，如果要在每次进入页面的时候获取最新的数据，需要在activated阶段获取数据，承担原来created钩子中获取数据的任务</p><ul><li>activated： 在组件被激活时调用，在组件第一次渲染时也会被调用，之后每次keep-alive激活时被调用，该钩子在服务器端渲染期间不被调用。</li><li><p>deactivated： keep-alive组件停用时调用。该钩子在服务端渲染期间不被调用。</p><p>组件内的离开当前路由钩子beforeRouteLeave =&gt;  路由前置守卫 beforeEach =&gt;<br>  全局后置钩子afterEach =&gt; deactivated 离开缓存组件 =&gt; activated 进入缓存组件(如果你进入的也是缓存路由)<br>  // 如果离开的组件没有缓存的话 beforeDestroy会替换deactivated<br>  // 如果进入的路由也没有缓存的话  全局后置钩子afterEach=&gt;销毁 destroyed=&gt; beforeCreate等</p></li></ul><h3 id="路由导航守卫"><a href="#路由导航守卫" class="headerlink" title="路由导航守卫"></a>路由导航守卫</h3><p><a href="https://juejin.im/post/5b41bdef6fb9a04fe63765f1" target="_blank" rel="noopener">Vue的钩子函数 [路由导航守卫、keep-alive、生命周期钩子]</a></p><p>实例demo：<br> 见<a href="https://github.com/Littlombie/Vue-analysis/tree/master/02-lifeCycle/template" target="_blank" rel="noopener"><code>template</code></a><br><!-- ![](https://files.jb51.net/file_images/article/201709/2017927151335093.png?2017827151357) --></p><h3 id="遗留问题："><a href="#遗留问题：" class="headerlink" title="遗留问题："></a>遗留问题：</h3><ul><li><p>兄弟组件通过bus传值时的updated，beforeUpdate 生命周期顺序<br>如果是通过父级派发更新事件时，beforeUpdate，和updated的顺序 都是自上到下正常顺序进行；<br>如果是兄弟组件的派发顺序是beforeUpdate是从上到下，updated 的顺序是从下到上的更新顺序</p></li><li><p>beforeCreate 有什么具体实际的用处，例举<br>vue生命周期中 beforeCreate 是实例初始化完成后数据观测（data observer）和event/watcher之前被调用。 </p><p>在beforeCreate前，所有的options都会先存到vm.$options中，在beforeCreate之后，将$options里的data啦，props啦，methods啦等等一个个附到vm上，然后再触发created钩子。所以在beforeCreate的时候，通过this.message是拿不到值的，在created的时候就能通过this.message拿到值了。</p><p>一定要在beforeCreate的时候就同步去拿data里的值的话，就是直接从this.$options.data里去拿。如果data中的初始值是简单的string，那直接this.$options.data()[“message”]就好.涉及到复杂点的情况，建议看看源码里是怎么处理的，具体在core/instance/state.js中的initData(vm)里。<br>还有一种方法 可以使用nextTick()，相当于做个延迟，等页面挂载完后在执行<br>使用promise</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> F = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            dataList:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate() &#123;</span><br><span class="line">        F = fetchData(<span class="comment">//fetchData是取数方法</span></span><br><span class="line">            <span class="comment">//...返回promise</span></span><br><span class="line">        )</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        F.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.dataList = data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本人理解其中原因就是一个实例初始化后的提示功能，表示此后要开始</p></li></ul><p>参考文档：<br><a href="https://juejin.im/post/5ad10800f265da23826e681e?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">如何解释vue的生命周期才能令面试官满意？</a><br><a href="http://blog.poetries.top/2018/08/26/vue-lifecircle/?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">vue生命周期（五）</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651555022&amp;idx=1&amp;sn=552856ad4af7bb9560217f6deec65270&amp;chksm=8025530fb752da190830e52ca6a9b24d1e7440e1d6cccbfff6355f7583d4f4749400e541739e" target="_blank" rel="noopener">深入 Vue 生命周期</a><br><a href="https://segmentfault.com/a/1190000008771768?_ea=1739750" target="_blank" rel="noopener">Vue 实例中的生命周期钩子详解</a><br><a href="https://www.cnblogs.com/locim/p/8892738.html" target="_blank" rel="noopener">Vue.js源码解读</a><br><a href="http://blog.51cto.com/9195095/1963227" target="_blank" rel="noopener">生命周期</a><br><a href="https://juejin.im/post/5b41bdef6fb9a04fe63765f1" target="_blank" rel="noopener">Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]</a><br><a href="https://blog.csdn.net/xdnloveme/article/details/78035065" target="_blank" rel="noopener">Vue生命周期中mounted和created的区别</a><br><a href="https://www.jb51.net/article/124737.htm" target="_blank" rel="noopener">深入理解Vue生命周期、手动挂载及挂载子组件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Vue的生命周期方法&quot;&gt;&lt;a href=&quot;#Vue的生命周期方法&quot; class=&quot;headerlink&quot; title=&quot;Vue的生命周期方法&quot;&gt;&lt;/a&gt;Vue的生命周期方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;研究方向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hook机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;研究方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各个hook在哪个阶段触发，为啥会在这个阶段触发？触发这个钩子可以改变什么或者得到什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
</feed>
