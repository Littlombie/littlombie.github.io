<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Littlombie&#39;s Nirvana</title>
  
  <subtitle>Novelty is the great parent of pleasure.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-25T15:43:00.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Littlombie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue深度学习（6）- render 函数</title>
    <link href="http://yoursite.com/2018/10/25/render-function/"/>
    <id>http://yoursite.com/2018/10/25/render-function/</id>
    <published>2018-10-25T15:27:58.000Z</published>
    <updated>2018-10-25T15:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="render"><a href="#render" class="headerlink" title="render"></a>render</h1><ul><li><p>研究方向</p><ul><li>render机制</li></ul></li><li><p>研究方法</p><ul><li>条件渲染、列表渲染、update、模板、服务器渲染、渲染性能，如何编译，ast是什么</li></ul></li></ul><hr><a id="more"></a><p><a href="https://cn.vuejs.org/v2/guide/render-function.html" target="_blank" rel="noopener">渲染函数</a></p><p>web页面渲染分四种方式  </p><ul><li>后端模板渲染： <ul><li>指使用PHP等后端语言来生成页面，通常情况下，需要后端配合，混合项目开发。以前项目都这样搞，缺点大于优点</li></ul></li><li>客户端渲染：<ul><li>指使用 JS 来渲染页面大部分内容，后端资源都是通过ajax请求数据来渲染。代表是现在流行的 SPA 单页面应用；</li></ul></li><li>node中间层：<ul><li>前后端分离，但优于前端直接请求接口从而产生的一系列问题。 比如可以用PHP写后端简单的接口，Node.js封装PHP接口，前端axios请求封装后的接口，将需要的数据返回到对应的view层页面，既解决了跨域问题（Node.js作为服务端，服务端没有跨域一说），同时又不需要配后端环境，只需要一个PHP接口 <a href="https://segmentfault.com/a/1190000012950302" target="_blank" rel="noopener">详细说明</a></li></ul></li><li>服务端渲染（ssr）：<ul><li>主要指的是ssr，在准确点说就是「同构渲染」指前后端共用 JS，首次渲染时使用 Node.js 来直出 HTML。一般来说同构渲染是介于前后端中的共有部分。</li></ul></li></ul><h3 id="什么是render函数"><a href="#什么是render函数" class="headerlink" title="什么是render函数"></a>什么是render函数</h3><p>Render函数是Vue2.x版本新增的一个函数；使用虚拟dom来渲染节点提升性能，因为它是基于JavaScript计算。通过使用createElement(h)来创建dom节点。createElement是render的核心方法。其Vue编译的时候会把template里面的节点解析成虚拟dom；</p><p>vue推荐在绝大多数情况下使用template来创建我们的HTML。然而在一些场景中，我们真的需要JavaScript的完全编程的能力，这就是render函数，它比template更接近编译器。</p><p><a href="https://github.com/Littlombie/Vue-analysis/tree/master/06-render/template" target="_blank" rel="noopener">demo</a></p><blockquote><p>在之前的Vue1.X版本中没有Virtual DOM,Vue2.0之后添加了此功能，而Virtual DOM 最后是通过<code>render</code>函数来生成模板页面<br>vue  在new Vue()最后的渲染只认render 函数 所有的东西 html,template 都会编译成render函数  </p></blockquote><h3 id="createElement-参数"><a href="#createElement-参数" class="headerlink" title="createElement 参数"></a>createElement 参数</h3><p>demo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render (h) &#123;</span><br><span class="line">  return h(&apos;div&apos;, &#123;&#125;, this.text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>render</code>函数里面的传参h就是Vue里面的<code>createElement</code>方法，<code>return</code>返回一个<code>createElement</code>方法，（官方文档：返回的其实不是一个实际的 DOM 元素。它更准确的名字可能是 createNodeDescription，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，及其子节点。我们把这样的节点描述为“虚拟节点 (Virtual Node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。）</p><p>其中可以传三个参数：</p><ul><li>第一个参数 {String | Object | Function} 表示可以传一个 HTML 标签字符串，组件选项对象，或者解析上述任何一种的一个 async 异步函数。必需参数；</li><li><p>第二个参数 {Object} 一个包含模板相关属性的数据对象，对象里面可以是我们组件上面的props，或者是事件之类的东西，你可以在 template 中使用这些特性。可选参数；<br>data的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">  <span class="comment">// 和`v-bind:class`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或字符串和对象组成的数组</span></span><br><span class="line">  <span class="string">'class'</span>: &#123;</span><br><span class="line">    foo: <span class="literal">true</span>,</span><br><span class="line">    bar: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 和`v-bind:style`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或对象组成的数组</span></span><br><span class="line">  style: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'14px'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 普通的 HTML 特性</span></span><br><span class="line">  attrs: &#123;</span><br><span class="line">    id: <span class="string">'foo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 组件 props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    myProp: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// DOM 属性</span></span><br><span class="line">  domProps: &#123;</span><br><span class="line">    innerHTML: <span class="string">'baz'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件监听器基于 `on`</span></span><br><span class="line">  <span class="comment">// 所以不再支持如 `v-on:keyup.enter` 修饰器</span></span><br><span class="line">  <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.clickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 仅用于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">  <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">  nativeOn: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.nativeClickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span></span><br><span class="line">  <span class="comment">// 赋值，因为 Vue 已经自动为你进行了同步。</span></span><br><span class="line">  directives: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'my-custom-directive'</span>,</span><br><span class="line">      value: <span class="string">'2'</span>,</span><br><span class="line">      expression: <span class="string">'1 + 1'</span>,</span><br><span class="line">      arg: <span class="string">'foo'</span>,</span><br><span class="line">      modifiers: &#123;</span><br><span class="line">        bar: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 作用域插槽格式</span></span><br><span class="line">  <span class="comment">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">  scopedSlots: &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> createElement(<span class="string">'span'</span>, props.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果组件是其他组件的子组件，需为插槽指定名称</span></span><br><span class="line">  slot: <span class="string">'name-of-slot'</span>,</span><br><span class="line">  <span class="comment">// 其他特殊顶层属性</span></span><br><span class="line">  key: <span class="string">'myKey'</span>,</span><br><span class="line">  ref: <span class="string">'myRef'</span>,</span><br><span class="line">  <span class="comment">// 如果你在渲染函数中向多个元素都应用了相同的 ref 名，</span></span><br><span class="line">  <span class="comment">// 那么 `$refs.myRef` 会变成一个数组。</span></span><br><span class="line">  refInFor: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三个参数 {String | Array} 子虚拟节点 (VNodes)，由 <code>createElement()</code> 构建而成， 也可以使用字符串来生成“文本虚拟节点”。可选参数。<br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">'先写一些文字'</span>,</span><br><span class="line">  createElement(<span class="string">'h1'</span>, <span class="string">'一则头条'</span>),</span><br><span class="line">  createElement(MyComponent, &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      someProp: <span class="string">'foobar'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><p>使用render函数的结果和我们之前使用<code>template</code>解析出来的结果是一样的。<code>render</code>函数是发生在<code>beforeMount</code>和<code>mounted</code>之间的，这也从侧面说明了，在<code>beforeMount</code>的时候，<code>$el</code>还只是我们在HTML里面写的节点，然后到<code>mounted</code>的时候，它就把渲染出来的内容挂载到了<code>DOM</code>节点上。这中间的过程其实是执行了<code>render function</code>的内容。    </p><p>在使用<code>.vue</code>文件开发的过程当中，我们在里面写了<code>template</code>模板，在经过了<code>vue-loader</code>的处理之后，就变成了<code>render function</code>，最终放到了<code>vue-loader</code>解析过的文件里面。这样做有什么好处呢？原因是由于在解析<code>template</code>变成<code>render function</code>的过程，是一个非常耗时的过程，<code>vue-loader</code>帮我们处理了这些内容之后，当我们在页面上执行<code>vue</code>代码的时候，效率会变得更高。  </p><p>VNodes必须唯一<br>组件树中的所有 VNodes 必须是唯一的。这意味着，下面的 render function 是无效的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myParagraphVNode = createElement(<span class="string">'p'</span>, <span class="string">'hi'</span>)</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'div'</span>, [</span><br><span class="line">    <span class="comment">// 错误-重复的 VNodes</span></span><br><span class="line">    myParagraphVNode, myParagraphVNode</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果你真的需要重复很多次的元素/组件，你可以使用工厂函数来实现。例如，下面这个例子 render 函数完美有效地渲染了 20 个相同的段落：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'div'</span>,</span><br><span class="line">    <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123; <span class="attr">length</span>: <span class="number">20</span> &#125;).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">'p'</span>, <span class="string">'hi'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用JavaScript-代替模板功能"><a href="#使用JavaScript-代替模板功能" class="headerlink" title="使用JavaScript 代替模板功能"></a>使用JavaScript 代替模板功能</h3><p>只要在原生的 JavaScript 中可以轻松完成的操作，Vue 的 render 函数就不会提供专有的替代方法。比如，在 template 中使用的 v-if 和 v-for：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">"items.length"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No items found.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这些都会在 render 函数中被 JavaScript 的 if/else 和 map 重写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'items'</span>],</span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.items.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">'ul'</span>, <span class="keyword">this</span>.items.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">'li'</span>, item.name)</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">'p'</span>, <span class="string">'No items found.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>v-model<br>render 函数中没有与 v-model 的直接对应 - 你必须自己实现相应的逻辑：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'value'</span>],</span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'input'</span>, &#123;</span><br><span class="line">    domProps: &#123;</span><br><span class="line">      value: self.value</span><br><span class="line">    &#125;,</span><br><span class="line">    on: &#123;</span><br><span class="line">      input: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        self.$emit(<span class="string">'input'</span>, event.target.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这就是深入底层的代价，但与 v-model 相比，这可以让你更好地控制交互细节。</p><h4 id="事件-amp-案件修饰符"><a href="#事件-amp-案件修饰符" class="headerlink" title="事件&amp;案件修饰符"></a>事件&amp;案件修饰符</h4><p>对于 .passive、.capture 和 .once事件修饰符, Vue 提供了相应的前缀可以用于 on：<br>Modifier(s) |    Prefix<br>|-|-|<br>.passive |    &amp;<br>.capture|    !<br>.once|    ~<br>.capture.once or .once.capture    | ~!</p><p>例如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">on: &#123;</span><br><span class="line">  <span class="string">'!click'</span>: <span class="keyword">this</span>.doThisInCapturingMode,</span><br><span class="line">  <span class="string">'~keyup'</span>: <span class="keyword">this</span>.doThisOnce,</span><br><span class="line">  <span class="string">'~!mouseover'</span>: <span class="keyword">this</span>.doThisOnceInCapturingMode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于其他的修饰符，前缀不是很重要，因为你可以在事件处理函数中使用事件方法：<br>Modifier(s) |    Equivalent in Handler<br>|-|-|<br>.stop |    event.stopPropagation()<br>.prevent|    event.preventDefault()<br>.self |    if (event.target !== event.currentTarget) return<br>Keys: .enter, .13     | if (event.keyCode !== 13) return (change 13 to another key code for other key modifiers)<br>Modifiers Keys: .ctrl, .alt, .shift, .meta |    if (!event.ctrlKey) return (change ctrlKey to altKey, shiftKey, or metaKey, respectively)<br>这里是一个使用所有修饰符的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">on: &#123;</span><br><span class="line">  keyup: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果触发事件的元素不是事件绑定的元素</span></span><br><span class="line">    <span class="comment">// 则返回</span></span><br><span class="line">    <span class="keyword">if</span> (event.target !== event.currentTarget) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 如果按下去的不是 enter 键或者</span></span><br><span class="line">    <span class="comment">// 没有同时按下 shift 键</span></span><br><span class="line">    <span class="comment">// 则返回</span></span><br><span class="line">    <span class="keyword">if</span> (!event.shiftKey || event.keyCode !== <span class="number">13</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="comment">// 阻止 事件冒泡</span></span><br><span class="line">    event.stopPropagation()</span><br><span class="line">    <span class="comment">// 阻止该元素默认的 keyup 事件</span></span><br><span class="line">    event.preventDefault()</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>你可以通过 this.$slots 访问静态插槽的内容，得到的是一个 VNodes 数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `&lt;div&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'div'</span>, <span class="keyword">this</span>.$slots.default)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>也可以通过 this.$scopedSlots 访问作用域插槽，得到的是一个返回 VNodes 的函<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'message'</span>],</span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `&lt;div&gt;&lt;slot :text="message"&gt;&lt;/slot&gt;&lt;/div&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'div'</span>, [</span><br><span class="line">    <span class="keyword">this</span>.$scopedSlots.default(&#123;</span><br><span class="line">      text: <span class="keyword">this</span>.message</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果要用渲染函数向子组件中传递作用域插槽，可以利用 <code>VNode</code> 数据对象中的 <code>scopedSlots</code> 域：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">'div'</span>, [</span><br><span class="line">    createElement(<span class="string">'child'</span>, &#123;</span><br><span class="line">      <span class="comment">// 在数据对象中传递 `scopedSlots`</span></span><br><span class="line">      <span class="comment">// 格式：&#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">      scopedSlots: &#123;</span><br><span class="line">        <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> createElement(<span class="string">'span'</span>, props.text)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="AST"><a href="#AST" class="headerlink" title="AST"></a><a href="http://www.php.cn/js-tutorial-407382.html" target="_blank" rel="noopener">AST</a></h3><p>AST是指抽象语法树（abstract syntax tree），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式。Vue在mount过程中，template会被编译成AST语法树。<br>然后，经过generate（将AST语法树转化成render function字符串的过程）得到render函数，返回VNode。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>编译相关的代码都在 compiler文件中</p><p>core/instance / render.js 中</p><p>observe - 响应式<br>_ 在js中默认为是定义的私有属性 ，建议不要多次访问 </p><p>(视频2-5， 2-6)<br>platform/util/index.js  判断是否是render 还是template</p><p>new watcher() 渲染 watcher (observer/watcher.js ) </p><p>#</p><p>Vue 的 _render 方法是实例的一个私有方法，它用来把实例渲染成一个虚拟 Node。它的定义在 src/core/instance/render.js 文件中：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再此定义一个render私有方法  返回一个vnode，通过vm.$options拿到render函数</span></span><br><span class="line">Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">const</span> &#123; render, _parentVnode &#125; = vm.$options </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复位_render标志在插槽上用于重复的插槽检查</span></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> vm.$slots) &#123;</span><br><span class="line">      <span class="comment">// $flow-disable-line</span></span><br><span class="line">      vm.$slots[key]._rendered = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (_parentVnode) &#123;</span><br><span class="line">    vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置父vnode。这允许呈现函数访问占位符节点上的数据。</span></span><br><span class="line">  vm.$vnode = _parentVnode</span><br><span class="line">  <span class="comment">// render self</span></span><br><span class="line">  <span class="keyword">let</span> vnode</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//利用call的方法 参数一当前上下文，vm._renderProxy再生产环境下 就是vm，也就是this 本身，开发环境是一个proxy 对象</span></span><br><span class="line">    vnode = render.call(vm._renderProxy, vm.$createElement)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    handleError(e, vm, <span class="string">`render`</span>)</span><br><span class="line">    <span class="comment">// 返回错误呈现结果，</span></span><br><span class="line">    <span class="comment">// 或先前的vnode，以防止呈现错误导致空白组件</span></span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (vm.$options.renderError) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          handleError(e, vm, <span class="string">`renderError`</span>)</span><br><span class="line">          vnode = vm._vnode</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vnode = vm._vnode</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      vnode = vm._vnode</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上边 会返回一个 vnode ， $options 这个函数可以自己写 ，也可以通过编译生成</span></span><br><span class="line">  <span class="comment">// 如果呈现函数出错，返回空vnode</span></span><br><span class="line">  <span class="keyword">if</span> (!(vnode <span class="keyword">instanceof</span> VNode)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; <span class="built_in">Array</span>.isArray(vnode)) &#123;</span><br><span class="line">      warn(</span><br><span class="line">        <span class="string">'Multiple root nodes returned from render function. Render function '</span> +</span><br><span class="line">        <span class="string">'should return a single root node.'</span>,</span><br><span class="line">        vm</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    vnode = createEmptyVNode()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// set parent</span></span><br><span class="line">  vnode.parent = _parentVnode</span><br><span class="line">  <span class="keyword">return</span> vnode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码最关键的是 <code>render</code> 方法的调用，我们在平时的开发工作中手写 <code>render</code> 方法的场景比较少，而写的比较多的是 <code>template</code> 模板，在之前的 mounted 方法的实现中，会把 <code>template</code> 编译成 <code>render</code> 方法，但这个编译过程是非常复杂的，我们不打算在这里展开讲，之后会专门花一个章节来分析 <code>Vue</code> 的编译过程。  </p><p>在 Vue 的官方文档中介绍了 <code>render</code> 函数的第一个参数是 <code>createElement</code>，那么结合之前的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>相当于我们编写如下 <code>render</code> 函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render (createElement) &#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">'div'</span>, &#123;</span><br><span class="line">      attrs: &#123;</span><br><span class="line">        id: <span class="string">'app'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="keyword">this</span>.message)</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> message: <span class="string">'Hello Vue!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>再回到 <code>_render</code> 函数中的 <code>render</code>方法的调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vnode = render.call(vm._renderProxy, vm.$createElement)</span><br></pre></td></tr></table></figure><p>可以看到，<code>render</code> 函数中的 <code>createElement</code> 方法就是 <code>vm.$createElement</code> 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initRender</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">//将createElement fn绑定到这个实例，这样我们就可以在其中获得适当的呈现上下文。</span></span><br><span class="line">  <span class="comment">// args顺序:标签、数据、子元素、normalizationType、alwaysNormalize内部版本由模板编译的呈现函数使用</span></span><br><span class="line">  vm._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">false</span>)</span><br><span class="line">  <span class="comment">//规范化通常应用于公共版本，用于用户编写的呈现函数。</span></span><br><span class="line">  <span class="comment">//手写render函数 创建的方法</span></span><br><span class="line">  vm.$createElement = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实际上，<code>vm.$createElement</code> 方法定义是在执行 <code>initRender</code> 方法的时候，可以看到除了 <code>vm.$createElement</code> 方法，还有一个 <code>vm._c</code> 方法，它是被模板编译成的 <code>render</code> 函数使用，而 <code>vm.$createElement</code> 是用户手写 <code>render</code> 方法使用的， 这俩个方法支持的参数相同，并且内部都调用了 <code>createElement</code> 方法。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>render方法的实质就是生成template模板； </li><li>通过调用一个方法来生成，而这个方法是通过render方法的参数传递给它的； </li><li>这个方法有三个参数，分别提供标签名，标签相关属性，标签内部的html内容 </li><li>通过这三个参数，可以生成一个完整的模板  </li></ol><p>备注：<br>render方法可以使用JSX语法，但需要Babel plugin插件；<br>render方法里的第三个参数可以使用函数来生成多个组件（特别是如果他们相同的话），只要生成结果是一个数组，且数组元素都是VNode即可；  </p><p>注意：<br>render函数室友限制的，Vue.js 2.X支持，但是1.X无法使用。</p><p><code>vm._render</code>最终是通过执行 <code>createElement</code> 方法并返回的是 <code>vnode</code>，它是一个虚拟 <code>Node</code>。Vue 2.0 相比 Vue 1.0 最大的升级就是利用了 <code>Virtual DOM</code>。因此在分析 <code>createElement</code> 的实现前，我们先了解一下 <code>Virtual DOM</code> 的概念。</p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="[参考博客]"></a>[参考博客]</h3><p><a href="https://blog.csdn.net/wngzhem/article/details/54291024" target="_blank" rel="noopener">vue Render函数进阶</a><br><a href="https://www.cnblogs.com/tugenhua0707/p/7528621.html" target="_blank" rel="noopener">理解Vue中的Render渲染函数</a><br><a href="https://blog.csdn.net/weixin_42229553/article/details/80444919" target="_blank" rel="noopener">(一) Vue基础个人总结，条件渲染，列表渲染，组件等</a><br><a href="https://www.jb51.net/article/122424.htm" target="_blank" rel="noopener">如何理解Vue的render函数的具体用法</a><br><a href="https://www.cnblogs.com/leungUwah/p/6921873.html" target="_blank" rel="noopener">Vue2.x中的Render函数</a><br><a href="http://www.alloyteam.com/2017/07/12918/" target="_blank" rel="noopener">用jsx写vue组件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;render&quot;&gt;&lt;a href=&quot;#render&quot; class=&quot;headerlink&quot; title=&quot;render&quot;&gt;&lt;/a&gt;render&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;研究方向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;render机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;研究方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件渲染、列表渲染、update、模板、服务器渲染、渲染性能，如何编译，ast是什么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="render" scheme="http://yoursite.com/tags/render/"/>
    
  </entry>
  
  <entry>
    <title>vue深度学习（2）- 生命周期</title>
    <link href="http://yoursite.com/2018/10/20/vue-lifeCycle-2/"/>
    <id>http://yoursite.com/2018/10/20/vue-lifeCycle-2/</id>
    <published>2018-10-20T15:35:04.000Z</published>
    <updated>2018-10-25T15:28:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue的生命周期方法"><a href="#Vue的生命周期方法" class="headerlink" title="Vue的生命周期方法"></a>Vue的生命周期方法</h3><ul><li><p>研究方向</p><ul><li>hook机制</li></ul></li><li><p>研究方法</p><ul><li>各个hook在哪个阶段触发，为啥会在这个阶段触发？触发这个钩子可以改变什么或者得到什么？</li></ul></li></ul><hr><a id="more"></a><h3 id="钩子函数（Hook）"><a href="#钩子函数（Hook）" class="headerlink" title="钩子函数（Hook）"></a>钩子函数（Hook）</h3><p>钩子是Windows消息处理机制的一个平台,应用程序可以在上面设置子程以监视指定窗口的某种消息；<br>钩子机制允许应用程序截获处理window消息或特定事件，<br>钩子函数可以理解为js运行进程中在其特定段时的回调函数</p><h3 id="什么是生命周期？"><a href="#什么是生命周期？" class="headerlink" title="什么是生命周期？"></a>什么是生命周期？</h3><p>生命周期：Vue 实例从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期，各个阶段有相对应的事件钩子<br><img src="https://github.com/Littlombie/Vue-analysis/blob/master/02-lifeCycle/LifeCycle1.png?raw=true" alt="vue 的生命周期"></p><ul><li>图中 数据观测：</li></ul><p>在new Vue() 时 开始观测数据</p><ul><li><code>init event &amp; lifeCycle</code>:  表示<code>new Vue</code> 后事件和生命周期的<code>init</code></li><li>当<code>created</code>完成之后，它会去判断<code>instance</code>（实例）里面是否含有<code>“el”option</code>（选项），如果没有的话，它会调用<code>vm.$mount(el)</code>这个方法，然后执行下一步；如果有的话，直接执行下一步。紧接着会判断是否含有<code>“template”</code>这个选项，如果有的话，它会把<code>template</code>解析成一个<code>render function</code> ，这是一个<code>template</code>编译的过程，结果是解析成了<code>render</code>函数：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render (h) &#123;</span><br><span class="line">  return h(&apos;div&apos;, &#123;&#125;, this.text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>render</code>函数里面的传参h就是Vue里面的<code>createElement</code>方法，<code>return</code>返回一个<code>createElement</code>方法，其中要传3个参数，第一个参数就是创建的div标签；第二个参数传了一个对象，对象里面可以是我们组件上面的props，或者是事件之类的东西；第三个参数就是div标签里面的内容，这里我们指向了data里面的text。  </p><p>使用render函数的结果和我们之前使用<code>template</code>解析出来的结果是一样的。<code>render</code>函数是发生在<code>beforeMount</code>和<code>mounted</code>之间的，这也从侧面说明了，在<code>beforeMount</code>的时候，<code>$el</code>还只是我们在HTML里面写的节点，然后到<code>mounted</code>的时候，它就把渲染出来的内容挂载到了<code>DOM</code>节点上。这中间的过程其实是执行了<code>render function</code>的内容。    </p><p>在使用<code>.vue</code>文件开发的过程当中，我们在里面写了<code>template</code>模板，在经过了<code>vue-loader</code>的处理之后，就变成了<code>render function</code>，最终放到了<code>vue-loader</code>解析过的文件里面。这样做有什么好处呢？原因是由于在解析<code>template</code>变成<code>render function</code>的过程，是一个非常耗时的过程，<code>vue-loader</code>帮我们处理了这些内容之后，当我们在页面上执行<code>vue</code>代码的时候，效率会变得更高。  </p><p><code>beforeMount</code>在有了<code>render function</code>的时候才会执行，当执行完<code>render function</code>之后，就会调用<code>mounted</code>这个钩子，在<code>mounted</code>挂载完毕之后，这个实例就算是走完流程了。<br>后续的钩子函数执行的过程都是需要外部的触发才会执行。比如说有数据的变化，会调用<code>beforeUpdate</code>，然后经过<code>Virtual DOM</code>，最后<code>updated</code>更新完毕。当组件被销毁的时候，它会调用<code>beforeDestory</code>，以及<code>destoryed</code>。  </p><h3 id="生命周期的钩子-lifecyclehook"><a href="#生命周期的钩子-lifecyclehook" class="headerlink" title="生命周期的钩子 (lifecyclehook)"></a>生命周期的钩子 (lifecyclehook)</h3><p>Vue所有的生命周期钩子自动绑定在this上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法。这是因为箭头函数绑定了父上下文，因此this与你期待的Vue实例不同。</p><table><thead><tr><th>生命周期中的钩子函数</th><th>组建状态</th><th>最佳实践</th></tr></thead><tbody><tr><td>beforeCreate</td><td>实例初始化之后,this指向创建的实例，此时还不能访问到<code>data</code>,<code>computed</code>,<code>watch</code>,<code>methods</code>上的数据和方法</td><td>常用于初始化非响应式变量</td></tr><tr><td>created</td><td>实例创建完成，可以访问到 <code>data</code>,<code>computed</code>,<code>watch</code>,<code>methods</code>上的数据和方法，未挂载到dom 上，不能访问<code>#el</code> 属性， <code>$ref</code>属性d额内容为空数组</td><td>常用语简单的<code>ajax请求</code>,页面的初始化</td></tr><tr><td>beforeMount</td><td>在挂载开始前被调用，<code>beforeMount</code>之前，会找到对应的<code>template</code>，并编译成<code>render</code>函数</td><td>-</td></tr><tr><td>mounted</td><td>实例挂载到DOM上，此时可以通过<code>DOM API</code> 获取到<code>DOM</code> 节点，<code>$ref</code> 属性可以访问</td><td>常用于获取vnode信息和操作，<code>ajax</code>请求</td></tr><tr><td>beforeUpdate</td><td>响应式数据更新时调用，发生在虚拟DOM打补丁之前</td><td>适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器</td></tr><tr><td>updated</td><td>虚拟DOM重新渲染和打补丁之后调用，组件DOM已经更新，可执行依赖于DOM的操作</td><td>避免在这个钩子函数中操作数据，可能陷入死循环</td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。这一步，实力任然完全可用，<code>this</code>仍能获取到实例</td><td>常用于销毁定时器，解绑迁居时间，销毁插件对象等操作</td></tr><tr><td>destroyed</td><td>实力销毁后调用，调用后，Vue实例只是的所有东西都会解绑，所有的事件监听器会被移除，所有的姿势里也会被销毁</td><td>在此也可以用于销毁定时器</td></tr></tbody></table><!-- - beforeCreate:   - 组件状态： 实例初始化之后,this指向创建的实例，此时还不能访问到`data`,`computed`,`watch`,`methods`上的数据和方法  - 最佳实践：常用于初始化非响应式变量- created:  - 组件状态：实例创建完成，可以访问到 `data`,`computed`,`watch`,`methods`上的数据和方法，未挂载到dom 上，不能访问`#el` 属性， `$ref`属性d额内容为空数组  - 最佳实践：常用语简单的`ajax请求`,页面的初始化  - beforeMount:   - 组件状态：在挂载开始前被调用，`beforeMount`之前，会找到对应的`template`，并编译成`render`函数- mounted:  - 组件状态：实例挂载到DOM上，此时可以通过`DOM API` 获取到`DOM` 节点，`$ref` 属性可以访问  - 最佳实践：常用于获取vnode信息和操作，`ajax`请求- beforeUpdate:  - 组件状态：响应式数据更新时调用，发生在虚拟DOM打补丁之前  - 最佳实践：适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器- updated:  - 组件状态：虚拟DOM重新渲染和打补丁之后调用，组件DOM已经更新，可执行依赖于DOM的操作  - 最佳实践：避免在这个钩子函数中操作数据，可能陷入死循环- beforeDestroy:   - 组件状态：实例销毁之前调用。这一步，实力任然完全可用，`this`仍能获取到实例   - 最佳实践：常用于销毁定时器，解绑迁居时间，销毁插件对象等操作- destroyed:  - 组件状态：实力销毁后调用，调用后，Vue实例只是的所有东西都会解绑，所有的事件监听器会被移除，所有的姿势里也会被销毁    - 最佳实践：在此也可以用于销毁定时器， --><p>注：</p><ul><li>created阶段的<code>ajax</code>请求与<code>mounted</code>请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态，此时如果做<code>DOM</code>请求时会报错,页面还没有渲染出来</li><li><p>mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 <a href="https://blog.csdn.net/shuidinaozhongyan/article/details/72630573" target="_blank" rel="noopener"><code>vm.$nextTick</code></a><br>(<a href="https://blog.csdn.net/sinat_17775997/article/details/71638144" target="_blank" rel="noopener">https://blog.csdn.net/sinat_17775997/article/details/71638144</a>)</p></li><li><p><code>beforeCreate</code>，<code>created</code>，<code>beforeMount</code>，<code>mounted</code> 是自动被调用  </p></li><li><p><code>beforeUpdate</code>, <code>updated</code>,<code>beforeDestroy</code>,<code>destroyed</code> 是手动调用  </p></li><li><p>子组件的<code>created</code> 优先于父组件的<code>created</code> 执行， 父组件的<code>beforeCreate</code> 优先于子组件的<code>beforeCreate</code></p></li><li>子组件的<code>mounted</code>优先于父组件的<code>mounted</code>， 父组件的<code>beforeMount</code> 优先于子组件的 <code>beforeMount</code></li><li>子组件的<code>destroyed</code>优先于父组件的<code>beforeDestroy</code>， 父组件的<code>beforeDestroy</code> 优先于子组件的 <code>beforeDestroy</code></li></ul><h4 id="最后还有-两个钩子函数没显示"><a href="#最后还有-两个钩子函数没显示" class="headerlink" title="最后还有 两个钩子函数没显示"></a>最后还有 两个钩子函数没显示</h4><p>activated &amp; deactivated<br>使用<code>&lt;keep-alive&gt;</code>会将数据保留在内存中，如果要在每次进入页面的时候获取最新的数据，需要在activated阶段获取数据，承担原来created钩子中获取数据的任务</p><ul><li>activated： 在组件被激活时调用，在组件第一次渲染时也会被调用，之后每次keep-alive激活时被调用，该钩子在服务器端渲染期间不被调用。</li><li><p>deactivated： keep-alive组件停用时调用。该钩子在服务端渲染期间不被调用。</p><p>组件内的离开当前路由钩子beforeRouteLeave =&gt;  路由前置守卫 beforeEach =&gt;<br>  全局后置钩子afterEach =&gt; deactivated 离开缓存组件 =&gt; activated 进入缓存组件(如果你进入的也是缓存路由)<br>  // 如果离开的组件没有缓存的话 beforeDestroy会替换deactivated<br>  // 如果进入的路由也没有缓存的话  全局后置钩子afterEach=&gt;销毁 destroyed=&gt; beforeCreate等</p></li></ul><h3 id="路由导航守卫"><a href="#路由导航守卫" class="headerlink" title="路由导航守卫"></a>路由导航守卫</h3><p><a href="https://juejin.im/post/5b41bdef6fb9a04fe63765f1" target="_blank" rel="noopener">Vue的钩子函数 [路由导航守卫、keep-alive、生命周期钩子]</a></p><p>实例demo：<br> 见<a href="https://github.com/Littlombie/Vue-analysis/tree/master/02-lifeCycle/template" target="_blank" rel="noopener"><code>template</code></a><br><!-- ![](https://files.jb51.net/file_images/article/201709/2017927151335093.png?2017827151357) --></p><h3 id="遗留问题："><a href="#遗留问题：" class="headerlink" title="遗留问题："></a>遗留问题：</h3><ul><li><p>兄弟组件通过bus传值时的updated，beforeUpdate 生命周期顺序<br>如果是通过父级派发更新事件时，beforeUpdate，和updated的顺序 都是自上到下正常顺序进行；<br>如果是兄弟组件的派发顺序是beforeUpdate是从上到下，updated 的顺序是从下到上的更新顺序</p></li><li><p>beforeCreate 有什么具体实际的用处，例举<br>vue生命周期中 beforeCreate 是实例初始化完成后数据观测（data observer）和event/watcher之前被调用。 </p><p>在beforeCreate前，所有的options都会先存到vm.$options中，在beforeCreate之后，将$options里的data啦，props啦，methods啦等等一个个附到vm上，然后再触发created钩子。所以在beforeCreate的时候，通过this.message是拿不到值的，在created的时候就能通过this.message拿到值了。</p><p>一定要在beforeCreate的时候就同步去拿data里的值的话，就是直接从this.$options.data里去拿。如果data中的初始值是简单的string，那直接this.$options.data()[“message”]就好.涉及到复杂点的情况，建议看看源码里是怎么处理的，具体在core/instance/state.js中的initData(vm)里。<br>还有一种方法 可以使用nextTick()，相当于做个延迟，等页面挂载完后在执行<br>使用promise</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> F = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            dataList:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate() &#123;</span><br><span class="line">        F = fetchData(<span class="comment">//fetchData是取数方法</span></span><br><span class="line">            <span class="comment">//...返回promise</span></span><br><span class="line">        )</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        F.then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.dataList = data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本人理解其中原因就是一个实例初始化后的提示功能，表示此后要开始</p></li></ul><p>参考文档：<br><a href="https://juejin.im/post/5ad10800f265da23826e681e?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">如何解释vue的生命周期才能令面试官满意？</a><br><a href="http://blog.poetries.top/2018/08/26/vue-lifecircle/?utm_medium=hao.caibaojian.com&amp;utm_source=hao.caibaojian.com" target="_blank" rel="noopener">vue生命周期（五）</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651555022&amp;idx=1&amp;sn=552856ad4af7bb9560217f6deec65270&amp;chksm=8025530fb752da190830e52ca6a9b24d1e7440e1d6cccbfff6355f7583d4f4749400e541739e" target="_blank" rel="noopener">深入 Vue 生命周期</a><br><a href="https://segmentfault.com/a/1190000008771768?_ea=1739750" target="_blank" rel="noopener">Vue 实例中的生命周期钩子详解</a><br><a href="https://www.cnblogs.com/locim/p/8892738.html" target="_blank" rel="noopener">Vue.js源码解读</a><br><a href="http://blog.51cto.com/9195095/1963227" target="_blank" rel="noopener">生命周期</a><br><a href="https://juejin.im/post/5b41bdef6fb9a04fe63765f1" target="_blank" rel="noopener">Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]</a><br><a href="https://blog.csdn.net/xdnloveme/article/details/78035065" target="_blank" rel="noopener">Vue生命周期中mounted和created的区别</a><br><a href="https://www.jb51.net/article/124737.htm" target="_blank" rel="noopener">深入理解Vue生命周期、手动挂载及挂载子组件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Vue的生命周期方法&quot;&gt;&lt;a href=&quot;#Vue的生命周期方法&quot; class=&quot;headerlink&quot; title=&quot;Vue的生命周期方法&quot;&gt;&lt;/a&gt;Vue的生命周期方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;研究方向&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hook机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;研究方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;各个hook在哪个阶段触发，为啥会在这个阶段触发？触发这个钩子可以改变什么或者得到什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议认识</title>
    <link href="http://yoursite.com/2018/09/05/The-HTTP-protocol/"/>
    <id>http://yoursite.com/2018/09/05/The-HTTP-protocol/</id>
    <published>2018-09-05T15:18:24.000Z</published>
    <updated>2018-09-05T15:34:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>http请求由三部分组成，分别是：<code>请求行</code>、<code>消息报头</code>、<code>请求正文</code></p><p>HTTP（超文本传输协议）是一个基于<code>请求与响应</code>模式的、<code>无状态的</code>、<code>应用层的协议</code>，常<code>基于TC</code>P的连接方式，HTTP1.1版本中给出一种持续连接的机制，绝大多数的Web开发，都是构建在HTTP协议之上的Web应用。</p><h3 id="常用的HTTP方法有哪些？"><a href="#常用的HTTP方法有哪些？" class="headerlink" title="常用的HTTP方法有哪些？"></a>常用的HTTP方法有哪些？</h3><p><code>GET、POST、PUT、HEAD、DELETE、OPTIONS</code><br><a id="more"></a></p><ul><li><code>GET</code>： 用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器。</li><li><code>POST</code>：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。</li><li><code>PUT</code>： 传输文件，报文主体中包含文件内容，保存到对应URI位置。</li><li><code>HEAD</code>： 获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有效。</li><li><code>DELETE</code>：删除文件，与PUT方法相反，删除对应URI位置的文件。</li><li><code>OPTIONS</code>：查询相应URI支持的HTTP方法。</li></ul><h3 id="GET方法与POST方法的区别"><a href="#GET方法与POST方法的区别" class="headerlink" title="GET方法与POST方法的区别"></a>GET方法与POST方法的区别</h3><p>1、get重点在从服务器上获取资源，post重点在向服务器发送数据；<br>2、get传输数据是通过URL请求，以field（字段）= value的形式，置于URL后，并用”?”连接，多个请求数据间用”&amp;”连接，如<a href="http://127.0.0.1/Test/login.action?name=admin&amp;password=admin，这个过程用户是可见的；post传输数据通过Http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的；" target="_blank" rel="noopener">http://127.0.0.1/Test/login.action?name=admin&amp;password=admin，这个过程用户是可见的；post传输数据通过Http的post机制，将字段与对应值封存在请求实体中发送给服务器，这个过程对用户是不可见的；</a><br>3、Get传输的数据量小，因为受URL长度限制，但效率较高；Post可以传输大量数据，所以上传文件时只能用Post方式<br>4、get是不安全的，因为URL是可见的，可能会泄露私密信息，如密码等；post较get安全性较高<br>5、get方式只能支持ASCII字符，向服务器传的中文字符可能会乱码；post支持标准字符集，可以正确传递中文字符</p><h3 id="HTTP请求报文与响应报文格式"><a href="#HTTP请求报文与响应报文格式" class="headerlink" title="HTTP请求报文与响应报文格式"></a>HTTP请求报文与响应报文格式</h3><p>请求报文包含三部分：<br><strong>a</strong>、请求行：包含请求方法、URI、HTTP版本信息<br><strong>b</strong>、请求首部字段<br><strong>c</strong>、请求内容实体  </p><p>响应报文包含三部分：<br><strong>a</strong>、状态行：包含HTTP版本、状态码、状态码的原因短语<br><strong>b</strong>、响应首部字段<br><strong>c</strong>、响应内容实体  </p><h3 id="常见的HTTP相应状态码"><a href="#常见的HTTP相应状态码" class="headerlink" title="常见的HTTP相应状态码"></a>常见的HTTP相应状态码</h3><p>返回的状态  </p><ul><li><code>1xx</code>：指示信息–表示请求已接收，继续处理  </li><li><code>2xx</code>：成功–表示请求已被成功接收、理解、接受  </li><li><code>3xx</code>：重定向–要完成请求必须进行更进一步的操作  </li><li><code>4xx</code>：客户端错误–请求有语法错误或请求无法实现  </li><li><code>5xx</code>：服务器端错误–服务器未能实现合法的请求  </li><li><code>200</code>：请求被正常处理  </li><li><code>204</code>：请求被受理但没有资源可以返回  </li><li><code>206</code>：客户端只是请求资源的一部分，服务器只对请求的部分资源执行GET方法，相应报文中通过Content-Range指定范围的资源。  </li><li><code>301</code>：永久性重定向  </li><li><code>302</code>：临时重定向  </li><li><code>303</code>：与302状态码有相似功能，只是它希望客户端在请求一个URI的时候，能通过GET方法重定向到另一个URI上  </li><li><code>304</code>：发送附带条件的请求时，条件不满足时返回，与重定向无关  </li><li><code>307</code>：临时重定向，与302类似，只是强制要求使用POST方法  </li><li><code>400</code>：请求报文语法有误，服务器无法识别  </li><li><code>401</code>：请求需要认证  </li><li><code>403</code>：请求的对应资源禁止被访问  </li><li><code>404</code>：服务器无法找到对应资源  </li><li><code>500</code>：服务器内部错误  </li><li><code>503</code>：服务器正忙  </li></ul><h3 id="HTTP1-1版本新特性"><a href="#HTTP1-1版本新特性" class="headerlink" title="HTTP1.1版本新特性"></a>HTTP1.1版本新特性</h3><p>a、默认持久连接节省通信量，只要客户端服务端任意一端没有明确提出断开TCP连接，就一直保持连接，可以发送多次HTTP请求</p><p>b、管线化，客户端可以同时发出多个HTTP请求，而不用一个个等待响应</p><p>c、断点续传原理</p><h3 id="常见HTTP首部字段"><a href="#常见HTTP首部字段" class="headerlink" title="常见HTTP首部字段"></a>常见HTTP首部字段</h3><p><strong>a</strong>、通用首部字段（请求报文与响应报文都会使用的首部字段） </p><ul><li><code>Date</code>：创建报文时间  </li><li><code>Connection</code>：连接的管理  </li><li><code>Cache-Control</code>：缓存的控制  </li><li><code>Transfer-Encoding</code>：报文主体的传输编码方式  </li></ul><p><strong>b</strong>、请求首部字段（请求报文会使用的首部字段） </p><ul><li><code>Host</code>：请求资源所在服务器  </li><li><code>Accept</code>：可处理的媒体类型  </li><li><code>Accept-Charset</code>：可接收的字符集  </li><li><code>Accept-Encoding</code>：可接受的内容编码  </li><li><code>Accept-Language</code>：可接受的自然语言  </li></ul><p><strong>c</strong>、响应首部字段（响应报文会使用的首部字段）  </p><ul><li><code>Accept-Ranges</code>：可接受的字节范围  </li><li><code>Location</code>：令客户端重新定向到的URI  </li><li><code>Server</code>：HTTP服务器的安装信息  </li></ul><p><strong>d</strong>、实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）  </p><ul><li><code>Allow</code>：资源可支持的HTTP方法  </li><li><code>Content-Type</code>：实体主类的类型  </li><li><code>Content-Encoding</code>：实体主体适用的编码方式  </li><li><code>Content-Language</code>：实体主体的自然语言  </li><li><code>Content-Length</code>：实体主体的的字节数  </li><li><code>Content-Range</code>：实体主体的位置范围，一般用于发出部分请求时使用  </li></ul><h3 id="HTTP的缺点与HTTPS"><a href="#HTTP的缺点与HTTPS" class="headerlink" title="HTTP的缺点与HTTPS"></a>HTTP的缺点与HTTPS</h3><p><strong>a</strong>、通信使用明文不加密，内容可能被窃听<br><strong>b</strong>、不验证通信方身份，可能遭到伪装<br><strong>c</strong>、无法验证报文完整性，可能被篡改  </p><p>HTTPS就是HTTP加上SSL加密处理（一般是SSL安全通信线路）+认证+完整性保护</p><h3 id="HTTP优化"><a href="#HTTP优化" class="headerlink" title="HTTP优化"></a>HTTP优化</h3><p>利用负载均衡优化和加速HTTP应用  </p><p>利用HTTP Cache来优化网站  </p><h6 id="文章摘自HTTP协议【详解】——经典面试题"><a href="#文章摘自HTTP协议【详解】——经典面试题" class="headerlink" title="文章摘自HTTP协议【详解】——经典面试题"></a>文章摘自<a href="https://www.cnblogs.com/sunny-sl/p/6529830.html" target="_blank" rel="noopener">HTTP协议【详解】——经典面试题</a></h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;http请求由三部分组成，分别是：&lt;code&gt;请求行&lt;/code&gt;、&lt;code&gt;消息报头&lt;/code&gt;、&lt;code&gt;请求正文&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;HTTP（超文本传输协议）是一个基于&lt;code&gt;请求与响应&lt;/code&gt;模式的、&lt;code&gt;无状态的&lt;/code&gt;、&lt;code&gt;应用层的协议&lt;/code&gt;，常&lt;code&gt;基于TC&lt;/code&gt;P的连接方式，HTTP1.1版本中给出一种持续连接的机制，绝大多数的Web开发，都是构建在HTTP协议之上的Web应用。&lt;/p&gt;
&lt;h3 id=&quot;常用的HTTP方法有哪些？&quot;&gt;&lt;a href=&quot;#常用的HTTP方法有哪些？&quot; class=&quot;headerlink&quot; title=&quot;常用的HTTP方法有哪些？&quot;&gt;&lt;/a&gt;常用的HTTP方法有哪些？&lt;/h3&gt;&lt;p&gt;&lt;code&gt;GET、POST、PUT、HEAD、DELETE、OPTIONS&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>关于跨域的一些理解</title>
    <link href="http://yoursite.com/2018/09/05/Cross-domain/"/>
    <id>http://yoursite.com/2018/09/05/Cross-domain/</id>
    <published>2018-09-05T14:41:55.000Z</published>
    <updated>2018-09-05T15:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><h4 id="跨域"><a href="#跨域" class="headerlink" title="跨域:"></a>跨域:</h4><p>浏览器对于javascript的同源策略的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据(因为a.cn和b.cn是不同域),所以跨域就出现了.<br>上面提到的,同域的概念又是什么呢??? 简单的解释就是相同域名,端口相同,协议相同</p><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略:"></a>同源策略:</h4><p>请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同.<br>比如:我在本地上的域名是xxx.cn,请求另外一个域名一段数据<br>这个时候在浏览器上会报错:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to load http:/xxx.cn/: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://sss.com&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure><p>这个就是同源策略的保护,如果浏览器对javascript没有同源策略的保护,那么一些重要的机密网站将会很危险~</p><table><thead><tr><th>xxx.cn/json/jsonp/jsonp.html</th><th style="text-align:right"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td>请求地址</td><td style="text-align:right">形式</td><td style="text-align:center">结果</td></tr><tr><td><a href="http://xxx.cn/test/a.html" target="_blank" rel="noopener">http://xxx.cn/test/a.html</a></td><td style="text-align:right">同一域名,不同文件夹</td><td style="text-align:center">成功</td></tr><tr><td><a href="http://xxx.cn/json/jsonp/jsonp.html" target="_blank" rel="noopener">http://xxx.cn/json/jsonp/jsonp.html</a></td><td style="text-align:right">同一域名,统一文件夹</td><td style="text-align:center">成功</td></tr><tr><td><a href="http://a.xxx.cn/json/jsonp/jsonp.html" target="_blank" rel="noopener">http://a.xxx.cn/json/jsonp/jsonp.html</a></td><td style="text-align:right">不同域名,文件路径相同</td><td style="text-align:center">失败</td></tr><tr><td><a href="http://xxx.cn:8080/json/jsonp/jsonp.html" target="_blank" rel="noopener">http://xxx.cn:8080/json/jsonp/jsonp.html</a></td><td style="text-align:right">同一域名,不同端口</td><td style="text-align:center">失败</td></tr><tr><td><a href="https://xxx.cn/json/jsonp/jsonp.html" target="_blank" rel="noopener">https://xxx.cn/json/jsonp/jsonp.html</a></td><td style="text-align:right">同一域名,不同协议</td><td style="text-align:center">失败</td></tr></tbody></table><h4 id="JS跨域"><a href="#JS跨域" class="headerlink" title="JS跨域"></a>JS跨域</h4><p>这里所说的JS跨域，指的是在处理跨域请求的过程中，技术面会偏浏览器端较多一些，一般是利用浏览器的一些特性进行hack处理，从而避开同源策略的限制。</p><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>由于同源策略不会阻止动态脚本的插入到文档中去，所以催生出了一种很常用的跨域方式： JSONP(JSON with Padding)。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>创建三个文件</p><p><code>server.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">http.createServer(function (request,response) &#123;</span><br><span class="line">  console.log(&apos;request come&apos;, request.url);</span><br><span class="line">  </span><br><span class="line">  const html = fs.readFileSync(&apos;test.html&apos;,&apos;utf8&apos;);</span><br><span class="line">  // response.writeHead(200, &#123;</span><br><span class="line">  //   &apos;Content-Type&apos;: &apos;test/html&apos;</span><br><span class="line">  // &#125;);</span><br><span class="line">  response.end(html);</span><br><span class="line">&#125;).listen(8888);</span><br><span class="line"></span><br><span class="line">console.log (&apos;server listening on http://localhost:8888&apos;);</span><br></pre></td></tr></table></figure></p><p><code>server2.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">http.createServer(function (request,response) &#123;</span><br><span class="line">  console.log(&apos;request come&apos;, request.url);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;).listen(8887);</span><br><span class="line"></span><br><span class="line">console.log (&apos;server listening on http://localhost:8887&apos;);</span><br></pre></td></tr></table></figure></p><p><code>test.html</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;title&gt;Page Title&lt;/title&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    ppppp</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var xhr = new XMLHttpRequest();</span><br><span class="line">    xhr.open(&apos;GET&apos;,&apos;http://127.0.0.1:8887/&apos;);</span><br><span class="line">    xhr.send();</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>同时启动 <code>server.js</code> <code>server2.js</code> 服务</p><p>然后按照上面代码 使用 <code>server.js</code> 启动 <code>test.html</code> 页面  但是 <code>test.htm</code>页面 发送一个<code>http请求</code> 请求的 服务器为端口<code>8887</code> ,也就是 <code>server2.js</code> 服务  </p><p> 此时页面上会提示 跨域<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to load http://127.0.0.1:8887/: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://localhost:8888&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure></p><p>我们的解决方法就是</p><ul><li>在server2.js 页面 http.createServer 的装添加一下页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response.writeHead(200, &#123;</span><br><span class="line">   &apos;Access-Control-Allow-Origin&apos;: &apos;*&apos;</span><br><span class="line"> &#125;)</span><br><span class="line"> response.end(&apos;123&apos;);</span><br></pre></td></tr></table></figure></li></ul><p>上边的 <code>&#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;</code> 表示 允许跨域的 域名 ，<code>*</code>表示 允许一切url的跨域 ，如果只是允许 某个网站访问数据 就可以直接 写网站域名 </p><ul><li>使用jsonp的方式解决跨域</li></ul><p>在HTML添加标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;http://localhost:8887&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>这样同样 可以请求到页面的数据</p><p>所以 jsonp 的实现原理， 就是 把请求的数据以标签请求资源的方式请求 ，浏览器对资源请求不会做限制 ，就可以请求到数据</p><h3 id="CORS跨域限制以及预请求验证"><a href="#CORS跨域限制以及预请求验证" class="headerlink" title="CORS跨域限制以及预请求验证"></a>CORS跨域限制以及预请求验证</h3><p>cors 预请求</p><h4 id="允许的方法-（method）"><a href="#允许的方法-（method）" class="headerlink" title="允许的方法 （method）"></a>允许的方法 （method）</h4><p>GET HEAD POST 不需要预请求验证</p><h4 id="允许的-Content-Type"><a href="#允许的-Content-Type" class="headerlink" title="允许的 Content-Type"></a>允许的 Content-Type</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text/plan  </span><br><span class="line">multipar/form-data    </span><br><span class="line">application、x-www-form-urlencoded</span><br></pre></td></tr></table></figure><p>以上是在form表单做element请求的时候 允许的类型</p><h4 id="其他限制"><a href="#其他限制" class="headerlink" title="其他限制"></a>其他限制</h4><h5 id="请求头限制"><a href="#请求头限制" class="headerlink" title="请求头限制"></a>请求头限制</h5><p>网页 <a href="https://fetch.spec.whatwg.org/#cors-safelisted-request-header" target="_blank" rel="noopener">https://fetch.spec.whatwg.org/#cors-safelisted-request-header</a></p><h5 id="xmlHttpRequestUpload-对象均没有注册任何时间监听器"><a href="#xmlHttpRequestUpload-对象均没有注册任何时间监听器" class="headerlink" title="xmlHttpRequestUpload 对象均没有注册任何时间监听器"></a>xmlHttpRequestUpload 对象均没有注册任何时间监听器</h5><h5 id="请求中没有使用ReadableStream对象"><a href="#请求中没有使用ReadableStream对象" class="headerlink" title="请求中没有使用ReadableStream对象"></a>请求中没有使用ReadableStream对象</h5><p>如果以上都允许 服务区改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response.writeHead(200, &#123;</span><br><span class="line">    &apos;Access-Control-Allow-Origin&apos;: &apos;*&apos;,</span><br><span class="line">    &apos;Access-Control-Allow-Headers&apos;: &apos;x-Test-Cors&apos;, //允许的请求头部</span><br><span class="line">    &apos;Access-Control-Allow-Methods&apos;: &apos;Delete,PUT,POST&apos;,//允许的请求方法</span><br><span class="line">    &apos;Access-Control-Max-Age&apos;: &apos;1000&apos; //表示多长时间内不做验证 可以直接请求数据</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="http报文格式"><a href="#http报文格式" class="headerlink" title="http报文格式"></a>http报文格式</h3><h4 id="http方法"><a href="#http方法" class="headerlink" title="http方法"></a>http方法</h4><p>是用来定义对资源的操作  </p><ul><li>get： 获取数据</li><li>post: 创建数据</li><li>put: 更新数据</li><li>delete： 删除数据</li></ul><p>最常用的事 post、get</p><h4 id="http-code"><a href="#http-code" class="headerlink" title="http code"></a>http code</h4><p>定义服务器队请求的处理结果</p><p>各个区间的code有个字的语义</p><ul><li>200 - 299 代表这个操作成功的</li><li>300 - 399 代表这个操作重定向的，用别的方式获取这个数据</li><li>400 - 499 发送的请求有问题</li><li>500 - 599 服务器的错误 </li></ul><p>好的http服务可以通过 code直接判断结果</p><h3 id="可缓存性"><a href="#可缓存性" class="headerlink" title="可缓存性"></a>可缓存性</h3><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><p>http请求返回过程中 </p><h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><h4 id="no-cache"><a href="#no-cache" class="headerlink" title="no-cache"></a>no-cache</h4><p>表示虽然可以缓存 ，但是下次请求还是要服务器验证</p><p>设置缓存时长 </p><p>可以在加载一个js的时候 设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;Content-Type&apos;:&apos;text/javascript&apos;,</span><br><span class="line">&apos;Cache-Control&apos;: &apos;max-age=200, public&apos;,</span><br></pre></td></tr></table></figure></p><p>这样的设置后 第二次加载页面时  如果在设置的事件内，会直接加载缓存中的文件<br>解决方法 就是在 js后边添加hash值 每次刷新都会改变hash值 所以就会重新加载页面</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是跨域&quot;&gt;&lt;a href=&quot;#什么是跨域&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域&quot;&gt;&lt;/a&gt;什么是跨域&lt;/h3&gt;&lt;h4 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域:&quot;&gt;&lt;/a&gt;跨域:&lt;/h4&gt;&lt;p&gt;浏览器对于javascript的同源策略的限制,例如a.cn下面的js不能调用b.cn中的js,对象或数据(因为a.cn和b.cn是不同域),所以跨域就出现了.&lt;br&gt;上面提到的,同域的概念又是什么呢??? 简单的解释就是相同域名,端口相同,协议相同&lt;/p&gt;
&lt;h4 id=&quot;同源策略&quot;&gt;&lt;a href=&quot;#同源策略&quot; class=&quot;headerlink&quot; title=&quot;同源策略:&quot;&gt;&lt;/a&gt;同源策略:&lt;/h4&gt;&lt;p&gt;请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同.&lt;br&gt;比如:我在本地上的域名是xxx.cn,请求另外一个域名一段数据&lt;br&gt;这个时候在浏览器上会报错:&lt;/p&gt;
    
    </summary>
    
      <category term="http" scheme="http://yoursite.com/categories/http/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="cross" scheme="http://yoursite.com/tags/cross/"/>
    
  </entry>
  
  <entry>
    <title>移动端常见技巧汇总</title>
    <link href="http://yoursite.com/2018/06/03/Mobile-terminal-skills/"/>
    <id>http://yoursite.com/2018/06/03/Mobile-terminal-skills/</id>
    <published>2018-06-03T15:07:35.000Z</published>
    <updated>2018-06-03T15:21:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文是摘录整理了移动端常见的一些bug以及解决方案，第一篇，后面还会有持续的文章更新整理。</p><h4 id="点击样式闪动"><a href="#点击样式闪动" class="headerlink" title="点击样式闪动"></a>点击样式闪动</h4><p> Q:  当你点击一个链接或者通过Javascript定义的可点击元素的时候，它就会出现一个半透明的灰色背景。<br>A:根本原因是<code>-webkit-tap-highlight-color</code>，这个属性是用于设定元素在移动设备（如Adnroid、iOS）上被触发点击事件时，响应的背景框的颜色。建议写在样式初始化中以避免所以问题：<br><code>div,input(selector) {-webkit-tap-highlight-color: rgba(0,0,0,0);}</code><br>另外出现蓝色边框：<code>outline:none；</code></p><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-tap-highlight-color</span> : <span class="selector-tag">rgba</span> (255, 255, 255, 0) ;</span><br><span class="line">// i.e . Nexus5/Chrome and Kindle Fire HD 7 ''</span><br><span class="line"><span class="selector-tag">-webkit-tap-highlight-color</span> : <span class="selector-tag">transparent</span> ;</span><br></pre></td></tr></table></figure><h4 id="屏蔽用户选择"><a href="#屏蔽用户选择" class="headerlink" title="屏蔽用户选择"></a>屏蔽用户选择</h4><p>Q: 禁止用户选择页面中的文字或者图片<br>A:代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-touch-callout</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="selector-tag">-webkit-user-select</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="selector-tag">-khtml-user-select</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="selector-tag">-moz-user-select</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="selector-tag">-ms-user-select</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="selector-tag">user-select</span>: <span class="selector-tag">none</span>;</span><br></pre></td></tr></table></figure></p><h4 id="移动端如何清除输入框内阴影"><a href="#移动端如何清除输入框内阴影" class="headerlink" title="移动端如何清除输入框内阴影"></a>移动端如何清除输入框内阴影</h4><p>Q: 在iOS上，输入框默认有内部阴影，但无法使用 box-shadow 来清除，如果不需要阴影，可以这样关闭：<br>A:代码如下<br><code>-webkit-appearance: none;</code>  </p><h4 id="禁止文本缩放"><a href="#禁止文本缩放" class="headerlink" title="禁止文本缩放"></a>禁止文本缩放</h4><p>Q: 禁止文本缩放<br>A:代码如下<br><code>-webkit-text-size-adjust: 100%;</code>  </p><h4 id="如何禁止保存或拷贝图像"><a href="#如何禁止保存或拷贝图像" class="headerlink" title="如何禁止保存或拷贝图像"></a>如何禁止保存或拷贝图像</h4><p>Q: 如何禁止保存或拷贝图像<br>A:代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">  <span class="attribute">-webkit-touch-callout</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="解决字体在移动端比例缩小后出现锯齿的问题"><a href="#解决字体在移动端比例缩小后出现锯齿的问题" class="headerlink" title="解决字体在移动端比例缩小后出现锯齿的问题"></a>解决字体在移动端比例缩小后出现锯齿的问题</h4><p>Q: 解决字体在移动端比例缩小后出现锯齿的问题<br>A:代码如下<br><code>-webkit-font-smoothing: antialiased;</code></p><p>####设置input里面placeholder字体的大小<br>Q: 设置input里面placeholder字体的大小<br>A:代码如下<br><code>::-webkit-input-placeholder{ font-size:10pt;}</code>  </p><h4 id="audio元素和video元素在ios和andriod中无法自动播放"><a href="#audio元素和video元素在ios和andriod中无法自动播放" class="headerlink" title="audio元素和video元素在ios和andriod中无法自动播放"></a>audio元素和video元素在ios和andriod中无法自动播放</h4><p>Q: audio元素和video元素在ios和andriod中无法自动播放<br>A:代码如下,触屏及播放<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'html'</span>).one(<span class="string">'touchstart'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  audio.play()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="手机拍照和上传图片"><a href="#手机拍照和上传图片" class="headerlink" title="手机拍照和上传图片"></a>手机拍照和上传图片</h4><p>Q: 针对file类型增加不同的accept字段<br>A:代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span>  //的accept 属性  </span><br><span class="line"><span class="comment">&lt;!-- 选择照片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 选择视频 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">file</span> <span class="attr">accept</span>=<span class="string">"video/*"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="输入框自动填充颜色"><a href="#输入框自动填充颜色" class="headerlink" title="输入框自动填充颜色"></a>输入框自动填充颜色</h4><p>Q: 针对input标签已经输入过的，会针对曾经输入的内容填充黄色背景，这是<code>webkit</code>内核自动添加的，对应的属性是<code>autocomplete</code>,默认是<code>on</code>,另对应的样式是<code>input:-webkit-autofill</code> 且是不可更改的。<br><img src="https://user-gold-cdn.xitu.io/2018/5/14/1635d09709567830?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt><br>A:方案如下  </p><ul><li>1 设置标签的autocomplete=”off”,亲测无效可能</li><li>2 设置盒子的内阴影为你常态的颜色（下面以白色为例）  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span><span class="selector-pseudo">:0</span> 0  0 1000<span class="selector-tag">px</span>  <span class="selector-id">#fff</span> <span class="selector-tag">inset</span> ;</span><br><span class="line"><span class="selector-tag">-webkit-box-shadow</span>: 0 0 0<span class="selector-tag">px</span> 1000<span class="selector-tag">px</span> <span class="selector-id">#fff</span> <span class="selector-tag">inset</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="开启硬件加速"><a href="#开启硬件加速" class="headerlink" title="开启硬件加速"></a>开启硬件加速</h4><p>Q: 优化渲染性能<br>A:代码如下<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">translate3d</span>(0, 0, 0);</span><br><span class="line"><span class="selector-tag">-moz-transform</span>: <span class="selector-tag">translate3d</span>(0, 0, 0);</span><br><span class="line"><span class="selector-tag">-ms-transform</span>: <span class="selector-tag">translate3d</span>(0, 0, 0);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate3d</span>(0, 0, 0);</span><br></pre></td></tr></table></figure></p><h4 id="用户设置字号放大或者缩小导致页面布局错误"><a href="#用户设置字号放大或者缩小导致页面布局错误" class="headerlink" title="用户设置字号放大或者缩小导致页面布局错误"></a>用户设置字号放大或者缩小导致页面布局错误</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-tag">body</span>&#123;  </span><br><span class="line">  <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span> <span class="meta">!important</span>;  </span><br><span class="line">  <span class="attribute">text-size-adjust</span>: <span class="number">100%</span> <span class="meta">!important</span>;  </span><br><span class="line">  <span class="attribute">-moz-text-size-adjust</span>: <span class="number">100%</span> <span class="meta">!important</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="移动端去除type为number的箭头"><a href="#移动端去除type为number的箭头" class="headerlink" title="移动端去除type为number的箭头"></a>移动端去除type为number的箭头</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-outer-spin-button</span>,<span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-inner-spin-button</span>&#123;</span><br><span class="line">     <span class="attribute">-webkit-appearance</span>: none <span class="meta">!important</span>;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span>; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="实现横屏竖屏的方案"><a href="#实现横屏竖屏的方案" class="headerlink" title="实现横屏竖屏的方案"></a>实现横屏竖屏的方案</h4><p>css 用 css3媒体查询，缺点是宽度和高度不好控制<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (orientation: portrait) &#123;</span><br><span class="line">    <span class="selector-class">.main</span> &#123;</span><br><span class="line">        <span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(-90deg);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(-90deg);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(-90deg);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-90deg);</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100vh</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">        <span class="comment">/*去掉overflow 微信显示正常，但是浏览器有问题，竖屏时强制横屏缩小*/</span></span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (orientation: landscape) &#123;</span><br><span class="line">    <span class="selector-class">.main</span> &#123;</span><br><span class="line">        <span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(0);</span><br><span class="line">        <span class="attribute">-moz-transform</span>: <span class="built_in">rotate</span>(0);</span><br><span class="line">        <span class="attribute">-ms-transform</span>: <span class="built_in">rotate</span>(0);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="js-判断屏幕的方向或者resize事件"><a href="#js-判断屏幕的方向或者resize事件" class="headerlink" title="js 判断屏幕的方向或者resize事件"></a>js 判断屏幕的方向或者resize事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> evt = <span class="string">"onorientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span> : <span class="string">"resize"</span>;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(evt, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> width = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">       <span class="keyword">var</span> height =  <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">        $print =  $(<span class="string">'#print'</span>);</span><br><span class="line">       <span class="keyword">if</span>( width &gt; height )&#123;</span><br><span class="line"></span><br><span class="line">          $print.width(width);</span><br><span class="line">          $print.height(height);</span><br><span class="line">          $print.css(<span class="string">'top'</span>,  <span class="number">0</span> );</span><br><span class="line">          $print.css(<span class="string">'left'</span>,  <span class="number">0</span> );</span><br><span class="line">          $print.css(<span class="string">'transform'</span> , <span class="string">'none'</span>);</span><br><span class="line">          $print.css(<span class="string">'transform-origin'</span> , <span class="string">'50% 50%'</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">          $print.width(height);</span><br><span class="line">          $print.height(width);</span><br><span class="line">          $print.css(<span class="string">'top'</span>,  (height-width)/<span class="number">2</span> );</span><br><span class="line">          $print.css(<span class="string">'left'</span>,  <span class="number">0</span>-(height-width)/<span class="number">2</span> );</span><br><span class="line">          $print.css(<span class="string">'transform'</span> , <span class="string">'rotate(90deg)'</span>);</span><br><span class="line">          $print.css(<span class="string">'transform-origin'</span> , <span class="string">'50% 50%'</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">  &#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>作者：RobinsonZhang<br>链接：<a href="https://juejin.im/post/5af918636fb9a07ac5603ecb" target="_blank" rel="noopener">https://juejin.im/post/5af918636fb9a07ac5603ecb</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文是摘录整理了移动端常见的一些bug以及解决方案，第一篇，后面还会有持续的文章更新整理。&lt;/p&gt;
&lt;h4 id=&quot;点击样式闪动&quot;&gt;&lt;a href=&quot;#点击样式闪动&quot; class=&quot;headerlink&quot; title=&quot;点击样式闪动&quot;&gt;&lt;/a&gt;点击样式闪动&lt;/h4&gt;&lt;p&gt; Q:  当你点击一个链接或者通过Javascript定义的可点击元素的时候，它就会出现一个半透明的灰色背景。&lt;br&gt;A:根本原因是&lt;code&gt;-webkit-tap-highlight-color&lt;/code&gt;，这个属性是用于设定元素在移动设备（如Adnroid、iOS）上被触发点击事件时，响应的背景框的颜色。建议写在样式初始化中以避免所以问题：&lt;br&gt;&lt;code&gt;div,input(selector) {-webkit-tap-highlight-color: rgba(0,0,0,0);}&lt;/code&gt;&lt;br&gt;另外出现蓝色边框：&lt;code&gt;outline:none；&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="mobile" scheme="http://yoursite.com/tags/mobile/"/>
    
  </entry>
  
  <entry>
    <title>nodejs创建http服务</title>
    <link href="http://yoursite.com/2018/06/03/http-server/"/>
    <id>http://yoursite.com/2018/06/03/http-server/</id>
    <published>2018-06-03T15:01:03.000Z</published>
    <updated>2018-06-03T15:03:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><p>window 进入<a href="http://nodejs.cn/" target="_blank" rel="noopener">官网</a>下载安装</p><p>检查版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">node --version</span><br></pre></td></tr></table></figure><h3 id="创建文件server-js"><a href="#创建文件server-js" class="headerlink" title="创建文件server.js"></a>创建文件server.js</h3><p>文件里边输入一下内容<br><a id="more"></a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建http服务</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="built_in">require</span>(<span class="string">'http'</span>).createServer(handler)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">app.listen(<span class="number">2222</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  fs.readFile(__dirname + <span class="string">'/index.html'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.writeHead(<span class="number">500</span>);</span><br><span class="line">      <span class="keyword">return</span> res.end(<span class="string">'Error loading index.html'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">    res.write(<span class="string">'aaaaaaaaaaa'</span>);</span><br><span class="line">    res.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上边<code>app.listen(2222)</code>为监听端口，数字为了与默认端口冲突，尽量不要写 80</p><p>创建一个index.html 文件 ，fs读取文件 </p><p>完成后 在终端输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>打开浏览器 在地址栏里边输入<code>http://localhost:2222</code></p><p>页面就会显示内容 HTML里边的内容</p><p>修改HTML文件或者server里边的配置，重新启动 node server.js 就会显示修改</p><h3 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h3><p>为了防止我们每次修改文件后查看效果 都需要重启 服务 ，我们安装 supervisor  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install supervisor -g</span><br></pre></td></tr></table></figure><p>直接执行开启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisor server.js</span><br></pre></td></tr></table></figure><p>我们就直接可以修改 刷新 ，无需重启服务 </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装nodejs&quot;&gt;&lt;a href=&quot;#安装nodejs&quot; class=&quot;headerlink&quot; title=&quot;安装nodejs&quot;&gt;&lt;/a&gt;安装nodejs&lt;/h3&gt;&lt;p&gt;window 进入&lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;下载安装&lt;/p&gt;
&lt;p&gt;检查版本&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;node --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建文件server-js&quot;&gt;&lt;a href=&quot;#创建文件server-js&quot; class=&quot;headerlink&quot; title=&quot;创建文件server.js&quot;&gt;&lt;/a&gt;创建文件server.js&lt;/h3&gt;&lt;p&gt;文件里边输入一下内容&lt;br&gt;
    
    </summary>
    
      <category term="nodejs" scheme="http://yoursite.com/categories/nodejs/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli移动端px生成转rem</title>
    <link href="http://yoursite.com/2018/06/03/vue-px-rem/"/>
    <id>http://yoursite.com/2018/06/03/vue-px-rem/</id>
    <published>2018-06-03T14:49:32.000Z</published>
    <updated>2018-06-03T14:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>vue做移动端适配，借助px2rem 插件方便的将px单位转为了rem。</p><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install px2rem-loader  lib-flexible --save</span><br></pre></td></tr></table></figure><h3 id="2、"><a href="#2、" class="headerlink" title="2、"></a>2、</h3><p>在项目入口文件main.js中引入lib-flexible</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;lib-flexible/flexible.js&apos;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h3><p>在build下的 utils.js中，找到generateLoaders 方法，在这里添加 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const px2remLoader = &#123;</span><br><span class="line">  loader: &apos;px2rem-loader&apos;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    remUnit: 37.5</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function generateLoaders (loader, loaderOptions) &#123;</span><br><span class="line">  const loaders = [cssLoader, px2remLoader]</span><br><span class="line">  if (loader) &#123;</span><br><span class="line">    loaders.push(&#123;</span><br><span class="line">      loader: loader + &apos;-loader&apos;,</span><br><span class="line">      options: Object.assign(&#123;&#125;, loaderOptions, &#123;</span><br><span class="line">      sourceMap: options.sourceMap</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目，会发现自己设置的px被转为rem 了</p><p>以上实现转换适用于：</p><ul><li><p>（1）组件中编写的<code>&lt;style&gt;&lt;/style&gt;</code>下的css</p></li><li><p>（2）从<code>index.js</code>或者<code>main.js</code>中import <code>‘../../static/css/reset.css’</code>引入css</p></li><li><p>（3）在组件的<code>&lt;script type=”text/ecmascript-6″&gt;import ‘../../static/css/reset.css&#39;&lt;/script&gt;</code>中引入css</p></li></ul><h3 id="另外的情况："><a href="#另外的情况：" class="headerlink" title="另外的情况："></a>另外的情况：</h3><p>（1）组件<style></style>中<code>@import “../../static/css/reset.css</code> (可考虑上面（2）、（3）的形式引入)</p><p>（2）外部样式:<code>&lt;link rel=”stylesheet” href=”static/css/reset.css”&gt;</code></p><p>（3）元素内部样式：<code>style=”height: 417px; width: 550px;”</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue做移动端适配，借助px2rem 插件方便的将px单位转为了rem。&lt;/p&gt;
&lt;h3 id=&quot;1、安装&quot;&gt;&lt;a href=&quot;#1、安装&quot; class=&quot;headerlink&quot; title=&quot;1、安装&quot;&gt;&lt;/a&gt;1、安装&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install px2rem-loader  lib-flexible --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2、&quot;&gt;&lt;a href=&quot;#2、&quot; class=&quot;headerlink&quot; title=&quot;2、&quot;&gt;&lt;/a&gt;2、&lt;/h3&gt;&lt;p&gt;在项目入口文件main.js中引入lib-flexible&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &amp;apos;lib-flexible/flexible.js&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vue-cli" scheme="http://yoursite.com/tags/vue-cli/"/>
    
      <category term="rem" scheme="http://yoursite.com/tags/rem/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS的模块化实现</title>
    <link href="http://yoursite.com/2017/12/26/angularjs-model/"/>
    <id>http://yoursite.com/2017/12/26/angularjs-model/</id>
    <published>2017-12-25T16:00:17.000Z</published>
    <updated>2018-01-03T15:20:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AngularJS的模块化实现"><a href="#AngularJS的模块化实现" class="headerlink" title="AngularJS的模块化实现"></a>AngularJS的模块化实现</h3><p><img src="https://littlombie.github.io/images/post/model.jpg" alt="image"></p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-sctroller</span>=<span class="string">'helloModule'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;greeeing.text&#125;&#125;,Angular<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个模块</span></span><br><span class="line"><span class="keyword">var</span> helloModule = angular.module(<span class="string">'helloAngular'</span>, []);<span class="comment">//创建个匿名函数</span></span><br><span class="line"><span class="comment">//创建 controller 控制器 $scope表示告诉angular把$scope注入到里边</span></span><br><span class="line">helloModule.controller(<span class="string">'helloNgCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line">    $scope.greeting = &#123;</span><br><span class="line">        text:<span class="string">'hello'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure><p>一个完整的项目   </p><p><img src="https://littlombie.github.io/images/post/6632454249863766400.png" alt="一个完整的项目"></p><p><img src="https://littlombie.github.io/images/post/2608147134218969088.png" alt="image"></p><p>模块之间的依赖    </p><p>比如下边：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bookStoreApp = angular.module(<span class="string">'bookStoreApp'</span>,[</span><br><span class="line"><span class="string">'ngRoute'</span>,<span class="string">'ngAnimate'</span>,<span class="string">'bookStoreCtrls'</span>,<span class="string">'bookStoreFilters'</span>,<span class="string">'bookSXtoreServices'</span>,<span class="string">'bookStoreDirectives'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>然后再HTML中作为启动点开始引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"bookStoreApp"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">'MyModule'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        //定义一个自定义标签 浏览器不识</span><br><span class="line">        <span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyModule = angular.module(<span class="string">'MyModule'</span>, []);</span><br><span class="line"></span><br><span class="line">MyModule.directive(<span class="string">'hello'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        restrict:<span class="string">'E'</span>,<span class="comment">//模式为属性模式</span></span><br><span class="line">        template:<span class="string">'&lt;div&gt;Hi everyone !&lt;/div&gt;'</span>,<span class="comment">//模板</span></span><br><span class="line">        replace:<span class="literal">true</span><span class="comment">//表示可ui替换HTML相对应的标签</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AngularJS的模块化实现&quot;&gt;&lt;a href=&quot;#AngularJS的模块化实现&quot; class=&quot;headerlink&quot; title=&quot;AngularJS的模块化实现&quot;&gt;&lt;/a&gt;AngularJS的模块化实现&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://littlombie.github.io/images/post/model.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Angularjs" scheme="http://yoursite.com/categories/Angularjs/"/>
    
    
      <category term="Angularjs" scheme="http://yoursite.com/tags/Angularjs/"/>
    
      <category term="路由" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1/"/>
    
      <category term="模块" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97/"/>
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>ES6学习【一】let,const</title>
    <link href="http://yoursite.com/2017/12/25/es6-let-const/"/>
    <id>http://yoursite.com/2017/12/25/es6-let-const/</id>
    <published>2017-12-25T15:50:57.000Z</published>
    <updated>2017-12-25T15:55:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><h3 id="作用域的概念"><a href="#作用域的概念" class="headerlink" title="作用域的概念"></a>作用域的概念</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//var a = 1;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">1</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">test();<span class="comment">//1,2，i is not defined</span></span><br></pre></td></tr></table></figure><p>块作用域 ：如果一个方法（函数）用大括号包裹起来 ，那么这就是块级作用域；<br><a id="more"></a><br><code>let</code>只在块级作用域内有效；<br>ES6 是强制启用严格模式 （’use strict’）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = 1;</span><br><span class="line">let a = 2;</span><br></pre></td></tr></table></figure><p>强调：以上会报错  * 使用<code>let</code>不能重复声明变量</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p><code>const</code> 用来定义成常量，常量的作用是其值不能修改 (不严谨);<br>声明的时候必须赋值；</p><p>如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fucntion last()&#123;</span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">    PI = <span class="number">8</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(PI);</span><br><span class="line">&#125;</span><br><span class="line">last();<span class="comment">//报错 “PI” is read-only</span></span><br></pre></td></tr></table></figure></p><p>上边PI 的值改变了 ，所以报错<br><code>const</code> 也是有块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fucntion last()&#123;</span><br><span class="line">    <span class="keyword">const</span> PI = <span class="number">3.1415926</span>;</span><br><span class="line">    <span class="keyword">const</span> k = &#123;</span><br><span class="line">        a:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    k.b = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(PI,k);</span><br><span class="line">&#125;</span><br><span class="line">last();</span><br></pre></td></tr></table></figure><p>上边 用<code>const</code>声明 <code>k</code> 为一个对象 ；对象是引用类型，对象本身是可以变的，<code>k</code>只是指向的是其不变的指针 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;let&quot;&gt;&lt;a href=&quot;#let&quot; class=&quot;headerlink&quot; title=&quot;let&quot;&gt;&lt;/a&gt;let&lt;/h2&gt;&lt;h3 id=&quot;作用域的概念&quot;&gt;&lt;a href=&quot;#作用域的概念&quot; class=&quot;headerlink&quot; title=&quot;作用域的概念&quot;&gt;&lt;/a&gt;作用域的概念&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//var a = 1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; i =&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test();&lt;span class=&quot;comment&quot;&gt;//1,2，i is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;块作用域 ：如果一个方法（函数）用大括号包裹起来 ，那么这就是块级作用域；&lt;br&gt;
    
    </summary>
    
      <category term="ECMAScript2015" scheme="http://yoursite.com/categories/ECMAScript2015/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="let" scheme="http://yoursite.com/tags/let/"/>
    
      <category term="const" scheme="http://yoursite.com/tags/const/"/>
    
  </entry>
  
  <entry>
    <title>【AngularJS】解决ng-if中的ng-model值无效的问题</title>
    <link href="http://yoursite.com/2017/12/25/angularjs-ng-if-ng-model/"/>
    <id>http://yoursite.com/2017/12/25/angularjs-ng-if-ng-model/</id>
    <published>2017-12-25T15:29:37.000Z</published>
    <updated>2017-12-25T15:42:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>与其他指令一样，<code>ng-if</code>指令也会创建一个子级作用域，因此，如果在<code>ng-if</code>指令中添加了元素，并向元素属性增加 <code>ng-model</code>指令，那么<code>ng-model</code>指令对应的作用域属性子级作用域，而并非控制器注入的<code>$scope</code>作用域对象，这点在进行双向数据绑定时，需要引起注意。</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>  </span><br><span class="line">  .frame&#123;  </span><br><span class="line">    padding: 5px 8px;  </span><br><span class="line">    margin: 0px;  </span><br><span class="line">    font-size: 12px;  </span><br><span class="line">    width: 320px;  </span><br><span class="line">    background-color: #eee;  </span><br><span class="line">  &#125;  </span><br><span class="line">  .frame div&#123;  </span><br><span class="line">    margin: 5px 0px;  </span><br><span class="line">  &#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span> <span class="attr">class</span>=<span class="string">"frame"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span><br><span class="line">      a 的值： &#123;&#123;a&#125;&#125;  <span class="tag">&lt;<span class="name">br</span>&gt;</span>  </span><br><span class="line">      b 的值： &#123;&#123;b&#125;&#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span><br><span class="line">      普通方式： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"a"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-if</span>=<span class="string">"!a"</span>&gt;</span>  </span><br><span class="line">      ngIf方式：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"$parent.b"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="javascript">    angular.module(<span class="string">'myApp'</span>, [])  </span></span><br><span class="line"><span class="javascript">      .controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;  </span></span><br><span class="line"><span class="javascript">        $scope.a = <span class="literal">false</span>;  </span></span><br><span class="line"><span class="javascript">        $scope.b = <span class="literal">false</span>;  </span></span><br><span class="line">      &#125;)  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ng-if</code>方式中，每个包含的元素都拥有自己的作用域，因此，复选框元素也拥有自己的<code>$scope</code>作用域。相对于控制器作用域来说，这个作用域属于一个子级作用域，所以，如果它想绑定控制器中的变量值，必须添加<code>$parent</code>标识，只有这样才能访问到控制器中的变量。  </p><p>因此，解决<code>ng-if</code>中<code>ng-model</code>值无效的问题，主要方法就是在绑定值时添加<code>$parent</code>标识，或者用<code>ng-show</code>指令代替<code>ng-if</code>指令，这两种方法都可以达到同样的页面效果。</p><ul><li>文章来源<a href="http://blog.csdn.net/u013451157/article/details/60866210" target="_blank" rel="noopener">【AngularJS】解决ng-if中的ng-model值无效的问题】</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与其他指令一样，&lt;code&gt;ng-if&lt;/code&gt;指令也会创建一个子级作用域，因此，如果在&lt;code&gt;ng-if&lt;/code&gt;指令中添加了元素，并向元素属性增加 &lt;code&gt;ng-model&lt;/code&gt;指令，那么&lt;code&gt;ng-model&lt;/code&gt;指令对应的作用域属性子级作用域，而并非控制器注入的&lt;code&gt;$scope&lt;/code&gt;作用域对象，这点在进行双向数据绑定时，需要引起注意。&lt;/p&gt;
    
    </summary>
    
      <category term="Angularjs" scheme="http://yoursite.com/categories/Angularjs/"/>
    
    
      <category term="Angularjs" scheme="http://yoursite.com/tags/Angularjs/"/>
    
      <category term="ng-model" scheme="http://yoursite.com/tags/ng-model/"/>
    
      <category term="ng-if" scheme="http://yoursite.com/tags/ng-if/"/>
    
  </entry>
  
  <entry>
    <title>自动化构建工具-Gulp</title>
    <link href="http://yoursite.com/2017/09/29/gulp/"/>
    <id>http://yoursite.com/2017/09/29/gulp/</id>
    <published>2017-09-29T15:25:41.000Z</published>
    <updated>2017-09-29T15:57:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要自动化"><a href="#为什么要自动化" class="headerlink" title="为什么要自动化"></a>为什么要自动化</h3><p>自动化是把源码合并压缩，合并之后就能减少http请求 ，压缩后能减少带宽，这是移动端十分需要的</p><h3 id="自动化工具：gulp-js"><a href="#自动化工具：gulp-js" class="headerlink" title="自动化工具：gulp.js"></a>自动化工具：gulp.js</h3><p>优点：基于流、任务化</p><p>常用的API：src dest watch task pipe </p><ul><li>src ：读取文件和文件夹</li><li>dest：生成文件</li><li>watch：监控文件</li><li>task：定制任务 </li><li>pipe：流的方式处理文件 </li></ul><p>官网： <a href="http://www.gulpjs.com.cn" target="_blank" rel="noopener">www.gulpjs.com.cn</a><br><a id="more"></a></p><h3 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h3><p>全局安装gulp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install gulp -g</span><br></pre></td></tr></table></figure><p>初始化文件 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm init</span><br></pre></td></tr></table></figure><p>当前目录 安装gulp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev gulp</span><br></pre></td></tr></table></figure><p>安装gulp插件   </p><p><img src="http://littlombie.github.io/images/post/6632257437282781793.jpg" alt="安装gulp插件"></p><p>可以 批量安装 插件之间空格   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm  install  --save-dev gulp-clean gulp-concat gulp-connect gulp-cssmin gulp-imagemin gulp-less gulp-load-plugins gulp-uglify open</span><br></pre></td></tr></table></figure><h4 id="gulp-js搭建环境"><a href="#gulp-js搭建环境" class="headerlink" title="gulp.js搭建环境"></a>gulp.js搭建环境</h4><p>创建文件<code>gulpfile.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)();</span><br><span class="line"><span class="keyword">var</span> open = <span class="built_in">require</span>(<span class="string">'open'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = &#123;</span><br><span class="line">    srcPath: <span class="string">'src/'</span>,</span><br><span class="line">    devPath: <span class="string">'build/'</span>,</span><br><span class="line">    prdPath: <span class="string">'dist/'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放置依赖</span></span><br><span class="line">gulp.task(<span class="string">'lib'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    gulp.src(<span class="string">'bower_components/**/*.js'</span>)</span><br><span class="line">        <span class="comment">// 拷贝文件到：</span></span><br><span class="line">        .pipe(gulp.dest(app.devPath + <span class="string">'vendor'</span>)) <span class="comment">//生产目录</span></span><br><span class="line">        .pipe(gulp.dest(app.prdPath + <span class="string">'vendor'</span>))<span class="comment">//代码上线发布目录</span></span><br><span class="line">        .pipe($.connect.reload()); <span class="comment">//自动刷新</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp lib</span><br></pre></td></tr></table></figure><p>就会出现两个文件夹 <code>build</code> <code>dist</code> ,里边是编译的文件</p><h4 id="编译html："><a href="#编译html：" class="headerlink" title="编译html："></a>编译html：</h4><p>先创建个文件夹 <strong>src&gt;index.html 、 src&gt;view&gt;main.html</strong></p><p>在gulpfile.js里边添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'html'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'**/*.html'</span>)</span><br><span class="line">        .pipe(gulp.dest(app.devPath))</span><br><span class="line">        .pipe(gulp.dest(app.prdPath))</span><br><span class="line">        .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后再运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp html</span><br></pre></td></tr></table></figure><p>然后src里边的HTML文件会编译到<code>dist/buile</code>中</p><h4 id="json文件"><a href="#json文件" class="headerlink" title="json文件"></a>json文件</h4><p>json 跟上边HTML一样，在src中创建一个data文件，里边书写json文件</p><p><code>gulpfile.js</code>里边添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'json'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'data/**/*.json'</span>)</span><br><span class="line">        .pipe(gulp.dest(app.devPath + <span class="string">'data'</span>))</span><br><span class="line">        .pipe(gulp.dest(app.prdPath + <span class="string">'data'</span>))</span><br><span class="line">        .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在执行<code>gulp json</code>就会在build dist 里边出现json文件</p><h4 id="编译less-文件"><a href="#编译less-文件" class="headerlink" title="编译less 文件"></a>编译less 文件</h4><p>首先在src下创建文件<code>src&gt;style&gt;index.less</code> ， <code>src&gt;style&gt;main.less</code><br><code>index.less</code> 为主要文件 里边引入外部需要的文件，<br>index.less:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">'main.less'</span>;</span><br></pre></td></tr></table></figure><p>main.less:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span><span class="number">#fff</span>;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">   <span class="attribute">color</span>:<span class="variable">@color</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译的时候只编译<code>index.less</code>文件 ，<br>然后再配置文件<code>gulpfile.js</code>里边添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'style/index.less'</span>)</span><br><span class="line">        <span class="comment">// 在此设置编译 less为css</span></span><br><span class="line">        .pipe($.less())</span><br><span class="line">        .pipe(gulp.dest(app.devPath + <span class="string">'css'</span>))</span><br><span class="line">        <span class="comment">// 在此处设置压缩css文件</span></span><br><span class="line">        .pipe($.cssmin())</span><br><span class="line">        .pipe(gulp.dest(app.prdPath + <span class="string">'css'</span>))</span><br><span class="line">        .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行命令<code>gulp less</code> 就会在build里边看到编译出来为css文件 和dist里边出现的css压缩文件</p><h4 id="js文件"><a href="#js文件" class="headerlink" title="js文件"></a>js文件</h4><p>创建两个js文件 src&gt;script&gt;1.js src&gt;script&gt;2.js<br>里边写一些简单测试代码<br>在gulpfile.js里边添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'script/**/*.js'</span>)</span><br><span class="line">        <span class="comment">// 合并js文件</span></span><br><span class="line">        .pipe($.concat(<span class="string">'index.js'</span>))</span><br><span class="line">        .pipe(gulp.dest(app.devPath + <span class="string">'js'</span>))</span><br><span class="line">        <span class="comment">//压缩js</span></span><br><span class="line">        .pipe($.uglify())</span><br><span class="line">        .pipe(gulp.dest(app.prdPath + <span class="string">'js'</span>))</span><br><span class="line">        .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后执行<code>gulp js</code>，发现在build 和dist文件家中出现了script&gt;index.js</p><h4 id="image文件"><a href="#image文件" class="headerlink" title="image文件"></a>image文件</h4><p>图片的步骤跟上边的差不多，<br>最后还有个压缩图片 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'image'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(app.srcPath + <span class="string">'image/**/*'</span>)</span><br><span class="line">        .pipe(gulp.dest(app.devPath + <span class="string">'image'</span>))</span><br><span class="line">        <span class="comment">// 压缩图片</span></span><br><span class="line">        .pipe($.imagemin())</span><br><span class="line">        .pipe(gulp.dest(app.prdPath + <span class="string">'image'</span>))</span><br><span class="line">        .pipe($.connect.reload());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行<code>gulp image</code></p><p><strong>为了不让每次的编译的文件重复硬性 ，就要配置一个清除</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除重复的文件</span></span><br><span class="line">gulp.task(<span class="string">'clean'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([app.devPath, app.prdPath])</span><br><span class="line">        .pipe($.clean())</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后每次<code>build</code> <code>dist</code> 文件会被删除  等待重新编译  </p><p>我们每次看效果都需要先清除之前的，然后在一个个打包编译，这样很麻烦，所以我们就需要一个指令，只需要每次执行一次 就可以把所有的任务都执行了  如下：</p><h4 id="build"><a href="#build" class="headerlink" title="build"></a>build</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 总任务，构建任务 打包时只要执行下边就行 </span></span><br><span class="line">gulp.task(<span class="string">'build'</span>, [<span class="string">'image'</span>, <span class="string">'js'</span>, <span class="string">'less'</span>, <span class="string">'lib'</span>, <span class="string">'html'</span>, <span class="string">'json'</span>]);</span><br></pre></td></tr></table></figure><p>执行<code>gulp build</code></p><h4 id="构建本地服务器，自动刷新"><a href="#构建本地服务器，自动刷新" class="headerlink" title="构建本地服务器，自动刷新"></a>构建本地服务器，自动刷新</h4><p>这样还不够 ，我们需要的是只要执行一次， 就能直接在浏览器里查看效果  而且每次更改代码自动的会编译 ，浏览器会自动刷新。</p><p>首先得先创建一个本地访问的服务器 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启动服务器 本地环境 </span></span><br><span class="line">gulp.task(<span class="string">'serve'</span>, [<span class="string">'build'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $.connect.server(&#123;</span><br><span class="line">        root: [app.devPath],</span><br><span class="line">        livereload: <span class="literal">true</span>, <span class="comment">//针对高级浏览器，每次代码的更改 会自动的刷新浏览器</span></span><br><span class="line">        port: <span class="number">1234</span> <span class="comment">//端口</span></span><br><span class="line">    &#125;);</span><br><span class="line">    open(<span class="string">'http://localhost:1234'</span>); <span class="comment">//浏览url</span></span><br><span class="line"></span><br><span class="line">    gulp.watch(<span class="string">'bower_components/**/*.js'</span>, [<span class="string">'lib'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'**/*.html'</span>, [<span class="string">'html'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'data/**/*.json'</span>, [<span class="string">'json'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'style/index.less'</span>, [<span class="string">'less'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'script/**/*.js'</span>, [<span class="string">'js'</span>]);</span><br><span class="line">    gulp.watch(app.srcPath + <span class="string">'image/**/*'</span>, [<span class="string">'image'</span>]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个服务器需要设置本地<code>url</code>,端口 还需要每次刷新的文件，它调用的<code>build</code> 来执行，这样就实现了本地的服务搭建！</p><p>然后我们还可以在简单一些：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'serve'</span>]);</span><br></pre></td></tr></table></figure><p>安装gulp-plumber插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install --save-dev gulp-plumber</span><br></pre></td></tr></table></figure><p>这个插件的作用一旦是 css，js编译的时候发生错误时 ，自动化不会停止</p><p>然后在gulpfile.js下每个编译 的task里边都添加 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.pipe($.blumer())</span><br></pre></td></tr></table></figure><p>接着直接执行<code>gulp</code>，服务器自动打开，浏览器会自动的打开页面，然后修改的文件无需刷新马上就可以在浏览器里查看，这样我们的构建环境就搭完了 ！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;为什么要自动化&quot;&gt;&lt;a href=&quot;#为什么要自动化&quot; class=&quot;headerlink&quot; title=&quot;为什么要自动化&quot;&gt;&lt;/a&gt;为什么要自动化&lt;/h3&gt;&lt;p&gt;自动化是把源码合并压缩，合并之后就能减少http请求 ，压缩后能减少带宽，这是移动端十分需要的&lt;/p&gt;
&lt;h3 id=&quot;自动化工具：gulp-js&quot;&gt;&lt;a href=&quot;#自动化工具：gulp-js&quot; class=&quot;headerlink&quot; title=&quot;自动化工具：gulp.js&quot;&gt;&lt;/a&gt;自动化工具：gulp.js&lt;/h3&gt;&lt;p&gt;优点：基于流、任务化&lt;/p&gt;
&lt;p&gt;常用的API：src dest watch task pipe &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;src ：读取文件和文件夹&lt;/li&gt;
&lt;li&gt;dest：生成文件&lt;/li&gt;
&lt;li&gt;watch：监控文件&lt;/li&gt;
&lt;li&gt;task：定制任务 &lt;/li&gt;
&lt;li&gt;pipe：流的方式处理文件 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官网： &lt;a href=&quot;http://www.gulpjs.com.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.gulpjs.com.cn&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>javascript--函数及作用域总结介绍</title>
    <link href="http://yoursite.com/2017/07/19/javascript-Scopes/"/>
    <id>http://yoursite.com/2017/07/19/javascript-Scopes/</id>
    <published>2017-07-19T15:21:10.000Z</published>
    <updated>2017-07-19T15:29:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是对javascript在的函数及作用域进行了详细的总结介绍，需要的朋友可以过来参考下，希望对大家有所帮助<br>在js中使用函数注意三点：</p><p>1、函数被调用时，它是运行在他被声明时的语法环境中的；<br>2、函数自己无法运行，它总是被对象调用的，函数运行时，函数体内的this指针指向调用该函数的对象，如果调用函数时没有明确指定该对象， this 默认指向 window ( strict 模式除外，本文不涉及 strict 模式)；<br>3、函数是一种带有可执行代码的对象类型数据。</p><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><ul><li>1、使用 function 关键字<br>复制代码代码如下:  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params">a,b</span>)</span>&#123; <span class="comment">//声明名为myfun的函数</span></span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>2、 声明匿名函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>匿名函数自身是无法保存的，由于在js中函数是一种对象型数据，因此可以把匿名函数赋给变量来保存。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myfun = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>3、使用函数构造器Function //注意首字母大写<br>Function 是js内置的一个函数，他是所有函数对象的构造器。（其他数据对象也有自己的内置构造函数，比如Number，Object等，这些构造函数自己的构造器就是Function，因为他们都是函数）。  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myfun = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a,b'</span>,<span class="string">'return a+b;'</span>);</span><br></pre></td></tr></table></figure></li></ul><p>其中最后一个参数是函数体，前面的参数都是函数的形式参数名，个数不定，因为需要用字符串传参来构造，函数较长时这种写法很不方便，一般很少用，也许你会用它来构造特定的返回值从而取代 eval函数。<br>需要注意的是，全局变量和全局函数都可以看作window对象的属性，如果存在同名的函数和变量，只能有一个生效(实际上只有一个属性)，试试下面的代码。<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="built_in">window</span>.a);  <span class="comment">//访问window对象的属性也可以省去window不写</span></span><br><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">alert(<span class="built_in">window</span>.a);</span><br></pre></td></tr></table></figure></p><p>函数和变量的声明都发生在代码解析期，不同的是，变量在解析期只声明不赋值，因此，同一个作用域内存在同名的函数和变量时，在代码运行期执行到变量赋值之 前，同名函数生效，同名变量赋值之后(用新的数据覆盖了该window对象属性原有的值)，变量生效(但是要注意，在firefox 下， 在 with 伪闭包内声明的函数，只能在声明之后才能被调用，即，firefox 的 with 内没有对函数预先声明)。<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span>(&#123;&#125;)&#123; </span><br><span class="line">    a();  <span class="comment">//在 firefox 下 a 是未声明</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"function a is called"</span>)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果同名称的函数被多次声明，后面声明的将覆盖前面声明的，如：<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">alert(func1);<span class="comment">//弹出func1()&#123;alert(2);&#125;</span></span><br><span class="line">func1()&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(func1);  <span class="comment">//弹出func1()&#123;alert(2);&#125;</span></span><br><span class="line">func1()&#123;  <span class="comment">//这是最后一次声明的func1，以该函数为准</span></span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(func1);  <span class="comment">//弹出func1()&#123;alert(2);&#125;</span></span><br><span class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  <span class="comment">//注意 ，这里是变量赋值，不是函数声明</span></span><br><span class="line">    alert(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(func1);  <span class="comment">//弹出function()&#123;alert(3);&#125;</span></span><br></pre></td></tr></table></figure></p><p>除了 IE8 及IE8以下的浏览器，表达式中的函数声明都会返回匿名函数，不会成功声明具名函数<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;&#125;)&#123;</span><br><span class="line">   alert(fun); <span class="comment">// error，不会成功声明名称为 fun 的函数，但在IE8及以下的浏览器中中会成功声明一个函数 fun</span></span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123; &#125;);</span><br><span class="line">alert(fun); <span class="comment">//error但是即使在 IE8 一下， 表达式中的具名函数也不能覆盖该作用于下同名的变量：</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="number">1</span>; <span class="comment">//该变量不能被函数表达式中的函数名覆盖</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">alert(f); <span class="comment">//function fun()&#123;&#125;;</span></span><br><span class="line">alert(fun); <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><p>注意区别：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(fun = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;)&#123;</span><br><span class="line">   alert(fun); <span class="comment">// ok，这里声明了一个变量，该变量保存了一个匿名函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//js函数是引用型的对象</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> b=a;</span><br><span class="line">b.x=<span class="number">2</span>;</span><br><span class="line">alert(a.x); <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><p>js函数不会检查函数调用时传入的参数个数与定义他时的形式参数个数是否一致，一般地，js函数调用时可以接收的参数个数为25个，当然不同的浏览器可能有差异，ECMAScript标准对这一点并没有规范。<br>如果你不确定函数调用时传入了多少个参数，可以使用函数的arguments对象。<br>arguments 有点像数组，arguments.length 为传入的参数个数，arguments[0] 是第一个参数，arguments[1]是第二个参数，类推…<br>函数对象的length属性：这个属性很少用到，甚至很少人知道，函数的length属性就是该函数定义时的形式参数个数。<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">arguments</span>.length);  <span class="comment">//弹出调用时实际传入的参数个数</span></span><br><span class="line">    alert(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">//对应参数a</span></span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line">alert(myfun.length);   <span class="comment">//形参个数，2</span></span><br></pre></td></tr></table></figure></p><p>arguments对象还有其他属性，比如常用的arguments.callee ，指向该函数自身。<br><strong>要注意</strong>：如果函数内部声明了与形参同名的子函数（同域内，变量未赋值时同名函数生效），arguments 的相应值也会被修改，但是，在作用域内使用 var 声明了同名的 变量则不会导致 arguments 的参数值被函数替换（但firefox 依然替换）。<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params">a , b,c</span>)</span>&#123; <span class="comment">//js 群的一道题</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">//function a </span></span><br><span class="line">    <span class="built_in">console</span>.log(aa);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果作用域内没有 var a ,则 arguments[0] 为 function a (friefox(version 17) 则一定是function a)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]); </span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">"ee"</span>;  <span class="comment">//注销此句，考擦 arguments[0] 将变为 a 函数</span></span><br><span class="line">    <span class="keyword">var</span> aa = <span class="string">"444"</span>;</span><br><span class="line">    <span class="built_in">arguments</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(aa);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">aa(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><p>js函数使用 return 语句返回值。<br>一切数据类型都可以作为函数的返回值(包括函数)，js函数也可以没有返回值。  </p><h3 id="四、函数调用"><a href="#四、函数调用" class="headerlink" title="四、函数调用"></a>四、函数调用</h3><p>函数自己是不会运行的，当它运行时，总是存在一个调用它的对象。<br>默认情况下，在任何语法环境中，如果没有显式指定函数的调用对象，就是指通过window对象来调用该函数，此时，函数体内的this指针指向window对象。<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line">myfun(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// 调用函数并传入2个参数，这2个参数分别对应形式参数a,b调用函数时，如果传入的参数个数超过形式参数，就只有用arguments加下标来接收了。</span></span><br></pre></td></tr></table></figure></p><p>由于没有显式指定调用函数的对象，alert(this)将弹出 window对象。这种调用方法是最常见的。<br>用于显式指定函数的调用对象方法有三个：  </p><ul><li>1、如果一个函数被赋为一个对象的属性值，这个函数只能通过该对象来访问（但并非是说该函数只能被该对象调用），通过该对象调用这个函数的方式类似以面向对象编程语言中的方法调用(实际上在js中也习惯使用方法这种称呼)。<br>复制代码代码如下:  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;; <span class="comment">//定义一个对象</span></span><br><span class="line">obj.fun=<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>); <span class="comment">//弹出this指针</span></span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125; <span class="comment">//对象属性值为函数</span></span><br><span class="line">alert(obj.fun);<span class="comment">// 访问fun函数。 只能通过该对象来访问这个函数</span></span><br><span class="line">obj.fun(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//通过obj对象来调用fun函数，将弹出obj对象。这种方式也称为调用obj对象的fun方法。</span></span><br></pre></td></tr></table></figure><ul><li>2、 任意指定函数的调用对象：在某个语法环境中，如果可以同时访问到函数fun和对象obj，只要你愿意，可以指定通过obj对象来调用fun函数。<br>指定方法 有2种：call方法和apply方法。(因为window对象是浏览器环境下的顶级对象，在任何语法环境中都能访问到window对象，因此，任何函数 都可以通过window对象来调用)<br>复制代码代码如下:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">fun.call(obj,<span class="number">1</span>,<span class="number">2</span>);   <span class="comment">//通过obj对象来调用fun函数，并传入2个参数，弹出的指针为obj对象。</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> obj2=&#123;&#125;;</span><br><span class="line">obj2.fun2 = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; <span class="comment">//obj2对象的属性fun2是一个函数</span></span><br><span class="line">    alert(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;;</span><br><span class="line">obj2.fun2.call(obj,<span class="number">1</span>,<span class="number">2</span>);   <span class="comment">//通过obj对象来调用obj2对象的fun2属性值所保存的函数，弹出的this指针是obj对象</span></span><br><span class="line"><span class="comment">//比较隐蔽的方法调用：数组调用一个函数[9,function()&#123; alert(this[0]); &#125;][1]();</span></span><br><span class="line"><span class="comment">//使用window对象调用函数下面几种方法是等价的</span></span><br><span class="line">fun(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">window</span>.fun(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//如果fun函数是全局函数</span></span><br><span class="line">fun.call(<span class="built_in">window</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">fun.call(<span class="keyword">this</span>,<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//如果该句代码在全局环境下（或者被window对象调用的函数体内），因为该语法环境下的this就是指向window对象。</span></span><br><span class="line">func.call(); <span class="comment">//如果函数不需要传参</span></span><br><span class="line">func.call(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">func.call(<span class="literal">undefined</span>,<span class="number">1</span>,<span class="number">2</span>);<span class="keyword">var</span> name = <span class="string">"window"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kkk</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">// not ie</span></span><br><span class="line">&#125;</span><br><span class="line">kkk(); <span class="comment">//window</span></span><br><span class="line">kkk.call(kkk); <span class="comment">//kkk 函数被自己调用了</span></span><br></pre></td></tr></table></figure><p>另一种比较容易疏忽的错误是，在A 对象的方法中，执行了使用了 B 对象的方法调用，试图在 B 对象的方法里使用 this 来访问 A 对象，这在各种回调函数中比较常见，最常见的情形就是 ajax 回调函数中使用 this 。<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   data:<span class="literal">null</span>,</span><br><span class="line">   getData:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $.post(url,&#123;<span class="attr">param</span>:token&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">dataBack</span>)</span>&#123; <span class="comment">//jQuery ajax post method</span></span><br><span class="line">            <span class="keyword">this</span>.data = dataBack; <span class="comment">//试图将服务器返回的数据赋给 obj.data ,但这里的 this 已经指向 jQuery 的 ajax 对象了</span></span><br><span class="line">        &#125;,<span class="string">'json'</span>);   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正确做法</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   data:<span class="literal">null</span>,</span><br><span class="line">   getData:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> host = <span class="keyword">this</span>; <span class="comment">//保存 obj 对象的引用</span></span><br><span class="line">        $.post(url,&#123;<span class="attr">param</span>:<span class="string">"token"</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">dataBack</span>)</span>&#123;</span><br><span class="line">            host.data = dataBack;</span><br><span class="line">        &#125;,<span class="string">'json'</span>);   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>3、apply方法调用：<br>apply方法与call方法唯一不同的地方是函数传参方式不同。<br><code>obj2.fun2.call(obj,1,2);</code><br>改为 apply方式就是<br><code>obj2.fun2.apply(obj,[1,2]);</code><br>apply使用类数组方式传参，除数组外，还可以使用arguments、HTMLCollection来传参，但arguments并非数组，如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun_1</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fun_2</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line">fun_2.apply(obj,<span class="built_in">arguments</span>);  <span class="comment">//用fun_1的arguments对象来传参，实际上是接收了x,y</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>apply 传参在IE8 及IE8一下的浏览器中哟2个问题<br>在 call 和 apply 调用中，如果传入标量数据(true/false ，string，number)，函数运行时将把他们传入的基本数据包装成对象，然后把this指向包装后的对象,试试下面的代码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="keyword">typeof</span> <span class="keyword">this</span>);</span><br><span class="line">    alert(<span class="keyword">this</span>.constructor);</span><br><span class="line">    alert(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">a.call(<span class="literal">false</span>);</span><br><span class="line">a.call(<span class="number">100</span>);</span><br><span class="line">a.call(<span class="string">'hello'</span>);</span><br><span class="line"><span class="comment">//甚至可以用这个特点来传参数，但是不建议这种用法：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;  alert(<span class="number">1</span>+<span class="keyword">this</span>); &#125; <span class="comment">//对象在运算中自动进行类型转换</span></span><br><span class="line">a.call(<span class="number">100</span>); <span class="comment">//101</span></span><br></pre></td></tr></table></figure></p><ul><li>4、函数作为对象构造器<br>当函数使用 new 运算作为对象构造器运行时，this 指向新构造出对象，如果该构造函数的返回值不是 null 以外的对象，构造函数运行完毕将返回 this 指向的对象,否则返回原定义的对象。<br>复制代码代码如下:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.b = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//&#123;a:1,b:2&#125;</span></span><br><span class="line">    <span class="comment">// return &#123;a:999&#125;;  //加上此举 ,将返回 &#123;a:999&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Fun();  <span class="comment">//obj = &#123;a:1,b:2&#125; ，如果没有参数，也可以写成 var obj = new Fun;</span></span><br></pre></td></tr></table></figure><h3 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h3><p>js的变量作用域是函数级的，在js里没有类似c语言的块级作用域。<br>js编程环境的顶级作用域是window对象下的范围，称为全局作用域，全局作用域中的变量称为全局变量。<br>js函数内的变量无法在函数外面访问，在函数内却可以访问函数外的变量，函数内的变量称为局部变量。<br>js函数可以嵌套，多个函数的层层嵌套构成了多个作用域的层层嵌套，这称为js的作用域链。<br>js作用域链的变量访问规则是：如果当前作用域内存在要访问的变量，则使用当前作用域的变量，否则到上一层作用域内寻找，直到全局作用域，如果找不到，则该变量为未声明。<br>注意，变量的声明在代码解析期完成，如果当前作用域的变量的声明和赋值语句写在变量访问语句后面，js函数会认为当前作用域已经存在要访问的变量不再向上级作用域查找，但是，由于变量的赋值发生的代码运行期，访问的到变量将是undefined.<br>如：<br>复制代码代码如下:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c=<span class="number">1000</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">out</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b=<span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(a); <span class="comment">//undefined</span></span><br><span class="line">        <span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line">        alert(a); <span class="comment">//10</span></span><br><span class="line">        alert(b); <span class="comment">//2</span></span><br><span class="line">        alert(c); <span class="comment">//1000</span></span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">&#125;</span><br><span class="line">out();</span><br></pre></td></tr></table></figure><h3 id="匿名函数的调用"><a href="#匿名函数的调用" class="headerlink" title="匿名函数的调用"></a>匿名函数的调用</h3><p>匿名函数的使用在js很重要，由于js中一切数据都是对象，包括函数，因此经常使用函数作为另一个函数的参数或返回值。<br>如果匿名函数没有被保存，则运行后即被从内存中释放。<br>匿名函数的调用方式一般是直接把匿名函数放在括号内替代函数名。如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//声明并执行匿名函数，运行时传入两个参数：1和2</span></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">//下面这种写法是错误的：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">2</span>); </span><br><span class="line">由于js中语句结束的分号可以省略，js引擎会认为<span class="string">`function(a,b)&#123; return a+b;&#125;`</span>是一句语句结束，因此匿名函数只声明了没有被调用，如果语句没有传参(<span class="number">1</span>,<span class="number">2</span>)写成()，还会导致错误，js中空括号是语法错误。  </span><br><span class="line">下面这种写法是正确的。</span><br><span class="line"><span class="keyword">var</span>  ab = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">// ab=3</span></span><br></pre></td></tr></table></figure></p><p>js 解析语法时，如果表达式出现在赋值运算或操作符运算中，是”贪婪匹配”的(尽量求值)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>+t;</span><br><span class="line">&#125;(); <span class="comment">//error</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> t+<span class="number">1</span>;</span><br><span class="line">&#125;(); <span class="comment">// ok</span></span><br><span class="line">~ <span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;<span class="keyword">return</span> t+<span class="number">1</span>;&#125;();  <span class="comment">//ok</span></span><br><span class="line">+ <span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;<span class="keyword">return</span> t+<span class="number">1</span>;&#125;(); <span class="comment">//ok</span></span><br></pre></td></tr></table></figure><p>如果你只是想把一个匿名函数赋给一个变量，记得在赋值语句后面加上分号，否则，如果后面跟了小括号就变成了函数调用了，尤其是小括号与函数结尾之间分隔了多行时，这种错误往往很难发现。<br>实际开发中，匿名函数可能以运算值的方式返回，这种情况可能不容易看出，比如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">2</span>,<span class="attr">f</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">&#125;&#125;;</span><br><span class="line">(<span class="number">1</span>,obj.f)(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><p>逗号表达式反悔了一个匿名函数，当这个匿名函数被调用时,函数体内的 thsi 指向 window<br>声 明并立即运行匿名函数被称为”自执行函数“，自执行函数经常用于封装一段js代码。      由于函数作用域的特点，自执行函数内的变量无法被外部访问，放在函数内 的代码不会对外面的代码产生影响，可以避免造成变量污染。   js开发很容易造成变量污染，在开发中经常引入其他编码人员开发的代码，如果不同的编码人员定义 了同名称不同含义的全局变量或函数，便造成了变量污染，同一作用域内出现同名的变量或函数，后来的将覆盖前面的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//自己的代码.....</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>匿名函数还可以使内存及时释放：因为变量被声明在匿名函数内，如果这些变量没有在匿名函数之外被引用，那么这个函数运行完毕，里面的变量所占据的内存就会立即释放。<br>函数的name：在firefox等浏览器，函数有一个name属性，就是该函数的函数名，但是这个属性在IE中不存在，另外，匿名函数的name为空值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">alert(a.name); <span class="comment">//undefined，a是一个存储了一个匿名函数的变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">alert(b.name); <span class="comment">//b ,but undefined for IE</span></span><br></pre></td></tr></table></figure></p><h3 id="函数被调用时，运行在他被定义时的环境中"><a href="#函数被调用时，运行在他被定义时的环境中" class="headerlink" title="函数被调用时，运行在他被定义时的环境中"></a>函数被调用时，运行在他被定义时的环境中</h3><p>无论函数在哪里被调用，被谁调用，都无法改变其被声明时的语法环境，这决定了函数的运行环境<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="number">99</span>;</span><br><span class="line"><span class="keyword">var</span> inerFun=<span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">holder</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">var</span> fun2 = fun1;</span><br><span class="line">    inerFun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(x);&#125;</span><br><span class="line">    fun1(); <span class="comment">//99</span></span><br><span class="line">    fun2();<span class="comment">//99</span></span><br><span class="line">    inerFun(); <span class="comment">//100</span></span><br><span class="line">&#125;</span><br><span class="line">holder();</span><br><span class="line">fun1(); <span class="comment">//99</span></span><br><span class="line">inerFun(); <span class="comment">//100</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">//另一个例子：</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> y=<span class="number">77</span>;</span><br><span class="line"><span class="keyword">var</span> a1=&#123;</span><br><span class="line">    x:<span class="number">99</span>,</span><br><span class="line">    xx:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//var y=88;  //如果注释这个变量，y将是全局变量的77</span></span><br><span class="line">        alert(y); <span class="comment">//没有使用this指针，调用函数的对象无法影响y的值，函数运行时将从这里按作用域链逐级搜索取值</span></span><br><span class="line">        alert(<span class="keyword">this</span>.x);  <span class="comment">//使用了 this 指针，调用函数的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">a1.xx();</span><br><span class="line">a1.xx.call(<span class="built_in">window</span>);</span><br><span class="line"><span class="keyword">var</span> jj = a1.xx;</span><br><span class="line">jj(); <span class="comment">//效果跟a1.xx.call(window); 一样//试试下面代码</span></span><br><span class="line"><span class="keyword">var</span> x=<span class="number">99</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x=<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">this</span>.a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x</span><br><span class="line">    &#125;).call(<span class="keyword">this</span>); <span class="comment">//new 的时候执行了,匿名函数被 实例化的对象 调用</span></span><br><span class="line">    <span class="keyword">this</span>.b = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x</span><br><span class="line">    &#125;)(); <span class="comment">//new 的时候执行了,匿名函数被window调用</span></span><br><span class="line">    <span class="keyword">this</span>.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xbObj = <span class="keyword">new</span> xb();</span><br><span class="line"><span class="built_in">console</span>.log(xbObj.x);</span><br><span class="line"><span class="built_in">console</span>.log(xbObj.a);</span><br><span class="line"><span class="built_in">console</span>.log(xbObj.b);</span><br><span class="line"><span class="built_in">console</span>.log(xbObj.method());</span><br></pre></td></tr></table></figure></p><p>注意区分调用函数的对象、函数声明时的语法环境、函数调用语句的语法环境这几个概念<br>1、调用函数的对象(或者说函数的调用方式)决定了函数运行时函数体内的this指针指向谁<br>2、函数声明时的语法环境决定了函数运行时的访问权限<br>3、函数调用语句的语法环境决定了函数是否真的能够被调用及何时被调用(只有函数在某个语法环境是可见的，这个函数才能被调用)<br>函数在运行时，产生一个 arguments 对象可以访问传入函数内的参数,arguments 有一个属性可以指向函数自身：arguments.callee.<br>函数运行时，函数的 caller 属性可以指向本函数调用语句所在函数，比如，a函数在b函数体内被调用，则当a函数运行时，a.caller就指向了b函数，如果a 函数在全局环境中被调用则 a.caller=null<br>arguments 和a.caller 的值与函数的每一次调用直接关联，他们都是在函数运行时产生的，只能在函数体内访问。<br>IE8及IE8以下浏览器中，a 函数的内的 <code>arguments.caller</code>( IE9之后这个属性被移除) 指向 <code>a.caller</code>执行时的 <code>arguments （arguments.caller.callee === a.caller）</code>，</p><h3 id="字符串实时解析中的函数调用："><a href="#字符串实时解析中的函数调用：" class="headerlink" title="字符串实时解析中的函数调用："></a>字符串实时解析中的函数调用：</h3><p><code>eval()、new Function()、setTimeout()、setInterval()</code><br><code>eval() 与 window.eval()</code><br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'out of b'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">"in b"</span>); &#125;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; a(); &#125;;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">'a()'</span>); <span class="comment">// in b</span></span><br><span class="line">    <span class="built_in">window</span>.eval(<span class="string">'a()'</span>); <span class="comment">//out of b ,ie 6\7\8 in b, ie 9 out of b</span></span><br><span class="line">    (<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a();'</span>))(); <span class="comment">//out of b</span></span><br><span class="line">    setTimeout(<span class="string">'a()'</span>,<span class="number">1000</span>);   <span class="comment">// out of b </span></span><br><span class="line">    setTimeout(f,<span class="number">2000</span>);<span class="comment">// in b</span></span><br><span class="line">&#125;</span><br><span class="line">b();</span><br></pre></td></tr></table></figure></p><p>eval() 中的代码执行于eval() 语句所处的作用域内：<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Objinit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> param = <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">          execute:<span class="function"><span class="keyword">function</span>(<span class="params">codes</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">eval</span>(codes);</span><br><span class="line">          &#125;,</span><br><span class="line">          setCallback:<span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">this</span>.callback = f;</span><br><span class="line">          &#125;,</span><br><span class="line">          fireCallback:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">this</span>.callback &amp;&amp; <span class="keyword">this</span>.callback.call(<span class="keyword">this</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">         getParam:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">return</span> param;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = Objinit ();</span><br><span class="line"><span class="keyword">var</span> param = <span class="string">'outerParam'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(param,obj.getParam()); <span class="comment">//outerParam 123</span></span><br><span class="line">obj.execute(<span class="string">'param = 456'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(param,obj.getParam()); <span class="comment">//outerParam 456</span></span><br><span class="line">obj.setCallback(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">eval</span>(<span class="string">"param = 8888"</span>)&#125;);</span><br><span class="line">obj.fireCallback();</span><br><span class="line"><span class="built_in">console</span>.log(param,obj.getParam()); <span class="comment">//8888 456</span></span><br><span class="line">obj.setCallback(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">eval</span>(<span class="string">"eval(param = 9999)"</span>)&#125;);</span><br><span class="line">obj.fireCallback();</span><br><span class="line"><span class="built_in">console</span>.log(param,obj.getParam()); <span class="comment">//9999 456eval()</span></span><br></pre></td></tr></table></figure></p><p>字符串中解析出的代码运在 <code>eval</code> 所在的作用域，<code>window.eval()</code> 则是运行在顶级作用域（低版本 chrome 和 低于IE9 则同 <code>eval()</code>）.<br>IE 中 ，<code>window.execScript()</code>;  相当于 <code>window.eval()</code><br><code>new Function()</code>、<code>setTimeout()</code>、<code>setInterval()</code> 的第一个字符串参数所解析得到的代码，都是在顶级作用域执行。  </p><h3 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h3><p>要理解函数闭包，先了解 js 的垃圾自动回收机制。<br><code>number</code>、<code>string</code>、<code>boolean</code>、<code>undefined</code>、<code>null</code> 在运算和赋值操作中是复制传值，而对象类型的数据按引用传值，<br>js 的同一个对象型数据可能被多次引用，如果某个对象不再被引用，或者两个对象之间互相引用之外不在被第三方所引用，浏览器会自动释放其占用的内存空间。<br>函数被引用：函数被赋为其他对象的属性值，或者函数内部定义的数据在该函数外被使用，闭包的形成基于后一种情形。<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">1</span>;</span><br><span class="line">    f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> ++a;&#125;;</span><br><span class="line">&#125;</span><br><span class="line">fun(); <span class="comment">//产生一个闭包</span></span><br><span class="line">f(); <span class="comment">//  闭包中 a=2</span></span><br><span class="line">f(); <span class="comment">// 闭包中 a =3  ，模拟静态变量</span></span><br></pre></td></tr></table></figure></p><p>在 fun 内 声明的匿名函数赋给 fun 外的变量 f，该匿名函数内使用了在 fun 内声明的变量 a，于是 f可以访问 变量 a，为了维持这种访问权限(f执 行时需要访问a，但何时执行未定)， fun() 执行完毕产生的变量 a 不能被释放（除非f 中的函数被释放），于是产生了一个闭包（变量 a 被封 闭了，供 f 使用）。<br>产生闭包的关键是，一个在函数 A内的声明的函数 B被传出 A 之外，并且 B 函数内使用了在 函数A 内生成的数据（声明或按值传参）,<br>函数B传出函数A之外的方式有多种，如：<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">a</span>:<span class="number">123</span>,<span class="attr">b</span>:<span class="number">456</span>, <span class="attr">c</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> ++a;&#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fun();</span><br><span class="line">f.c(); <span class="comment">//a=2</span></span><br></pre></td></tr></table></figure></p><p>广义上来说，函数运行时都会形成闭包，没有数据在函数外被引用时，闭包的生命周期很短：函数执行完毕即释放。<br>闭包的独立性：即使由同一个函数产生的多个闭包也是相互独立的<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> ++a;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1 =  fun(); <span class="comment">//一份闭包</span></span><br><span class="line"><span class="keyword">var</span> f2 = fun(); <span class="comment">//另一份闭包</span></span><br><span class="line">alert(f1()); <span class="comment">//2</span></span><br><span class="line">alert(f1()); <span class="comment">//3</span></span><br><span class="line">alert(f2()); <span class="comment">//2</span></span><br><span class="line">alert(f2()); <span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><p>这两份闭包中的变量 a 是不同的数据，每产生一份闭包， fun() 执行了一次，  变量声明语句也执行了一次。<br>js oop 编程中闭包可以用于模拟私有成员、构造单体类<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MakeItem</span>(<span class="params">name,val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> myName,myVal; <span class="comment">//私有属性</span></span><br><span class="line">    <span class="comment">//私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        myname=name; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setVal</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        myVal=val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行new构造对象时调用内部私有方法 </span></span><br><span class="line">    setName(name);</span><br><span class="line">    setVal(val);</span><br><span class="line">    <span class="comment">//公共方法</span></span><br><span class="line">    <span class="keyword">this</span>.getName=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> myName; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.getVal=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> myVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> MakeItem(<span class="string">"name"</span>,<span class="number">100</span>);</span><br><span class="line">obj.myname; <span class="comment">//undefined 无法在外面访问私有属性</span></span><br><span class="line">obj.getName(); <span class="comment">//ok</span></span><br></pre></td></tr></table></figure></p><p>下面是一种单体类构建方法<br>复制代码代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance = <span class="literal">null</span>; <span class="comment">//在闭包中保存单体类的实例</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!instance)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>===<span class="built_in">window</span>)&#123;               </span><br><span class="line">               args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>);               </span><br><span class="line">                instance = <span class="keyword">new</span> <span class="built_in">arguments</span>.callee();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">this</span>.init.apply(<span class="keyword">this</span>,args||<span class="built_in">arguments</span>);</span><br><span class="line">                instance = <span class="keyword">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;;</span><br><span class="line">    f.prototype = &#123;</span><br><span class="line">        init:<span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.a = a;</span><br><span class="line">            <span class="keyword">this</span>.b = b;</span><br><span class="line">            <span class="keyword">this</span>.c = c;      </span><br><span class="line">            <span class="keyword">this</span>.method1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">"method 1"</span>); &#125;;</span><br><span class="line">            <span class="keyword">this</span>.method1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">"method 1"</span>); &#125;;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"init instance"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    f.prototype.constructor = f.prototype.init;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line"> </span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//单体的使用</span></span><br><span class="line"><span class="keyword">var</span> obj1 =  Singleton(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="built_in">console</span>.log(obj1===obj2,obj2===obj3); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="comment">//一个单体类声明函数</span></span><br><span class="line"><span class="keyword">var</span> SingletonDefine= <span class="function"><span class="keyword">function</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> args = <span class="literal">null</span>;      </span><br><span class="line">        <span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!instance)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>===<span class="built_in">window</span>)&#123;</span><br><span class="line">                    args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">0</span>);                   </span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="built_in">arguments</span>.callee();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    fun.apply(<span class="keyword">this</span>,args||<span class="built_in">arguments</span>);                   </span><br><span class="line">                    instance = <span class="keyword">this</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        f.prototype = fun.prototype;</span><br><span class="line">        f.prototype.constructor = fun;            </span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">    <span class="keyword">this</span>.b = b;</span><br><span class="line">    <span class="keyword">this</span>.c = c;</span><br><span class="line">    <span class="keyword">this</span>.method1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">"method 1"</span>); &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"init instance"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fun.prototype.method2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">'method 2'</span>); &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单体类声明函数用法</span></span><br><span class="line"><span class="keyword">var</span> Singleton = SingletonDefine(fun);</span><br><span class="line"><span class="keyword">var</span> obj1 =  Singleton(<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> Singleton(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj1===obj2,obj2===obj3);</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="comment">//console.log(obj1.toSource()); //firefox</span></span><br><span class="line">obj1.method1();</span><br><span class="line">obj1.method2();</span><br></pre></td></tr></table></figure></p><p>IE6 的内存泄露与闭包<br>在IE 6 中，非原生js对象（DOM 等）的循环引用会导致内存泄露，使用闭包时如果涉及非 js 原生对象引用时要注意。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">'a'</span>);</span><br><span class="line">    node.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(node.value); </span><br><span class="line">&#125;;</span><br><span class="line">node = <span class="literal">null</span>; <span class="comment">//打断循环引用防止内存泄露</span></span><br></pre></td></tr></table></figure></p><p><code>node</code> 保存的是 <code>DOM</code> 对象，<code>DOM</code>对象存在于<code>fun</code> 之外(并且一直存在，即使删除也只是从文档树移出)，fun 执行后产生闭包，也构成DOM对象与回调函数的循环引用（<code>node-function-node</code>），在IE 6 下发生内存泄露。</p><hr><p>您可能感兴趣的文章:</p><h6 id="关于javascript-回调函数中变量作用域的讨论"><a href="#关于javascript-回调函数中变量作用域的讨论" class="headerlink" title="关于javascript 回调函数中变量作用域的讨论"></a>关于javascript 回调函数中变量作用域的讨论</h6><h6 id="JavaScript的变量作用域深入理解"><a href="#JavaScript的变量作用域深入理解" class="headerlink" title="JavaScript的变量作用域深入理解"></a>JavaScript的变量作用域深入理解</h6><h6 id="网易JS面试题与Javascript词法作用域说明"><a href="#网易JS面试题与Javascript词法作用域说明" class="headerlink" title="网易JS面试题与Javascript词法作用域说明"></a>网易JS面试题与Javascript词法作用域说明</h6><h6 id="JavaScript中的作用域链和闭包"><a href="#JavaScript中的作用域链和闭包" class="headerlink" title="JavaScript中的作用域链和闭包"></a>JavaScript中的作用域链和闭包</h6><h6 id="深入Javascript函数、递归与闭包-执行环境、变量对象与作用域链-使用详解"><a href="#深入Javascript函数、递归与闭包-执行环境、变量对象与作用域链-使用详解" class="headerlink" title="深入Javascript函数、递归与闭包(执行环境、变量对象与作用域链)使用详解"></a>深入Javascript函数、递归与闭包(执行环境、变量对象与作用域链)使用详解</h6><h6 id="深入理解JavaScript高级之词法作用域和作用域链"><a href="#深入理解JavaScript高级之词法作用域和作用域链" class="headerlink" title="深入理解JavaScript高级之词法作用域和作用域链"></a>深入理解JavaScript高级之词法作用域和作用域链</h6><h6 id="深入理解Javascript中this的作用域"><a href="#深入理解Javascript中this的作用域" class="headerlink" title="深入理解Javascript中this的作用域"></a>深入理解Javascript中this的作用域</h6><h6 id="浅谈Javascript变量作用域问题"><a href="#浅谈Javascript变量作用域问题" class="headerlink" title="浅谈Javascript变量作用域问题"></a>浅谈Javascript变量作用域问题</h6><h6 id="javascript作用域问题实例分析"><a href="#javascript作用域问题实例分析" class="headerlink" title="javascript作用域问题实例分析"></a>javascript作用域问题实例分析</h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是对javascript在的函数及作用域进行了详细的总结介绍，需要的朋友可以过来参考下，希望对大家有所帮助&lt;br&gt;在js中使用函数注意三点：&lt;/p&gt;
&lt;p&gt;1、函数被调用时，它是运行在他被声明时的语法环境中的；&lt;br&gt;2、函数自己无法运行，它总是被对象调用的，函数运行时，函数体内的this指针指向调用该函数的对象，如果调用函数时没有明确指定该对象， this 默认指向 window ( strict 模式除外，本文不涉及 strict 模式)；&lt;br&gt;3、函数是一种带有可执行代码的对象类型数据。&lt;/p&gt;
&lt;h3 id=&quot;声明函数&quot;&gt;&lt;a href=&quot;#声明函数&quot; class=&quot;headerlink&quot; title=&quot;声明函数&quot;&gt;&lt;/a&gt;声明函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;1、使用 function 关键字&lt;br&gt;复制代码代码如下:  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;myfun&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;//声明名为myfun的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery的deferred对象使用详解</title>
    <link href="http://yoursite.com/2017/06/16/jQuery-Deferred/"/>
    <id>http://yoursite.com/2017/06/16/jQuery-Deferred/</id>
    <published>2017-06-16T09:41:00.000Z</published>
    <updated>2017-06-16T09:51:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是deferred对象？"><a href="#什么是deferred对象？" class="headerlink" title="什么是deferred对象？"></a>什么是deferred对象？</h3><p>开发网站的过程中，我们经常遇到某些耗时很长的javascript操作。其中，既有异步的操作（比如ajax读取服务器数据），也有同步的操作（比如遍历一个大型数组），它们都不是立即能得到结果的。<br>通常的解决方法是，为它们指定回调函数（callback）。即事先规定，一旦它们运行结束，应该调用哪些函数。<br>但是，在回调函数方面，jQuery的功能非常弱。为了改变这一点，jQuery开发团队就设计了<code>deferred</code>对象。<br>简单说，<code>deferred</code>对象就是jQuery的回调函数解决方案。 在英语中，defer的意思是”延迟”，所以deferred对象的含义就是”延迟”到未来某个点再执行。<br>它解决了如何处理耗时操作的问题，对那些操作提供了更好的控制，以及统一的编程接口。它的主要功能，可以归结为四点。下面我们通过示例代码，一步步来学习。  </p><a id="more"></a><h3 id="ajax操作的链式写法"><a href="#ajax操作的链式写法" class="headerlink" title="ajax操作的链式写法"></a>ajax操作的链式写法</h3><p>jQuery的ajax操作，传统写法是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　$.ajax(&#123;</span><br><span class="line"></span><br><span class="line">　　　　url: &quot;test.html&quot;,</span><br><span class="line"></span><br><span class="line">　　　　success: function()&#123; </span><br><span class="line">　　　　　　alert(&quot;哈哈，成功了！&quot;); </span><br><span class="line">　　　　&#125;,</span><br><span class="line"></span><br><span class="line">　　　　error:function()&#123; </span><br><span class="line">　　　　　　alert(&quot;出错啦！&quot;); </span><br><span class="line">　　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure></p><p>在上面的代码中，<code>$.ajax()</code>接受一个对象参数，这个对象包含两个方法：<code>success</code>方法指定操作成功后的回调函数，<code>error</code>方法指定操作失败后的回调函数。</p><p><code>$.ajax()</code>操作完成后，如果高于<code>1.5.0</code>版本，返回的是<code>deferred</code>对象，可以进行链式操作。</p><p>新的写法是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　$.ajax(&quot;test.html&quot;)</span><br><span class="line"></span><br><span class="line">　　.done(function()&#123; alert(&quot;哈哈，成功了！&quot;); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(function()&#123; alert(&quot;出错啦！&quot;); &#125;);</span><br></pre></td></tr></table></figure><p>可以看到，<code>done()</code>相当于success方法，<code>fail()</code>相当于error方法。采用链式写法以后，代码的可读性大大提高。</p><h3 id="指定同一操作的多个回调函数"><a href="#指定同一操作的多个回调函数" class="headerlink" title="指定同一操作的多个回调函数"></a>指定同一操作的多个回调函数</h3><p><code>deferred</code>对象的一大好处，就是它允许你自由添加多个回调函数。</p><p>还是以上面的代码为例，如果ajax操作成功后，除了原来的回调函数，我还想再运行一个回调函数，怎么办？</p><p>很简单，直接把它加在后面就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　　$.ajax(&quot;test.html&quot;)</span><br><span class="line"></span><br><span class="line">　　.done(function()&#123; alert(&quot;哈哈，成功了！&quot;);&#125; )</span><br><span class="line"></span><br><span class="line">　　.fail(function()&#123; alert(&quot;出错啦！&quot;); &#125; )</span><br><span class="line"></span><br><span class="line">　　.done(function()&#123; alert(&quot;第二个回调函数！&quot;);&#125; );</span><br></pre></td></tr></table></figure><p>回调函数可以添加任意多个，它们按照添加顺序执行。</p><h3 id="为多个操作指定回调函数"><a href="#为多个操作指定回调函数" class="headerlink" title="为多个操作指定回调函数"></a>为多个操作指定回调函数</h3><p><code>deferred</code>对象的另一大好处，就是它允许你为多个事件指定一个回调函数，这是传统写法做不到的。</p><p>请看下面的代码，它用到了一个新的方法<code>$.when()</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　$.when($.ajax(&quot;test1.html&quot;), $.ajax(&quot;test2.html&quot;))</span><br><span class="line"></span><br><span class="line">　　.done(function()&#123; alert(&quot;哈哈，成功了！&quot;); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(function()&#123; alert(&quot;出错啦！&quot;); &#125;);</span><br></pre></td></tr></table></figure></p><p>这段代码的意思是，先执行两个操作<code>$.ajax(&quot;test1.html&quot;)</code>和<code>$.ajax(&quot;test2.html&quot;)</code>，如果成功了，就运行<code>done()</code>指定的回调函数；如果有一个失败或都失败了，就执行<code>fail()</code>指定的回调函数。</p><h3 id="普通操作的回调函数接口（上）"><a href="#普通操作的回调函数接口（上）" class="headerlink" title="普通操作的回调函数接口（上）"></a>普通操作的回调函数接口（上）</h3><p><code>deferred</code>对象的最大优点，就是它把这一套回调函数接口，从ajax操作扩展到了所有操作。也就是说，任何一个操作—-<code>不管是ajax操作还是本地操作，也不管是异步操作还是同步操作----都可以使用deferred对象的各种方法</code>，指定回调函数。</p><p>我们来看一个具体的例子。假定有一个很耗时的操作wait：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　var wait = function()&#123;</span><br><span class="line"></span><br><span class="line">　　　　var tasks = function()&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　alert(&quot;执行完毕！&quot;);</span><br><span class="line"></span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　setTimeout(tasks,5000);</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br></pre></td></tr></table></figure></p><p>我们为它指定回调函数，应该怎么做呢？</p><p>很自然的，你会想到，可以使用$.when()：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　$.when(wait())</span><br><span class="line"></span><br><span class="line">　　.done(function()&#123; alert(&quot;哈哈，成功了！&quot;); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(function()&#123; alert(&quot;出错啦！&quot;); &#125;);</span><br></pre></td></tr></table></figure></p><p>但是，有一个问题。<code>$.when()</code>的参数只能是<code>deferred</code>对象，所以必须对wait进行改写，所以我们需要手动新建一个deferred对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">　　var dtd = $.Deferred(); // 新建一个deferred对象</span><br><span class="line"></span><br><span class="line">　　var wait = function(dtd)&#123;</span><br><span class="line"></span><br><span class="line">　　　　var tasks = function()&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　alert(&quot;执行完毕！&quot;);</span><br><span class="line"></span><br><span class="line">　　　　　　dtd.resolve(); // 改变deferred对象的执行状态</span><br><span class="line"></span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　setTimeout(tasks,5000);</span><br><span class="line"></span><br><span class="line">　　　　return dtd.promise();//返回promise对象</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br></pre></td></tr></table></figure></p><p>这里有两个地方需要注意。</p><p>首先，最后一行不能直接返回<code>dtd</code>，必须返回<code>dtd.promise()</code>。原因是jQuery规定，任意一个deferred对象有三种执行状态—-未完成，已完成和已失败。如果直接返回<code>dtd</code>，<code>$.when()</code>的默认执行状态为”已完成”，立即触发后面的<code>done()</code>方法，这就失去回调函数的作用了。<code>dtd.promise()</code>的目的，就是保证目前的执行状态—-也就是”未完成”—-不变，从而确保只有操作完成后，才会触发回调函数。</p><p>其次，当操作完成后，必须手动改变<code>Deferred</code>对象的执行状态，否则回调函数无法触发。<code>dtd.resolve()</code>的作用，就是将dtd的执行状态从”未完成”变成”已完成”，从而触发<code>done()</code>方法。</p><p>最后别忘了，修改完<code>wait</code>之后，调用的时候就必须直接传入<code>dtd</code>参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　　$.when(wait(dtd))</span><br><span class="line"></span><br><span class="line">　　.done(function()&#123; alert(&quot;哈哈，成功了！&quot;); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(function()&#123; alert(&quot;出错啦！&quot;); &#125;);</span><br></pre></td></tr></table></figure></p><p>上面的代码有一些问题，就是<code>dtd对象是暴露在全局的</code>，所以我们可以通过在全局进行<code>dtd.resolve()</code>来提前回调。</p><p>为了避免这种情况，jQuery提供了deferred.promise()方法，它的作用是，在原来的deferred对象上返回另一个deferred对象，后者只开放与改变执行状态无关的方法（比如done方法和fail方法）屏蔽与改变执行状态有关的方法（比如resolve和reject方法）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var dtd = $.Deferred(); // 新建一个Deferred对象</span><br><span class="line">var wait = function(dtd)&#123;</span><br><span class="line"></span><br><span class="line">    var tasks = function()&#123;</span><br><span class="line"></span><br><span class="line">        alert(&quot;执行完毕！&quot;);</span><br><span class="line"></span><br><span class="line">        dtd.resolve(); // 改变Deferred对象的执行状态</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    setTimeout(tasks,5000);</span><br><span class="line"></span><br><span class="line">    return dtd.promise(); // 返回promise对象</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var d = wait(dtd); // 新建一个d对象，改为对这个对象进行操作</span><br><span class="line"></span><br><span class="line">$.when(d)</span><br><span class="line"></span><br><span class="line">    .done(function()&#123; alert(&quot;哈哈，成功了！&quot;); &#125;)</span><br><span class="line"></span><br><span class="line">    .fail(function()&#123; alert(&quot;出错啦！&quot;); &#125;);</span><br><span class="line"></span><br><span class="line">d.resolve(); // 此时，这个语句是无效的</span><br></pre></td></tr></table></figure><p>当然，我们也可以把dtd包在函数内：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var wait = function(dtd)&#123;</span><br><span class="line">    var dtd = $.Deferred(); //在函数内部，新建一个Deferred对象</span><br><span class="line">    var tasks = function()&#123;</span><br><span class="line">        alert(&quot;执行完毕！&quot;);</span><br><span class="line">        dtd.resolve(); // 改变Deferred对象的执行状态</span><br><span class="line">    &#125;;</span><br><span class="line">    setTimeout(tasks,5000);</span><br><span class="line">    return dtd.promise(); // 返回promise对象</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$.when(wait())</span><br><span class="line">    .done(function()&#123; alert(&quot;哈哈，成功了！&quot;); &#125;)</span><br><span class="line">    .fail(function()&#123; alert(&quot;出错啦！&quot;); &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="普通操作的回调函数接口（中）"><a href="#普通操作的回调函数接口（中）" class="headerlink" title="普通操作的回调函数接口（中）"></a>普通操作的回调函数接口（中）</h3><p>除了使用<code>$.when()</code>为普通操作添加回调函数，还可以使用deferred对象的建构函数<code>$.Deferred()</code>。</p><p>这时，wait函数还是保持不变，我们直接把它传入$.Deferred(),完整代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">　　　<span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　alert(<span class="string">"执行完毕！"</span>);</span><br><span class="line"></span><br><span class="line">　　　　　　dtd.resolve(); <span class="comment">// 改变Deferred对象的执行状态</span></span><br><span class="line"></span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　setTimeout(tasks,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">return</span> dtd.promise();</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br><span class="line"></span><br><span class="line">　　$.Deferred(wait)</span><br><span class="line"></span><br><span class="line">　　.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br></pre></td></tr></table></figure><p>jQuery规定，<code>$.Deferred()</code>可以接受一个函数作为参数，该函数将在<code>$.Deferred()</code>返回结果之前执行。并且，<code>$.Deferred()</code>所生成的Deferred对象将作为这个函数的默认参数。</p><h3 id="普通操作的回调函数接口（下）"><a href="#普通操作的回调函数接口（下）" class="headerlink" title="普通操作的回调函数接口（下）"></a>普通操作的回调函数接口（下）</h3><p>除了上面两种方法以外，我们还可以直接在wait对象上部署deferred接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="keyword">var</span> dtd = $.Deferred(); <span class="comment">// 生成Deferred对象</span></span><br><span class="line"></span><br><span class="line">　　<span class="keyword">var</span> wait = <span class="function"><span class="keyword">function</span>(<span class="params">dtd</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　<span class="keyword">var</span> tasks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">　　　　　　alert(<span class="string">"执行完毕！"</span>);</span><br><span class="line"></span><br><span class="line">　　　　　　dtd.resolve(); <span class="comment">// 改变Deferred对象的执行状态</span></span><br><span class="line"></span><br><span class="line">　　　　&#125;;</span><br><span class="line"></span><br><span class="line">　　　　setTimeout(tasks,<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">　　&#125;;</span><br><span class="line"></span><br><span class="line">　　dtd.promise(wait);</span><br><span class="line"></span><br><span class="line">　　wait.done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"哈哈，成功了！"</span>); &#125;)</span><br><span class="line"></span><br><span class="line">　　.fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"出错啦！"</span>); &#125;);</span><br><span class="line"></span><br><span class="line">　　wait(dtd);</span><br></pre></td></tr></table></figure><p>这里的关键是<code>dtd.promise(wait)</code>这一行，它的作用就是在wait对象上部署Deferred接口。正是因为有了这一行，后面才能直接在wait上面调用<code>done()</code>和<code>fail()</code>。</p><h3 id="小结：deferred对象的方法"><a href="#小结：deferred对象的方法" class="headerlink" title="小结：deferred对象的方法"></a>小结：deferred对象的方法</h3><p>前面已经讲到了deferred对象的多种方法，下面做一个总结：</p><ul><li><p>$.Deferred()生成一个deferred对象。</p></li><li><p>deferred.done()指定操作成功时的回调函数</p></li><li><p>deferred.fail()指定操作失败时的回调函数</p></li><li><p>deferred.promise()没有参数时，作用为保持deferred对象的运行状态不变；接受参数时，作用为在参数对象上部署deferred接口。</p></li><li><p>deferred.resolve()手动改变deferred对象的运行状态为”已完成”，从而立即触发done()方法。</p></li><li><p>$.when()为多个操作指定回调函数。</p><p>除了这些方法以外，deferred对象还有三个重要方法，上面的教程中没有涉及到。</p></li><li><p>deferred.then()</p><p>有时为了省事，可以把done()和fail()合在一起写，这就是then()方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　$.when($.ajax( &quot;/main.php&quot; ))</span><br><span class="line"></span><br><span class="line">　　.then(successFunc, failureFunc );</span><br></pre></td></tr></table></figure><p> 如果then()有两个参数，那么第一个参数是done()方法的回调函数，第二个参数是fail()方法的回调方法。如果then()只有一个参数，那么等同于done()。</p></li><li><p>deferred.reject()</p><p>这个方法与deferred.resolve()正好相反，调用后将deferred对象的运行状态变为”已失败”，从而立即触发fail()方法。</p></li><li><p>deferred.always()</p><p>这个方法也是用来指定回调函数的，它的作用是，不管调用的是deferred.resolve()还是deferred.reject()，最后总是执行。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.ajax( &quot;test.html&quot; )</span><br><span class="line"></span><br><span class="line">　　.always( function() &#123; alert(&quot;已执行！&quot;);&#125; );</span><br></pre></td></tr></table></figure><ul><li>本文转自网络，侵删。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是deferred对象？&quot;&gt;&lt;a href=&quot;#什么是deferred对象？&quot; class=&quot;headerlink&quot; title=&quot;什么是deferred对象？&quot;&gt;&lt;/a&gt;什么是deferred对象？&lt;/h3&gt;&lt;p&gt;开发网站的过程中，我们经常遇到某些耗时很长的javascript操作。其中，既有异步的操作（比如ajax读取服务器数据），也有同步的操作（比如遍历一个大型数组），它们都不是立即能得到结果的。&lt;br&gt;通常的解决方法是，为它们指定回调函数（callback）。即事先规定，一旦它们运行结束，应该调用哪些函数。&lt;br&gt;但是，在回调函数方面，jQuery的功能非常弱。为了改变这一点，jQuery开发团队就设计了&lt;code&gt;deferred&lt;/code&gt;对象。&lt;br&gt;简单说，&lt;code&gt;deferred&lt;/code&gt;对象就是jQuery的回调函数解决方案。 在英语中，defer的意思是”延迟”，所以deferred对象的含义就是”延迟”到未来某个点再执行。&lt;br&gt;它解决了如何处理耗时操作的问题，对那些操作提供了更好的控制，以及统一的编程接口。它的主要功能，可以归结为四点。下面我们通过示例代码，一步步来学习。  &lt;/p&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://yoursite.com/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
      <category term="$.Deferred()" scheme="http://yoursite.com/tags/Deferred/"/>
    
  </entry>
  
  <entry>
    <title>原生js仿jquery一些常用方法</title>
    <link href="http://yoursite.com/2017/05/07/Native-JS-imitation-jQuery/"/>
    <id>http://yoursite.com/2017/05/07/Native-JS-imitation-jQuery/</id>
    <published>2017-05-07T14:28:57.000Z</published>
    <updated>2017-05-07T15:02:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前在网上发现这篇文章，觉得挺不错的，现在就分享给大家，也给大家做个参考。侵删！</p></blockquote><p>最近迷上了原生js，能不用jquery等框架的情况都会手写一些js方法，记得刚接触前端的时候为了选择器而使用jquery。。。现在利用扩展原型的方法实现一些jquery函数：</p><h3 id="显示-隐藏"><a href="#显示-隐藏" class="headerlink" title="显示/隐藏"></a>显示/隐藏</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hide() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.hide = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.style.display=<span class="string">"none"</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//show() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.style.display=<span class="string">"block"</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>return this的好处在于链式调用。<br><a id="more"></a></p><h3 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h3><p>   省略speed和callback的传入，因为要加一串判断和处理回调，代码量大<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//slideDown() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.slideDown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.style.display = <span class="string">'block'</span>; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.clientHeight&lt;<span class="keyword">this</span>.scrollHeight)&#123; </span><br><span class="line">        <span class="keyword">this</span>.style.height=<span class="number">10</span>+<span class="keyword">this</span>.clientHeight+<span class="string">"px"</span>; </span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>; </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;_this.slideDown()&#125;,<span class="number">10</span>) </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.style.height=<span class="keyword">this</span>.scrollHeight+<span class="string">"px"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//slideUp() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.slideUp = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.clientHeight&gt;<span class="number">0</span>)&#123; </span><br><span class="line">        <span class="keyword">this</span>.style.height=<span class="keyword">this</span>.clientHeight<span class="number">-10</span>+<span class="string">"px"</span>; </span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>; </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;_this.slideUp()&#125;,<span class="number">10</span>) </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.style.height=<span class="number">0</span>; </span><br><span class="line">        <span class="keyword">this</span>.style.display = <span class="string">'none'</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="捕获-设置"><a href="#捕获-设置" class="headerlink" title="捕获/设置"></a>捕获/设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//attr() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.attr = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">1</span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">"this."</span>+<span class="built_in">arguments</span>[<span class="number">0</span>]); </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">2</span>)&#123; </span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">"this."</span>+<span class="built_in">arguments</span>[<span class="number">0</span>]+<span class="string">"="</span>+<span class="built_in">arguments</span>[<span class="number">1</span>]); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//val() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.val = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">0</span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value; </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">1</span>)&#123; </span><br><span class="line">        <span class="keyword">this</span>.value = <span class="built_in">arguments</span>[<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//html() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.html = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">0</span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.innerHTML; </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">1</span>)&#123; </span><br><span class="line">        <span class="keyword">this</span>.innerHTML = <span class="built_in">arguments</span>[<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line"> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//text()需要在html()结果基础上排除标签，会很长，省略</span></span><br></pre></td></tr></table></figure><h3 id="CSS方法"><a href="#CSS方法" class="headerlink" title="CSS方法"></a>CSS方法</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//css() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.css = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">1</span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">"this.style."</span>+<span class="built_in">arguments</span>[<span class="number">0</span>]); </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">2</span>)&#123; </span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">"this.style."</span>+<span class="built_in">arguments</span>[<span class="number">0</span>]+<span class="string">"='"</span>+<span class="built_in">arguments</span>[<span class="number">1</span>]+<span class="string">"'"</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//append() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.append = <span class="function"><span class="keyword">function</span>(<span class="params">newElem</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.innerHTML += newElem; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//prepend() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.prepend = <span class="function"><span class="keyword">function</span>(<span class="params">newElem</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.innerHTML = <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="keyword">this</span>.innerHTML; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//after() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params">newElem</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.outerHTML += <span class="built_in">arguments</span>[<span class="number">0</span>]; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//before() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">newElem</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.outerHTML = <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="keyword">this</span>.outerHTML; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除-替换元素"><a href="#删除-替换元素" class="headerlink" title="删除/替换元素"></a>删除/替换元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//empty() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.empty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.innerHTML = <span class="string">""</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//replaceWith() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.replaceWith = <span class="function"><span class="keyword">function</span>(<span class="params">newElem</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.outerHTML = <span class="built_in">arguments</span>[<span class="number">0</span>]; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//remove() js自带，省略。</span></span><br></pre></td></tr></table></figure><h3 id="设置css类"><a href="#设置css类" class="headerlink" title="设置css类"></a>设置css类</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hasClass() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.hasClass = <span class="function"><span class="keyword">function</span>(<span class="params">cName</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> !!<span class="keyword">this</span>.className.match( <span class="keyword">new</span> <span class="built_in">RegExp</span>( <span class="string">"(\\s|^)"</span> + cName + <span class="string">"(\\s|$)"</span>) ); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//addClass() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">cName</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>( !<span class="keyword">this</span>.hasClass( cName ) )&#123; </span><br><span class="line">        <span class="keyword">this</span>.className += <span class="string">" "</span> + cName; </span><br><span class="line">    &#125; </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//removeClass() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.removeClass = <span class="function"><span class="keyword">function</span>(<span class="params">cName</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.hasClass( cName ) )&#123; </span><br><span class="line">        <span class="keyword">this</span>.className = <span class="keyword">this</span>.className.replace( <span class="keyword">new</span> <span class="built_in">RegExp</span>( <span class="string">"(\\s|^)"</span> + cName + <span class="string">"(\\s|$)"</span> ),<span class="string">" "</span> ); </span><br><span class="line">    &#125; </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的设置CSS类也可以利用html5新API classList及contains实现     但不兼容IE8以下及部分火狐浏览器</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasClass = <span class="function"><span class="keyword">function</span>(<span class="params">cName</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.classList.contains(cName) </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">Object</span>.prototype.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">cName</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>( !<span class="keyword">this</span>.hasClass( cName ) )&#123; </span><br><span class="line">        <span class="keyword">this</span>.classList.add(cName); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">Object</span>.prototype.removeClass = <span class="function"><span class="keyword">function</span>(<span class="params">cName</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.hasClass( cName ) )&#123; </span><br><span class="line">        <span class="keyword">this</span>.classList.remove(cName); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//id或class选择器$("elem") </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">strExpr</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> idExpr = <span class="regexp">/^(?:\s*(&lt;[\w\W]+&gt;)[^&gt;]*|#([\w-]*))$/</span>; </span><br><span class="line">    <span class="keyword">var</span> classExpr = <span class="regexp">/^(?:\s*(&lt;[\w\W]+&gt;)[^&gt;]*|.([\w-]*))$/</span>; </span><br><span class="line">    <span class="keyword">if</span>(idExpr.test(strExpr))&#123; </span><br><span class="line">        <span class="keyword">var</span> idMatch = idExpr.exec(strExpr); </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(idMatch[<span class="number">2</span>]); </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(classExpr.test(strExpr))&#123; </span><br><span class="line">        <span class="keyword">var</span> classMatch = classExpr.exec(strExpr); </span><br><span class="line">        <span class="keyword">var</span> allElement = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"*"</span>); </span><br><span class="line">        <span class="keyword">var</span> ClassMatch = []; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,l=allElement.length; i&lt;l; i++)&#123; </span><br><span class="line">            <span class="keyword">if</span>(allElement[i].className.match( <span class="keyword">new</span> <span class="built_in">RegExp</span>( <span class="string">"(\\s|^)"</span> + classMatch[<span class="number">2</span>] + <span class="string">"(\\s|$)"</span>) ))&#123; </span><br><span class="line">                ClassMatch.push(allElement[i]); </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> ClassMatch; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要强调的是，选择器返回的结果或结果集包含的是htmlDOM，并非jquery的对象。大多数人都知道，document.getElementById(“id”)等价于jquery$(“#id”)[0]，另外上面class选择器选择的结果如需使用，需要利用forEach遍历：  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".cls"</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; </span><br><span class="line">    e.css(<span class="string">"background"</span>,<span class="string">"#f6f6f6"</span>) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="遍历-siblings-和children-获取的结果也需要结合forEach使用"><a href="#遍历-siblings-和children-获取的结果也需要结合forEach使用" class="headerlink" title="遍历 siblings()和children()获取的结果也需要结合forEach使用"></a>遍历 siblings()和children()获取的结果也需要结合forEach使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//siblings() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.siblings = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> chid=<span class="keyword">this</span>.parentNode.children; </span><br><span class="line">    <span class="keyword">var</span> eleMatch = []; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,l=chid.length;i&lt;l;i++)&#123; </span><br><span class="line">        <span class="keyword">if</span>(chid[i]!=<span class="keyword">this</span>)&#123; </span><br><span class="line">            eleMatch.push(chid[i]); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> eleMatch; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//children() 原生js已含有该方法，故命名为userChildren。 </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.userChildren = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> chid=<span class="keyword">this</span>.childNodes; </span><br><span class="line">    <span class="keyword">var</span> eleMatch = []; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,l=chid.length;i&lt;l;i++)&#123; </span><br><span class="line">        eleMatch.push(chid[i]); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> eleMatch; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//parent() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.parent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.parentNode; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//next() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.nextElementSibling; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//prev() </span></span><br><span class="line"><span class="built_in">Object</span>.prototype.prev = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.previousElementSibling; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jquery事件函数原生js已有，另外，原生js实现jquery的一个常用函数 ajax 将会在下一篇写道。</li></ul><h3 id="原生js实现ajax方法"><a href="#原生js实现ajax方法" class="headerlink" title="原生js实现ajax方法"></a>原生js实现ajax方法</h3><p>如下是一个比较完整的ajax()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> ajaxData = &#123; </span><br><span class="line">        type:<span class="built_in">arguments</span>[<span class="number">0</span>].type || <span class="string">"GET"</span>, </span><br><span class="line">        url:<span class="built_in">arguments</span>[<span class="number">0</span>].url || <span class="string">""</span>, </span><br><span class="line">        <span class="keyword">async</span>:<span class="built_in">arguments</span>[<span class="number">0</span>].async || <span class="string">"true"</span>, </span><br><span class="line">        data:<span class="built_in">arguments</span>[<span class="number">0</span>].data || <span class="literal">null</span>, </span><br><span class="line">        dataType:<span class="built_in">arguments</span>[<span class="number">0</span>].dataType || <span class="string">"text"</span>, </span><br><span class="line">        contentType:<span class="built_in">arguments</span>[<span class="number">0</span>].contentType || <span class="string">"application/x-www-form-urlencoded"</span>, </span><br><span class="line">        beforeSend:<span class="built_in">arguments</span>[<span class="number">0</span>].beforeSend || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, </span><br><span class="line">        success:<span class="built_in">arguments</span>[<span class="number">0</span>].success || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, </span><br><span class="line">        error:<span class="built_in">arguments</span>[<span class="number">0</span>].error || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">    &#125; </span><br><span class="line">    ajaxData.beforeSend() </span><br><span class="line">    <span class="keyword">var</span> xhr = createxmlHttpRequest();  </span><br><span class="line">    xhr.responseType=ajaxData.dataType; </span><br><span class="line">    xhr.open(ajaxData.type,ajaxData.url,ajaxData.async);  </span><br><span class="line">    xhr.setRequestHeader(<span class="string">"Content-Type"</span>,ajaxData.contentType);  </span><br><span class="line">    xhr.send(convertData(ajaxData.data));  </span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;  </span><br><span class="line">          <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123; </span><br><span class="line">            ajaxData.success(xhr.response) </span><br><span class="line">          &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">            ajaxData.error() </span><br><span class="line">          &#125;  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createxmlHttpRequest</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertData</span>(<span class="params">data</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span> data === <span class="string">'object'</span> )&#123; </span><br><span class="line">        <span class="keyword">var</span> convertResult = <span class="string">""</span> ;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> c <span class="keyword">in</span> data)&#123;  </span><br><span class="line">            convertResult+= c + <span class="string">"="</span> + data[c] + <span class="string">"&amp;"</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        convertResult=convertResult.substring(<span class="number">0</span>,convertResult.length<span class="number">-1</span>) </span><br><span class="line">        <span class="keyword">return</span> convertResult; </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> data; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用格式跟jquery的ajax差不多：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#123; </span><br><span class="line">    type:<span class="string">"POST"</span>, </span><br><span class="line">    url:<span class="string">"ajax.php"</span>, </span><br><span class="line">    dataType:<span class="string">"json"</span>, </span><br><span class="line">    data:&#123;<span class="string">"val1"</span>:<span class="string">"abc"</span>,<span class="string">"val2"</span>:<span class="number">123</span>,<span class="string">"val3"</span>:<span class="string">"456"</span>&#125;, </span><br><span class="line">    beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">//some js code </span></span><br><span class="line">    &#125;, </span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(msg) </span><br><span class="line">    &#125;, </span><br><span class="line">    error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"error"</span>) </span><br><span class="line">   &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前在网上发现这篇文章，觉得挺不错的，现在就分享给大家，也给大家做个参考。侵删！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近迷上了原生js，能不用jquery等框架的情况都会手写一些js方法，记得刚接触前端的时候为了选择器而使用jquery。。。现在利用扩展原型的方法实现一些jquery函数：&lt;/p&gt;
&lt;h3 id=&quot;显示-隐藏&quot;&gt;&lt;a href=&quot;#显示-隐藏&quot; class=&quot;headerlink&quot; title=&quot;显示/隐藏&quot;&gt;&lt;/a&gt;显示/隐藏&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//hide() &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.hide = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.style.display=&lt;span class=&quot;string&quot;&gt;&quot;none&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//show() &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.show = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.style.display=&lt;span class=&quot;string&quot;&gt;&quot;block&quot;&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;return this的好处在于链式调用。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>基于webpack和Vue搭建基础开发环境</title>
    <link href="http://yoursite.com/2017/04/24/Vue-webpack/"/>
    <id>http://yoursite.com/2017/04/24/Vue-webpack/</id>
    <published>2017-04-24T10:15:24.000Z</published>
    <updated>2017-05-07T15:02:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><p>  windows可以直接下载，<br>  下载链接：<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a>  </p><p>  下载完后查看版本：<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure></p><p>  确认版本在6.0以上</p><p>  为了下载速度更快，可以选择安装<a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝 NPM 镜像</a><code>cnpm</code>。</p><ul><li>注：以下命令有全局标志-g</li></ul><h3 id="安装-Vue"><a href="#安装-Vue" class="headerlink" title="安装 Vue"></a>安装 Vue</h3><p>   这里我们选择Vue版本为2.2.6<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install vue@2.2.6</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="安装vue-cli"><a href="#安装vue-cli" class="headerlink" title="安装vue-cli"></a>安装vue-cli</h3><p>   vue-cli 是vue.js的脚手架，用于自动生成vue.js模板工程的。<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全局安装 vue-cli</span></span><br><span class="line">$ npm install --global vue-cli</span><br></pre></td></tr></table></figure></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>   创建一个基于 webpack 模板的新项目my-project</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue init webpack my-project</span><br></pre></td></tr></table></figure><h3 id="进入项目目录"><a href="#进入项目目录" class="headerlink" title="进入项目目录"></a>进入项目目录</h3>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入项目目录</span></span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>  安装依赖模块<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装依赖</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><ul><li><h4 id="给生产环境装的依赖"><a href="#给生产环境装的依赖" class="headerlink" title="给生产环境装的依赖"></a>给生产环境装的依赖</h4></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install vuex vue-router axios qs --save</span><br></pre></td></tr></table></figure><p>安装vue运行依赖<br>1.<a href="https://vuex.vuejs.org/zh-cn/intro.html" target="_blank" rel="noopener">vuex</a><br>2.<a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">vue-router</a><br>3.<a href="https://github.com/imcvampire/vue-axios" target="_blank" rel="noopener">axios </a><br>4.<a href>qs</a>   </p><ul><li><h4 id="给开发环境安装的依赖"><a href="#给开发环境安装的依赖" class="headerlink" title="给开发环境安装的依赖"></a>给开发环境安装的依赖</h4>安装sass预编译环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass sass-loader --save-dev</span><br></pre></td></tr></table></figure><p>1.node-sass<br>2.sass-loader  </p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 运行项目</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>之后页面会出现以下界面，恭喜你，项目环境搭建成功!</p><p><img src="http://littlombie.github.io/images/post/vue-webpack.png" alt="vue">    </p><p>然后就可以在这开始我们的项目了</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装nodejs&quot;&gt;&lt;a href=&quot;#安装nodejs&quot; class=&quot;headerlink&quot; title=&quot;安装nodejs&quot;&gt;&lt;/a&gt;安装nodejs&lt;/h3&gt;&lt;p&gt;  windows可以直接下载，&lt;br&gt;  下载链接：&lt;a href=&quot;https://nodejs.org/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://nodejs.org/zh-cn/&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;  下载完后查看版本：&lt;br&gt;  &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  确认版本在6.0以上&lt;/p&gt;
&lt;p&gt;  为了下载速度更快，可以选择安装&lt;a href=&quot;http://npm.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;淘宝 NPM 镜像&lt;/a&gt;&lt;code&gt;cnpm&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注：以下命令有全局标志-g&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;安装-Vue&quot;&gt;&lt;a href=&quot;#安装-Vue&quot; class=&quot;headerlink&quot; title=&quot;安装 Vue&quot;&gt;&lt;/a&gt;安装 Vue&lt;/h3&gt;&lt;p&gt;   这里我们选择Vue版本为2.2.6&lt;br&gt;   &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install vue@2.2.6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack项目流程学习（二）</title>
    <link href="http://yoursite.com/2017/04/11/webpack-2/"/>
    <id>http://yoursite.com/2017/04/11/webpack-2/</id>
    <published>2017-04-11T02:29:03.000Z</published>
    <updated>2017-04-11T03:03:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/post/what-is-webpack.png" class="full-image" alt="webpack"></p><blockquote><p>本文只是作为学习webpack入门所作的笔记，仅供参考。阅读本文之前，请首先阅读<a href="https://littlombie.github.io/2017/04/10/webpack-1/" target="_blank" rel="noopener">webpack项目流程学习（一）</a>；</p></blockquote><h2 id="项目测试"><a href="#项目测试" class="headerlink" title="项目测试"></a>项目测试</h2><p>我们试做一个项目测试,适用<code>laoder</code> 以及其特性处理项目中的资源文件； </p><h3 id="重新配置文件"><a href="#重新配置文件" class="headerlink" title="重新配置文件"></a>重新配置文件</h3><p>配置目录为下</p><p><img src="http://img2.ph.126.net/xxKBMcOgvgeAuVN9Ft1b4g==/6631949574026962709.png" alt="目录"></p><a id="more"></a><p>文件中内容为：  </p><p>layer.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>this is  a layer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>layer.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//import tpl from './layer.html';</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">layer</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name:<span class="string">'layer'</span>,</span><br><span class="line">    tpl:tpl</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> layer;</span><br></pre></td></tr></table></figure><p>layer.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layer</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff0</span>;</span><br><span class="line">  .&gt;<span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app.js</p><p>引入 layer.js文件 执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> layer <span class="keyword">from</span> <span class="string">'./components/layer/layer.js'</span>;</span><br><span class="line"><span class="keyword">const</span> App  = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(layer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> App();</span><br></pre></td></tr></table></figure></p><h3 id="使用babel-loader转换ES6"><a href="#使用babel-loader转换ES6" class="headerlink" title="使用babel-loader转换ES6"></a>使用babel-loader转换ES6</h3><p>使用<code>babel</code> 把<code>es6</code>的语法解析成浏览器支持的语法</p><p>首先需要安装需要支持的<code>loader</code>插件 </p><p>安装<code>loader</code>  和 <code>core</code>  的插件   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-loader babel-core</span><br></pre></td></tr></table></figure><p>安装 <code>babel-preset-latest</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev babel-preset-latest</span><br></pre></td></tr></table></figure><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry:<span class="string">'./src/app.js'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:<span class="string">'./dist'</span>,</span><br><span class="line">    filename:<span class="string">'js/[name].bundle.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>:&#123;</span><br><span class="line">    loader:[</span><br><span class="line">      &#123;</span><br><span class="line">        test:<span class="regexp">/\.js/</span>,</span><br><span class="line">        loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">        query:&#123;</span><br><span class="line">            presets:[<span class="string">'lastest'</span>]<span class="comment">//告诉babel 执行js的</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins:[</span><br><span class="line">    <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">      filename:<span class="string">'index.html'</span>,</span><br><span class="line">      template:<span class="string">'index.html'</span>,</span><br><span class="line">      inject:<span class="string">'body'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件设置 <code>entry</code>, <code>output</code>以及<code>module</code> 模块 ，模块打包 的<code>loader</code>的打包工具以及执行js的版本  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// query:&#123;</span></span><br><span class="line"><span class="comment">//    presets:['lastest']//告诉babel 执行js的</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>上边的代码也可以设置在<code>package.json</code> 中为（作用相同）：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"babel":&#123;</span><br><span class="line">    "presets":["latest"]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>说明： 使配置告诉webpack，处理文件通过<code>babel-loader</code>，并且 处理是以 <code>&#39;presets&quot;:[&quot;latest&quot;]&#39;</code> 版本</p><p>现在 执行一下  <code>npm  run webpack</code> 会在<code>dist</code> 文件中生成<code>index.html</code>和js下的 <code>main.bundle.js</code> 文件 </p><p>在浏览器打开 在console 下会显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function layer()&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    name:&apos;layer&apos;,</span><br><span class="line">    tpl:tpl</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示页面 顺利执行 打开，我们可以在修改<code>html</code> <code>app.js</code> <code>layer.js</code>里边的文件  执行 都可以显示出效果 </p><h3 id="选择性打包"><a href="#选择性打包" class="headerlink" title="选择性打包"></a>选择性打包</h3><p>为了加快打包执行的速度 ，选择性打包，我么可以在<code>module</code> 中设置 参数 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exclude:&apos;./node_modules/&apos;,//不包含打包的范围 优化打包速度</span><br><span class="line">include:&apos;./src&apos;,//包含打包的范围 优化打包速度</span><br></pre></td></tr></table></figure><p>此时 虽然<code>include</code> 加快了速度 , 但是 <code>exclude</code> 却没有起作用 ，这时我们需要把之前的路径改为绝对路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include:path.resolve(__dirname,&apos;src/&apos;),</span><br><span class="line">exclude:path.resolve(__dirname,&apos;node_modules/&apos;),</span><br></pre></td></tr></table></figure></p><p>这样就加快了执行命令的速度</p><h3 id="使用打包css"><a href="#使用打包css" class="headerlink" title="使用打包css"></a>使用打包css</h3><p>首先 要安装 <code>css-loader</code> 和 <code>style-loader</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure><p>然后在<code>src--&gt;css</code>下边 新建<code>common.css</code>文件，在里边书写一些样式 便于观察 ，<br>然后在<code>app.js</code>中头部引用<code>common.css</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import  &apos;./css/common.css&apos;;</span><br></pre></td></tr></table></figure><p>在配置文件 <code>webpack.config.js</code>中的<code>module</code>下添加 <code>css loader</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line">    test:/\.css$/,</span><br><span class="line">    loader:&apos;style-loader!css-loader&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 执行命令<code>npm run webpack</code>，打开浏览器 可以看见浏览器内联样式</p><h3 id="css-后处理"><a href="#css-后处理" class="headerlink" title="css  后处理"></a>css  后处理</h3><p>平时写样式我们不只局限与css ,有时会写预加载样式 如<code>sass</code>,<code>less</code>,以及为了浏览器兼容，我们需要添加前缀，此时我们只要 安装一个<code>postcss-loader</code> 就可以实现 自动添加 浏览器前缀 -webkit- ，-moz-，-ms-,-o-;相关参数可以查看<a href="https://github.com/postcss/postcss#plugins" target="_blank" rel="noopener">postcss-loader</a></p><p>首先下载<a href="https://www.npmjs.com/package/postcss-loader" target="_blank" rel="noopener">postcss-loader</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>然后安装添加前缀插件<a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">autoprefixer</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install autoprefixer --save-dev</span><br></pre></td></tr></table></figure></p><p>然后在<code>loader</code> 后边添加<code>!postcss-loader</code> (loader 是从右到左加载的)</p><p>1.添加 <code>autopredixer</code> ，在 <code>module</code> 后边 添加<code>postcss</code>(此方法以失败)</p><p>2.首先 引入webpack(参考imooc下边<a href="http://www.imooc.com/video/14197" target="_blank" rel="noopener">评论</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br></pre></td></tr></table></figure><p>在plugin下边添加<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">,</span><br><span class="line"><span class="keyword">new</span> webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">      postcss: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">"autoprefixer"</span>)(&#123;</span><br><span class="line">         browsers: [<span class="string">"last 5 versions"</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>如果css  页面有引入文件 <code>@import</code>，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;./flex.css&quot;;</span><br></pre></td></tr></table></figure></p><p>则需要在配置文件的  loader处设置处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loader:&apos;style-loader!css-loader?importLoaders=1!postcss-loader&apos;</span><br></pre></td></tr></table></figure></p><p>其中<code>=</code>后边的<code>1</code>表示有1个引入文件 ，如果需要引入多少个文件，则设置数字为引入的数量</p><h3 id="处理-less-sass文件"><a href="#处理-less-sass文件" class="headerlink" title="处理.less/.sass文件"></a>处理.less/.sass文件</h3><p>在项目中处理.less文件时，首先需要下载安装<code>less-loader</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less-loader --save-dev</span><br></pre></td></tr></table></figure><p>如果本机没有less  支持，则需要首先安装less<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less</span><br></pre></td></tr></table></figure></p><p>安装完成后 可以在module 设置 loader </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">,</span><br><span class="line">&#123;</span><br><span class="line">  test:/\.less$/,</span><br><span class="line">  loader:&apos;style!css!postcss!less&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <code>postcss</code>需放在css! 与less之间</p><p>以上的<code>less</code> 同样可以适用 <code>@import</code>与<code>postcss</code> 的后处理 输出的文件同样添加了前缀</p><blockquote><p>sass 的原理与less 相同 只需要把less改为sass 即可</p></blockquote><p>注意：安装 <code>sass-loader</code> 时 需要安装 <code>node-sass</code> （建议vpn安装，或者使用淘宝镜像）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass/node-less</span><br></pre></td></tr></table></figure><h3 id="处理项目中的模板文件"><a href="#处理项目中的模板文件" class="headerlink" title="处理项目中的模板文件"></a>处理项目中的模板文件</h3><p>使webpack把模板文件当做一个字符串处理</p><p> 首先 安装HTML的模块 ： <code>html-loader</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-loader --save-dev</span><br></pre></td></tr></table></figure><p>在 <code>layer.js</code>中 引入layer.html文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import tpl from &quot;./layer.html&quot;;</span><br></pre></td></tr></table></figure><p>在<code>app.js</code>引入layer.js 文件，在在HTML中输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import Layer from &apos;./ components/layer/layer.js&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const App  = function ()&#123;</span><br><span class="line"></span><br><span class="line">  console.log(Layer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  var dom  = document.getElementById(&apos;#app&apos;);</span><br><span class="line">  var layer = new Layer();</span><br><span class="line">  dom.innerHTML = layer.tpl;//引入 layer.js 中 的tpl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new App();</span><br></pre></td></tr></table></figure><p>在index.html中添加<code>#app</code>标签</p><p>现在 执行 命令<code>npm run webpack</code> 在浏览器就可以看见layer模板的 文件，此时 任意更改模板文件都可以</p><p>如果我们使用模板文件<code>.ejs</code>的文件 怎么可以先安装<code>ejs-loader</code> 模板引擎 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs-loader --save-dev</span><br></pre></td></tr></table></figure><p>然后我们在loader里边添加 ejs-loader<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">,</span><br><span class="line"> &#123;</span><br><span class="line">    test:/\.ejs/,</span><br><span class="line">    loader:&apos;ejs-loader&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后 我们可以在.ejs书写ejs代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;layer&quot;&gt;</span><br><span class="line">  &lt;div&gt;this is    &lt;%= name %&gt; layer&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;% for(var i = 0;i&lt;arr.length;i++)&#123; %&gt;</span><br><span class="line">    &lt;%=arr[i]%&gt;</span><br><span class="line">    &lt;%&#125; %&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>此时 在layer.js里边引入的文件应该改为.ejs的模板文件</p><p>在app.js 文件中可以插入js调用参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dom.innerHTML = layer.tpl(&#123;</span><br><span class="line">  name:&apos;john&apos;,</span><br><span class="line">  arr:[&apos;apple&apos;,&apos;xiaomi&apos;,&apos;oppo&apos;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此时运行命令后，在浏览其里边就可以看见模板代码的引入和js代码的计算结果 </p><blockquote><p>也可以书写.tpl后缀的格式的模板文件</p></blockquote><h3 id="处理图片以及其他文件"><a href="#处理图片以及其他文件" class="headerlink" title="处理图片以及其他文件"></a>处理图片以及其他文件</h3><p>首先先安装图片<code>loader</code>  </p><h4 id="1-file-loader（查看相关资料可看官网-）"><a href="#1-file-loader（查看相关资料可看官网-）" class="headerlink" title="1. file-loader（查看相关资料可看官网 ）"></a>1. <code>file-loader</code>（查看相关资料可看官网 ）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader --save-dev</span><br></pre></td></tr></table></figure><p>在配置文件中 进行loader配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">,</span><br><span class="line">&#123;//loader img</span><br><span class="line">  test:/\.(png|jpg|gif|svg)$/,</span><br><span class="line">  loader:&apos;file-loader&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把所有的图片格式包含里边  </p><p>然后在 css/less/sass中引入图片文件背景时 ，可以使用绝对路径、设置的cdn路径、也可以直接使用相对路径 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    background-image: url(../../assets/1.jpg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 index.html 中也可以直接引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;./src/assets/1.jpg&quot; alt=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><p>但是在模板文件中就不能直接使用相对路径，我们做一些 修改，可以像是nodes.js那样引入文件</p><p>在图片src中以这种形式添加图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123; require('文件的相对路径') &#125;"</span> <span class="attr">alt</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123; require('../../assets/1.jpg') &#125;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后打开生成的文件 就会看见引入的图片了   </p><ul><li>为了使图片能同意在一个图片文件夹中，我们可以设置query值 name<br>在<code>file-loader</code>中设置  </li></ul><p>路径为： 图片文件夹名/图片名称-5位hash值.文件格式 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">,</span><br><span class="line">&#123;//loader img</span><br><span class="line">  test:/\.(png|jpg|gif|svg)$/,</span><br><span class="line">  loader:&apos;file-loader&apos;,</span><br><span class="line">  query:&#123;</span><br><span class="line">    name:&apos;assets/[name]-[hash:5].[ext]&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-url-loader"><a href="#2-url-loader" class="headerlink" title="2. url-loader"></a>2. url-loader</h4><p>类似于file-loader , 都可以处理图片以及文件 ，但是我们可以指定一个limit ，当处理时文件/图片大小大于limit设定后，会把文件交于file-loader 处理，小于指定的大小后，则会把图片/文件处理成base:64位的编码<br>安装 <code>url-loader</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install url-loader --save-dev</span><br></pre></td></tr></table></figure><p>测试：我们把刚才的file-loader 改为url-loader ,在query中添加一个limit值，设置limit大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">,</span><br><span class="line">&#123;//loader img</span><br><span class="line">  test:/\.(png|jpg|gif|svg)$/,</span><br><span class="line">  loader:&apos;url-loader&apos;,</span><br><span class="line">  query:&#123;</span><br><span class="line">  limit:50000,</span><br><span class="line">    name:&apos;assets/[name]-[hash:5].[ext]&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后打包一下  就会看见，我们的图片文件如果大于设置的limit：50000,50k时，会直接把图片loader进来，如果文件没有50k大师，怎会处理成base:64位的编码</p><h4 id="3-图片压缩-–-image-webpack-loader"><a href="#3-图片压缩-–-image-webpack-loader" class="headerlink" title="3. 图片压缩 – image-webpack-loader"></a>3. 图片压缩 – image-webpack-loader</h4><p>首先先安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install image-webpack-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>  然后我们修改loader 为：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;//loader img</span><br><span class="line">      test:/\.(png|jpg|gif|svg)$/,</span><br><span class="line">      // loader:&apos;url-loader&apos;,//loader 可省略</span><br><span class="line">      // query:&#123;</span><br><span class="line">      //   limit:300000,</span><br><span class="line">      //   name:&apos;assets/[name]-[hash:5].[ext]&apos;</span><br><span class="line">      // &#125;</span><br><span class="line">      loaders:[</span><br><span class="line">        &apos;url-loader?limit=300000&amp;name=assets/[name]-[hash:5].[ext]&apos;,</span><br><span class="line">        &apos;image-webpack-loader&apos;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上边还是遵守loader的顺序（从右到左），先是把图片压缩，压缩后的图片再交给url-loader 判断 是否大于limit值，大于直接交给file-loader 引入，如果在范围之内就把图片转成base：64位的编码</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/post/what-is-webpack.png&quot; class=&quot;full-image&quot; alt=&quot;webpack&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文只是作为学习webpack入门所作的笔记，仅供参考。阅读本文之前，请首先阅读&lt;a href=&quot;https://littlombie.github.io/2017/04/10/webpack-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;webpack项目流程学习（一）&lt;/a&gt;；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;项目测试&quot;&gt;&lt;a href=&quot;#项目测试&quot; class=&quot;headerlink&quot; title=&quot;项目测试&quot;&gt;&lt;/a&gt;项目测试&lt;/h2&gt;&lt;p&gt;我们试做一个项目测试,适用&lt;code&gt;laoder&lt;/code&gt; 以及其特性处理项目中的资源文件； &lt;/p&gt;
&lt;h3 id=&quot;重新配置文件&quot;&gt;&lt;a href=&quot;#重新配置文件&quot; class=&quot;headerlink&quot; title=&quot;重新配置文件&quot;&gt;&lt;/a&gt;重新配置文件&lt;/h3&gt;&lt;p&gt;配置目录为下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img2.ph.126.net/xxKBMcOgvgeAuVN9Ft1b4g==/6631949574026962709.png&quot; alt=&quot;目录&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack项目流程学习（一）</title>
    <link href="http://yoursite.com/2017/04/10/webpack-1/"/>
    <id>http://yoursite.com/2017/04/10/webpack-1/</id>
    <published>2017-04-10T04:53:01.000Z</published>
    <updated>2017-04-11T03:35:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/post/what-is-webpack.png" class="full-image" alt="webpack"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>前端开发和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p></blockquote><h2 id="什么是-Webpack"><a href="#什么是-Webpack" class="headerlink" title="什么是 Webpack"></a>什么是 Webpack</h2><p>Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><a id="more"></a><h2 id="学习-Webpack"><a href="#学习-Webpack" class="headerlink" title="学习 Webpack"></a>学习 Webpack</h2><p>本文只是本人webpack学习时所做的简单笔记，围绕这个<a href="http://www.imooc.com/learn/802" target="_blank" rel="noopener">视频</a>所作，笔记是以项目的方式记录；仅供参考！  </p><h3 id="项目开始"><a href="#项目开始" class="headerlink" title="项目开始"></a>项目开始</h3><ul><li>新建文件夹  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir &lt;your name&gt;</span><br></pre></td></tr></table></figure><ul><li>进入文件夹  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;your name&gt;</span><br></pre></td></tr></table></figure><ul><li>格式化   </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><ul><li>下载安装 webpack</li></ul><p>本地安装    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack --save-dev</span><br></pre></td></tr></table></figure><h3 id="创建项目文件"><a href="#创建项目文件" class="headerlink" title="创建项目文件"></a>创建项目文件</h3><p>创建文件<code>index.html</code>  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpac demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>里边添加<code>bundle.js</code> 的js 文件</p><p>创建 测试文件main.js </p><p>然后创建配置文件 <code>webpack.config.js</code>， 配置入口<code>entry</code>，输出<code>output</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  context:__dirname,<span class="comment">//当前目录</span></span><br><span class="line">  entry:<span class="string">'./src/script/main.js'</span>,</span><br><span class="line">  output:&#123;</span><br><span class="line">    path:<span class="string">'./dist/js'</span>,</span><br><span class="line">    filename:<span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在终端输入<code>webpack</code>就会在<code>dist/js</code>文件夹下生成<code>bundle.js</code>文件</p><p>配置文件的名字 建议为默认的<code>webpack-config.js</code>,方便执行（其他名称执行命令为<code>webpack &lt;配置文件名称&gt;</code>）  </p><p>为了以后执行命令方便 可以在<code>package.json</code>中做配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">    "webpack": "webpack --config webpack.config.js --progress --display-modules --colors --display-reasons"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>scripts中添加一项 <code>&quot;webpack&quot;</code>的配置</p><ul><li>entry 可以为数组 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry:[&apos;./src/script/main.js&apos;,&apos;./src/script/a.js&apos;],</span><br></pre></td></tr></table></figure></li></ul><p>最后打包的文件都会在bundle.js 中显示</p><p><code>entry</code> 为对象时， <code>output</code> 的<code>filename</code> 可以用占位符 <code>[name]</code>,<code>[hash]</code>,<code>[chunkhash]</code>;</p><ul><li>安装插件  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><p>配置文件简历插件引用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);</span><br></pre></td></tr></table></figure><ul><li>添加插件<br>在moudle.exports中添加  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins:[</span><br><span class="line">  new htmlWebpackPlugin(&#123;</span><br><span class="line">    telmplate:&apos;index.html&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这样我们更改根目录的index.html文件执行  就会在<code>dist/js</code>下边生成个index.html文件 里边的js都自动引入进来了<br>但是我们工作中 index.html 都是在根目录下的 所以要更改文件的生成路径</p><p>在 output下边 修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output:&#123;</span><br><span class="line">  path:&apos;./dist&apos;,</span><br><span class="line">  filename:&apos;js/[name]-[chunkhash].js&apos;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p> 这样 就会得到想要的结果 js的路径也只在js文件夹下</p><p> 如果想要js 文件放在html的head</p><p> 可以在plugin里边添加<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inject:&apos;head&apos;</span><br></pre></td></tr></table></figure></p><p> 我们可以设置一些参数 比如<code>title</code>，详见webpack 官网 的<code>plugin</code> 配置</p><p> 也可以书写js ，如<code>date:new Date()</code></p><p> html里边书写插件<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=htmlWebpackPlugin.options.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">%=htmlWebpackPlugin.options.date</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> 插入js </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;&lt;%= htmlWebpackPlugin.files.chunks.a.entry %&gt; &quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p> html 中可以书写js 模板文件的方式遍历  查找完整的配置参数 文件 也可以到<code>npm</code> 官网上去查看插件的详细信息 （在npm 搜索框里边输入 插件名称 进行查看 ）<br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--js 模板文件的方式遍历  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=htmlWebpackPlugin.options.date</span> %&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 直接运行js代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span>(<span class="attr">var</span> <span class="attr">key</span> <span class="attr">in</span> <span class="attr">htmlWebpackPlugin.files</span>) &#123;%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=</span> <span class="attr">key</span> %&gt;</span>:<span class="tag">&lt;<span class="name">%=JSON.stringify(htmlWebpackPlugin.files[key])</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span>(<span class="attr">var</span> <span class="attr">key</span> <span class="attr">in</span> <span class="attr">htmlWebpackPlugin.options</span>) &#123;%&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%=</span> <span class="attr">key</span> %&gt;</span>:<span class="tag">&lt;<span class="name">%=JSON.stringify(htmlWebpackPlugin.options[key])</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p> 打包后文件上线 ，使用output 新属性 <code>publicPath</code>,设置发布后的统一路径</p><p>plugin配置里边可以添加<code>minify</code>设置压缩的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minify:&#123;</span><br><span class="line">    removeComments:<span class="literal">true</span>,</span><br><span class="line">    collapseWhitespace:<span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 文件压缩 <code>minify</code>设置压缩的参数  详见 <a href="https://github.com/kangax/html-minifier/#options-quick-reference" target="_blank" rel="noopener">html-minifier</a></p><h3 id="生成多个页面"><a href="#生成多个页面" class="headerlink" title="生成多个页面"></a>生成多个页面</h3><p> entry 中添加 引入的 js文件 </p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry:&#123;</span><br><span class="line">   main:<span class="string">'./src/script/main.js'</span>,</span><br><span class="line">   a:<span class="string">'./src/script/a.js'</span>,</span><br><span class="line">   b:<span class="string">'./src/script/b.js'</span>,</span><br><span class="line">   c:<span class="string">'./src/script/c.js'</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><p> 与之对应的，在配置文件plugin 下添加 制定<code>chunks</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">plugins:[</span><br><span class="line">   <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">     filename:<span class="string">'a.html'</span>,</span><br><span class="line">     template:<span class="string">'index.html'</span>,</span><br><span class="line">     inject:<span class="string">'body'</span>,</span><br><span class="line">     title:<span class="string">'webpack is good a'</span>,</span><br><span class="line">     chunks:[<span class="string">'main'</span>,<span class="string">'a'</span>]</span><br><span class="line">   &#125;),</span><br><span class="line">   <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">     filename:<span class="string">'b.html'</span>,</span><br><span class="line">     template:<span class="string">'index.html'</span>,</span><br><span class="line">     inject:<span class="string">'body'</span>,</span><br><span class="line">     title:<span class="string">'webpack is good b'</span>,</span><br><span class="line">     chunks:[<span class="string">'b'</span>]</span><br><span class="line">   &#125;),</span><br><span class="line">   <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">     filename:<span class="string">'c.html'</span>,</span><br><span class="line">     template:<span class="string">'index.html'</span>,</span><br><span class="line">     inject:<span class="string">'body'</span>,</span><br><span class="line">     title:<span class="string">'webpack is good c'</span>,</span><br><span class="line">     chunks:[<span class="string">'c'</span>]</span><br><span class="line">   &#125;)</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p> 也可以除了<code>xx.js</code>的文件，其余的都引用</p><p> 可以在plugin下边修改chunks 为<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">excludeChunks[<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></p><p> 表示生成文件中除了 b.js,c.js 其他的文件都生成并在HTML中导入 </p><p> 减少http请求  js</p><p>可以使用 <code>js inline</code>  到HTML中 </p><p>找到不需要publicPath 的路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">%=htmlWebpackPlugin.files.chunks.main.entry.substr(htmlWebpackPlugin.files.publicPath.length)</span> %&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 取到里边的内容 修改上边代码  </p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">%=compilation.assets[htmlWebpackPlugin.files.chunks.main.entry.substr(htmlWebpackPlugin.files.publicPath.length)].source()</span> %&gt;</span></span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 这样 main.js里边的文件就会inline在 HTML中 </p><p> 如果 我们只让 main.js文件inline  其他 js 文件 引入 则需要在HTML文件中 循环一下 </p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">for</span>(<span class="attr">var</span> <span class="attr">k</span> <span class="attr">in</span> <span class="attr">htmlWebpackPlugin.files.chunks</span>)&#123; %&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">%if(k</span> !==<span class="string">'main'</span>)&#123; %&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%= htmlWebpackPlugin.files.chunks[k].entry %&gt;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">%</span> &#125;%&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 把插件 plugin 的 <code>inject</code> 改为<code>&#39;body&#39;</code>, 引入的文件就会显示在HTML的body 底部</p>  <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28613251&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/post/what-is-webpack.png&quot; class=&quot;full-image&quot; alt=&quot;webpack&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前端开发和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是-Webpack&quot;&gt;&lt;a href=&quot;#什么是-Webpack&quot; class=&quot;headerlink&quot; title=&quot;什么是 Webpack&quot;&gt;&lt;/a&gt;什么是 Webpack&lt;/h2&gt;&lt;p&gt;Webpack 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>前端图谱，前端工具大全</title>
    <link href="http://yoursite.com/2017/03/01/Web-Map/"/>
    <id>http://yoursite.com/2017/03/01/Web-Map/</id>
    <published>2017-03-01T14:31:26.000Z</published>
    <updated>2017-06-16T09:56:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/post/web-Map.JPG" class="full-image" alt="前端图谱，前端工具大全"></p><p> <em>文章转自 <a href="http://www.vichily.com/2017/02/28/笼统的前端/" target="_blank" rel="noopener">VICHILY’S BLOG</a></em>  </p><h3 id="核心-Core"><a href="#核心-Core" class="headerlink" title="核心 Core"></a>核心 Core</h3><a id="more"></a><h4 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h4><ul><li><a href="http://www.w3school.com.cn/html5/" target="_blank" rel="noopener">W3C</a></li><li><a href="https://www.w3.org/html/ig/zh/wiki/HTML5" target="_blank" rel="noopener">W3C</a></li><li><a href="http://www.runoob.com/html/html5-intro.html" target="_blank" rel="noopener">菜鸟教程</a></li><li><a href="http://www.html5cn.org/" target="_blank" rel="noopener">HTML5中文门户</a></li></ul><h4 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h4><ul><li><a href="http://www.w3school.com.cn/css/index.asp" target="_blank" rel="noopener">W3C CSS教程 </a></li><li><a href="http://www.w3school.com.cn/css3/index.asp" target="_blank" rel="noopener">W3C CSS3教程 </a></li><li><a href="http://www.runoob.com/css/css-tutorial.html" target="_blank" rel="noopener">菜鸟教程CSS教程</a></li><li><a href="http://www.runoob.com/css3/css3-tutorial.html" target="_blank" rel="noopener">菜鸟教程CSS3教程 </a></li><li><a href="http://css.doyoe.com/" target="_blank" rel="noopener">CSS参考手册</a></li></ul><h4 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h4><ul><li><a href="http://www.w3school.com.cn/js/" target="_blank" rel="noopener">W3C </a></li><li><a href="http://www.runoob.com/js/js-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></li><li><a href="http://www.liaoxuefeng.com" target="_blank" rel="noopener">廖雪峰js教程</a></li><li><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">js标准参考教程-阮一峰</a></li></ul><h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><ul><li><a href="http://www.w3school.com.cn/jquery/" target="_blank" rel="noopener">W3C</a></li><li><a href="http://www.runoob.com/jquery/jquery-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></li><li><a href="http://wiki.jikexueyuan.com/project/jquery-tutorial/" target="_blank" rel="noopener">极客学院</a></li><li><a href="http://www.liaoxuefeng.com/wiki/" target="_blank" rel="noopener">廖雪峰</a></li><li><a href="http://www.css88.com/jqapi-1.9/" target="_blank" rel="noopener">参考手册</a></li><li><a href="http://www.runoob.com/manual/jquery/" target="_blank" rel="noopener">参考手册</a></li></ul><h4 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h4><ul><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰ES6</a></li><li><a href="http://wiki.jikexueyuan.com/project/es6/" target="_blank" rel="noopener">极客学院</a></li><li><a href="http://javascript.ruanyifeng.com/advanced/ecmascript6.html" target="_blank" rel="noopener">JavaScript标准参考阮一峰</a></li></ul><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><ul><li><a href="https://github.com/adambom/parallel.js" target="_blank" rel="noopener">parallel</a>.js: 前后端通用的一个并行库  </li><li><a href="https://github.com/madrobby/zepto" target="_blank" rel="noopener">zepto</a>: 用于现代浏览器的兼容 jQuery 的库  </li><li><a href="https://github.com/totorojs/totoro" target="_blank" rel="noopener">totoro</a>: 稳定的跨浏览器测试工具  </li><li><a href="https://github.com/Zhouzi/TheaterJS" target="_blank" rel="noopener">TheaterJS</a>: 一个用于模拟人输入状态的 JS 库  </li><li><a href="https://github.com/markdalgleish/stellar.js" target="_blank" rel="noopener">stellar.js</a>: 前端用于实现异步滚动效果的库，现已不再维护  </li><li><a href="https://github.com/Prinzhorn/skrollr" target="_blank" rel="noopener">skrollr</a>: 另一款实现一步滚动的开源库，使用人数众多，可实现各种狂拽酷炫掉渣天的前* 端效果，看真相  </li><li><a href="https://github.com/nolimits4web/Framework7" target="_blank" rel="noopener">Framework7</a>: 前端框架，是开发人员可以基于 web 技术构建 IOS7 程序</li><li><a href="https://github.com/JexCheng/regulex" target="_blank" rel="noopener">regulex</a>: 用于生成 正则表达式 的可视化流程图</li><li><a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener">markdown-it</a>: 新型 Markdown 解析器，快速，支持插件</li><li><a href="https://github.com/sindresorhus/multiline" target="_blank" rel="noopener">multiline</a>: 用于 Javascript 中的多行文本，类似于 Ruby 的 HERE Doc</li></ul><ul><li><a href="https://github.com/sindresorhus/screenfull.js" target="_blank" rel="noopener">screenfull.js</a>: 全屏插件，支持各大浏览器</li><li><a href="https://github.com/olivernn/lunr.js" target="_blank" rel="noopener">lunr.js</a>: 类似于 Solr, 但是用于浏览器上的全文搜索引擎，可以为 JSON 创建索引，离线也可以使用</li><li><a href="https://github.com/jeresig/jquery.hotkeys" target="_blank" rel="noopener">jquery.hotkeys</a>: jQuery 插件，用于绑定热键</li><li><a href="https://github.com/breach/breach_core" target="_blank" rel="noopener">breach_core</a>: Javascript 编写的 Browser (浏览器)</li><li><a href="https://github.com/zmmbreeze/octocard" target="_blank" rel="noopener">octocard</a>: 用于生成 Github 信息卡片的库</li><li><a href="https://github.com/lepture/github-cards" target="_blank" rel="noopener">github-cards</a>: 用于生成 Github 信息卡片的库</li><li><a href="https://github.com/openexchangerates/money.js" target="_blank" rel="noopener">money.js</a>: 轻量级货币转换库，web 和 node 皆可用</li><li><a href="https://github.com/openexchangerates/accounting.js" target="_blank" rel="noopener">accounting.js</a>: 轻量级的数字、货币转换库</li><li><a href="https://github.com/mgechev/javascript-algorithms" target="_blank" rel="noopener">javascript-algorithms</a>: Javascript 实现的各种算法集合</li><li><a href="https://github.com/dtao/lazy.js" target="_blank" rel="noopener">lazy.js</a>: 类似于 underscore, 但是会延迟执行，某些场景下，性能会有很大的提升</li></ul><ul><li><a href="https://github.com/seajs/seajs" target="_blank" rel="noopener">seajs</a>: 前端模块加载器，解决模块化、依赖等问题</li><li><a href="https://github.com/davist11/jQuery-One-Page-Nav" target="_blank" rel="noopener">jQuery-One-Page-Nav</a>: 单页应用中一个用于处理导航栏的库</li><li><a href="https://github.com/js-js/js.js" target="_blank" rel="noopener">js.js</a>: Javascript 实现的 javascript JIT</li><li><a href="https://github.com/jquery/jquery-ui" target="_blank" rel="noopener">jquery-ui</a>: jQuery 团队开发的 UI 相关的前端库，功能强大</li><li><a href="https://github.com/tastejs/todomvc" target="_blank" rel="noopener">todomvc</a>: 分别基于 AngularJS/EmberJS/Backbone等实现的 TODO List, 帮助开发者选择前端 MVC 库</li><li><a href="https://github.com/mozilla/localForage" target="_blank" rel="noopener">localForage</a>: Mozilla 出品，用于离线存储，基于IndexedDB, WebSQL 或者 localStorage, 提供一致的接口</li><li><a href="https://github.com/Wolfy87/EventEmitter" target="_blank" rel="noopener">EventEmitter</a>: 浏览器版的 EventEmitter</li><li><a href="https://github.com/marioizquierdo/jquery.serializeJSON" target="_blank" rel="noopener">jquery.serializeJSON</a>: jQuery 插件，用于将 form 表单序列化成 JSON 数据</li><li><a href="https://github.com/knockout/knockout" target="_blank" rel="noopener">knockout</a>: 前端 MVVM 框架，用于开发富前端应用</li><li><a href="https://github.com/knsv/mermaid" target="_blank" rel="noopener">mermaid</a>: 可以根据文本生成流程图，类似于 Markdown 的语法</li></ul><ul><li><a href="https://github.com/bramp/js-sequence-diagrams" target="_blank" rel="noopener">js-sequence-diagrams</a>: 另一款可以根据文本生成流程图的库，类似于 Markdown 的语法</li><li><a href="https://github.com/facebook/flow" target="_blank" rel="noopener">flow</a>: 一个用来检测 Javascript 语法错误的库， Facebook 出品</li><li><a href="https://github.com/jaukia/zoomooz" target="_blank" rel="noopener">zoomooz</a>: jQuery 插件，用来处理浏览器缩放</li><li><a href="https://github.com/fancyapps/fancyBox" target="_blank" rel="noopener">fancyBox</a>: 一个用于放大缩小图片、Web 内容或者多媒体元素的库，优雅大方</li><li><a href="https://github.com/lhorie/mithril.js" target="_blank" rel="noopener">mithril.js</a>: 轻量型前端 MVC 框架，部分使用场景下性能优于 Angular.js 和 React</li><li><a href="https://github.com/jashkenas/backbone" target="_blank" rel="noopener">backbone</a>: 强大的前端 MVC 库，鼻祖级前端库，最初为了配合 Rails 来模块化前端应用，兼容性良好 (兼容到 IE6)，插件丰富，性能良好</li><li><a href="http://developer.apple.com/library/ios/#documentation/AppleApplications/Reference/SafariWebContent/PromotingAppswithAppBanners/PromotingAppswithAppBanners.html" target="_blank" rel="noopener">jquery.smartbanner</a>: smartbanner 是从 IOS6 开始支持的一个新特性, 这个插件提供了对早期 IOS4/5 和 Android 的支持</li><li><a href="https://github.com/flesler/jquery.scrollTo" target="_blank" rel="noopener">jquery.scrollTo</a>: 在页面上以一个元素为起始以动画的方式移动(ScrollTo)到另一个元素， 支持回退等</li><li><a href="https://github.com/vitch/jScrollPane" target="_blank" rel="noopener">jScrollPane</a>: 自定义的滚动条，让所有浏览器都显示一样的滚动条</li><li><a href="https://github.com/peachananr/onepage-scroll" target="_blank" rel="noopener">onepage-scroll</a>: 提供类似于 iPhone6 展示页类似的效果，适用于单页应用，兼容到 IE8</li></ul><ul><li><a href="https://github.com/sakabako/scrollMonitor" target="_blank" rel="noopener">scrollMonitor</a>: 前端插件用来监控元素的滚动事件(进入、退出等)，性能很好</li><li><a href="https://github.com/janpaepke/ScrollMagic" target="_blank" rel="noopener">ScrollMagic</a>: 神奇的滚动交互效果插件，可以在滚动的过程中设置各种各样的动态效果</li><li><a href="https://github.com/paulirish/infinite-scroll" target="_blank" rel="noopener">infinite-scroll</a>: 滚动加载，滚动到最下到自动加载， Paul Irish 大神之作</li><li><a href="https://github.com/LeaVerou/animatable" target="_blank" rel="noopener">animatable</a>: 仅仅依靠 border-width 和 background-position 实现的各种动态效果，看真相</li><li><a href="https://github.com/terrymun/Fluidbox" target="_blank" rel="noopener">Fluidbox</a>: 页面上内嵌图片的放大缩小效果，类似于 Medium 中的效果</li><li><a href="https://github.com/jzaefferer/jquery-validation" target="_blank" rel="noopener">jquery-validation</a>: jQuery 的一个插件，用于校验 Form 表单</li><li><a href="https://github.com/dfcb/BigVideo.js" target="_blank" rel="noopener">BigVideo.js</a>: jQuery 的一个插件, 用于实现大背景(视频、图片)效果</li><li><a href="https://github.com/kripken/emscripten" target="_blank" rel="noopener">emscripten</a>: 一款基于 LLVM, 可以将 C/C++ 转换成 Javascript 的工具，使得 Javascript 可以近乎 Native 的速度</li><li><a href="https://github.com/kazuhikoarase/qrcode-generator" target="_blank" rel="noopener">qrcode-generator</a>: 各种语言的二维码生成工具</li><li><a href="https://github.com/matthewhudson/device.js" target="_blank" rel="noopener">device.js</a>: 一个可以检测设备类型的工具，可以让我们根据不同的设备来为其定制响应的 * Javascript 和 CSS</li></ul><ul><li><a href="https://github.com/jeromeetienne/jquery-qrcode" target="_blank" rel="noopener">jquery-qrcode</a>: jQuery 插件，用来生成二维码</li><li><a href="https://github.com/GBKS/Wookmark-jQuery" target="_blank" rel="noopener">Wookmark-jQuery</a>: jQuery 的一个插件，可以用来实现瀑布流的效果</li><li><a href="https://github.com/metafizzy/isotope" target="_blank" rel="noopener">isotope</a>: 可以用来过滤、排列布局，实现美观的动态布局切换效果，<a href="http://isotope.metafizzy.co/" target="_blank" rel="noopener">Demo</a></li><li><a href="https://github.com/aFarkas/lazysizes" target="_blank" rel="noopener">lazysizes</a>: 功能强大的图片延迟加载工具，可以首先加载一个低质量的图片，然后再加载高质量的图片</li><li><a href="https://github.com/kimmobrunfeldt/progressbar.js" target="_blank" rel="noopener">progressbar.js</a>: 简洁美观的进度条，扁平化</li><li><a href="https://github.com/pigshell/pigshell" target="_blank" rel="noopener">pigshell</a>: 一个由 Javascript 实现的Shell, 将互联网当做一个大的文件系统, 通过 cd/ls/cat…..等命令, 可以访问 Facebook/Twitter/Google Drive 等网络服务</li><li><a href="https://github.com/bgrins/spectrum" target="_blank" rel="noopener">spectrum</a>: Js实现的颜色选择器 (Colorpicker)</li><li><a href="https://github.com/hilios/jQuery.countdown" target="_blank" rel="noopener">jQuery.countdown</a>: jQuery 倒计时插件</li><li><a href="https://github.com/summernote/summernote" target="_blank" rel="noopener">summernote</a>: WYSIWYG 富文本编辑器</li><li><a href="https://github.com/LeaVerou/awesomplete" target="_blank" rel="noopener">awesomplete</a>: 非常轻型的一个自动补全 JS 库, 没有任何依赖, 配置简单, 美观</li></ul><ul><li><a href="https://github.com/abpetkov/switchery" target="_blank" rel="noopener">switchery</a>: IOS 7 上 Switch 的 JS 实现, 支持 IE8 及以上浏览器</li><li><a href="https://github.com/basecamp/trix" target="_blank" rel="noopener">trix</a>: Basecamp 公司出品的富文本编辑器，简洁小巧</li><li><a href="https://github.com/branding-fe/sensor" target="_blank" rel="noopener">sensor.js</a>: 在智能移动设备浏览器上，通过HTML5的api使用移动设备的功能。定位、运动、倾斜等</li><li><a href="https://github.com/maciejczyzewski/hyhyhy" target="_blank" rel="noopener">hyhyhy</a>: 用于创建 基于 HTML5 的 演示文稿</li><li><a href="https://github.com/brutaldesign/swipebox" target="_blank" rel="noopener">swipebox</a>: jQuery 插件，用于处理移动端的触摸事件</li><li><a href="https://github.com/mailru/FileAPI" target="_blank" rel="noopener">FileAPI</a>: 前端用户处理文件（拖放、多文件上传等）</li><li><a href="https://github.com/RubaXa/Sortable" target="_blank" rel="noopener">Sortable</a>: 现代浏览器上用于实现元素拖拽排序的功能，支持 Meteor, AngularJS, React，不依赖 jQuery</li><li><a href="https://github.com/nolimits4web/Swiper" target="_blank" rel="noopener">Swiper</a>: 用于实现浏览器上的滑动切换效果，支持硬件加速</li><li><a href="https://github.com/liabru/matter-js" target="_blank" rel="noopener">matter-js</a>: 2D 物理效果引擎，碰撞、弹跳等</li><li><a href="https://github.com/senchalabs/jQTouch" target="_blank" rel="noopener">jQTouch</a>: 用于辅助创建手机端的 Web 应用，支持主题、Zepto.js 等</li></ul><ul><li><a href="https://github.com/daniel-lundin/snabbt.js" target="_blank" rel="noopener">snabbt.js</a>: 一个利用 Javascript 和 CSS transform 的 animation 库</li><li><a href="https://github.com/masayuki0812/c3" target="_blank" rel="noopener">c3</a>: 基于 D3 的图表库</li><li><a href="https://github.com/ecomfe/echarts" target="_blank" rel="noopener">echarts</a>: 企业级图表库，百度开发</li><li><a href="https://github.com/wagerfield/parallax" target="_blank" rel="noopener">parallax.js</a>: 一个用于响应智能手机 orientation 的库</li><li><a href="https://github.com/benbarnett/jQuery-Animate-Enhanced" target="_blank" rel="noopener">jQuery-Animate-Enhanced</a>: jQuery 动画库的一个增强，用于现代浏览器</li><li><a href="https://github.com/Voog/wysihtml" target="_blank" rel="noopener">wysihtml</a>: 富文本编辑器，适用于现代浏览器</li><li><a href="https://github.com/pornel/slip" target="_blank" rel="noopener">slip</a>: 一个通过滑动或者拖拽来操控列表的库</li><li><a href="https://github.com/outpunk/evil-icons" target="_blank" rel="noopener">evil-icons</a>: 一个矢量图库，提供 Ruby/Node 等支持</li><li><a href="https://github.com/dimsemenov/PhotoSwipe" target="_blank" rel="noopener">PhotoSwipe</a>: JS 的一个图片展示库</li><li><a href="https://github.com/zzarcon/focusable" target="_blank" rel="noopener">focusable</a>: 是页面上一个元素高亮的库，<a href="http://zzarcon.github.io/focusable/" target="_blank" rel="noopener">有图有真相</a></li></ul><ul><li><a href="https://github.com/paulrouget/firefox.html" target="_blank" rel="noopener">firefox.html</a>: Firefox 在浏览器端的实现 —— HTML 版的 Firefox</li><li><a href="https://github.com/jquery/jquery-mobile" target="_blank" rel="noopener">jquery-mobile</a>: jQuery 团队开发的用于辅助手机端 web app 开发的库，基于 HTML5</li><li><a href="https://github.com/mcasimir/mobile-angular-ui" target="_blank" rel="noopener">mobile-angular-ui</a>: 基于angularjs和bootstarp的web app开发框架</li><li><a href="https://github.com/taye/interact.js" target="_blank" rel="noopener">interact.js</a>: 一个适用于现代浏览器的，用于处理 手势、拖放、缩放等的库</li><li><a href="https://github.com/facebook/rebound-js" target="_blank" rel="noopener">rebound-js</a>: 实现部分物理效果，Facebook 出品</li><li><a href="https://github.com/addyosmani/basket.js" target="_blank" rel="noopener">basket.js</a>: 基于 LocalStorage 的资源加载器，可以用来缓存 script 和 css, 手机端使用速度快于浏览器直接缓存</li><li><a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iscroll</a>: 高性能的滚动(scroll)处理库，功能强大，支持各种事件，不依赖任何的库，且插件丰富, 大众点评的手机端列表滚动就是用这个库处理的</li><li><a href="https://github.com/mozilla/metrics-graphics" target="_blank" rel="noopener">metrics-graphics</a>: 基于 D3 的图表库，简洁、高效，Mozilla 出品</li><li><a href="https://github.com/paypal/accessible-html5-video-player" target="_blank" rel="noopener">accessible-html5-video-player</a>: Paypal 出品的 Video 播放器</li><li><a href="https://github.com/jxnblk/loading" target="_blank" rel="noopener">loading</a>: 几种 Loading 效果，基于 SVG</li></ul><ul><li><a href="https://github.com/mintchaos/flippant.js" target="_blank" rel="noopener">flippant.js</a>: 一款能够漂亮的网页元素翻转效果库，代码许久不更新，不过作为源码学习还是不错的</li><li><a href="https://github.com/visionmedia/move.js" target="_blank" rel="noopener">move.js</a>: 基于 CSS3 的前端动画框架</li><li><a href="https://github.com/julianlloyd/scrollReveal.js" target="_blank" rel="noopener">scrollReveal.js</a>: 使元素以非常酷帅的方式进入画布 (Viewpoint)，看 <a href="http://scrollrevealjs.org/" target="_blank" rel="noopener">Demo</a></li><li><a href="https://github.com/Modernizr/Modernizr" target="_blank" rel="noopener">Modernizr</a>: 一个用来检测 HTML5 和 CSS3 支持情况的库</li><li><a href="https://github.com/zurb/foundation" target="_blank" rel="noopener">foundation</a>: 另一款前端模版框架，类似于 Bootstrap</li><li><a href="https://github.com/designmodo/Flat-UI" target="_blank" rel="noopener">Flat-UI</a>: Bootstrap 的一款主题，简洁美观</li><li><a href="https://github.com/fronteed/iCheck" target="_blank" rel="noopener">iCheck</a>: 一款漂亮的 Checkbox 插件</li><li><a href="https://github.com/lyfeyaj/Swipe" target="_blank" rel="noopener">Swipe</a>: 非常轻量级的一个图片滑动切换效果库, 性能良好, 尤其是对手机的支持, 压缩后的大小约 5kb</li><li><a href="https://github.com/kenwheeler/slick" target="_blank" rel="noopener">slick</a>: 功能异常强大的一个图片滑动切换效果库</li><li><a href="https://github.com/t4t5/SocialButtons" target="_blank" rel="noopener">SocialButtons</a>: 漂亮的社交按钮</li></ul><ul><li><a href="https://github.com/t4t5/sweetalert" target="_blank" rel="noopener">sweetalert</a>: 一个非常美观的用于替换浏览器默认 alert 的库</li><li><a href="https://github.com/web-animations/web-animations-js" target="_blank" rel="noopener">web-animations-js</a>: Javascript 实现的 Web Animation API</li><li><a href="https://github.com/maxwellito/vivus" target="_blank" rel="noopener">vivus</a>: 可以动态描绘 SVG 的 JS 库, 支持多种动画</li><li><a href="https://github.com/Selz/plyr" target="_blank" rel="noopener">plyr</a>: 轻量, 小巧, 美观的 HTML5 视频播放器</li><li><a href="https://github.com/sbstjn/timesheet.js" target="_blank" rel="noopener">timesheet.js</a>: 基于 HTML5 &amp; CSS3 时间表</li><li><a href="https://github.com/Mango/slideout" target="_blank" rel="noopener">slideout</a>: 一个非常美观的侧滑菜单</li><li><a href="https://github.com/hammerjs/hammer.js" target="_blank" rel="noopener">hammerJs</a>: 一个优秀的、轻量级的触屏设备手势库，<a href="http://www.cnblogs.com/vajoy/p/4011723.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">文档</a></li><li><a href="https://www.jqcool.net/jquery-extillate.html" target="_blank" rel="noopener">Textillate.js</a>: jquery使用CSS3实现文字动画效果插件<a href="https://github.com/jschr/textillate" target="_blank" rel="noopener">Textillate.js</a><h3 id="包管理工具-Package-Managers"><a href="#包管理工具-Package-Managers" class="headerlink" title="包管理工具 Package Managers"></a>包管理工具 Package Managers</h3></li></ul><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><ul><li><a href="http://www.runoob.com/nodejs/nodejs-npm.html" target="_blank" rel="noopener">菜鸟教程NPM 使用介绍</a></li><li><a href="https://npm.taobao.org/" target="_blank" rel="noopener">淘宝 NPM 镜像</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/01/npm-install.html" target="_blank" rel="noopener">npm 模块安装机制简介</a></li><li><a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm包搜索地址  </a></li></ul><h4 id="Bower"><a href="#Bower" class="headerlink" title="Bower"></a>Bower</h4><ul><li><a href="http://www.bowercn.com/" target="_blank" rel="noopener">Bower中文网</a></li><li><a href="http://javascript.ruanyifeng.com/tool/bower.html" target="_blank" rel="noopener">Bower：客户端库管理工具-阮一峰</a></li></ul><h4 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h4><ul><li><a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="noopener">yarn中文网</a>  快速、可靠、安全的依赖管理</li><li><a href="https://www.ibm.com/developerworks/cn/data/library/bd-yarn-intro/" target="_blank" rel="noopener">YARN 简介</a></li></ul><h3 id="编辑器-Text-Editors"><a href="#编辑器-Text-Editors" class="headerlink" title="编辑器 Text Editors"></a>编辑器 Text Editors</h3><h4 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h4><ul><li><a href="http://www.jetbrains.com/webstorm/download" target="_blank" rel="noopener">官网下载</a> </li><li><a href="http://www.qdfuns.com/tools" target="_blank" rel="noopener">前端网破解版下载</a> </li></ul><h4 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h4><ul><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">官网下载</a>  </li><li><a href="https://segmentfault.com/a/1190000006697219" target="_blank" rel="noopener">vscode 插件精选 - 献给所有前端工程师</a></li></ul><h4 id="SublimeText"><a href="#SublimeText" class="headerlink" title="SublimeText"></a>SublimeText</h4><ul><li><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">官网下载</a></li><li><a href="http://www.qdfuns.com/tools" target="_blank" rel="noopener">前端网破解版插件版下载</a></li><li><a href="https://github.com/SublimeCodeIntel/SublimeCodeIntel" target="_blank" rel="noopener">SublimeCodeIntel</a>: Sublime Text 的代码补全工具，支持多种语言  </li><li><a href="https://github.com/emmetio/emmet" target="_blank" rel="noopener">Emmet</a>：一个用于提高开发效率的编辑器插件，前身是Zen coding  </li><li><a href="https://github.com/SublimeLinter/SublimeLinter3" target="_blank" rel="noopener">SublimeLinter</a>: 一个提供代码质量检测的插件  </li><li><a href="https://github.com/kairyou/SublimeTmpl" target="_blank" rel="noopener">SublimeTmpl</a>：快速新建指定的模版文件  </li><li><a href="https://github.com/P233/Syntax-highlighting-for-Sass" target="_blank" rel="noopener">Syntax-highlighting-for-Sass</a>：sass代码高亮插件  </li><li><a href="https://github.com/SublimeText-Markdown/MarkdownEditing" target="_blank" rel="noopener">MarkdownEditing</a>: Sublime Text 强大的 Markdown 扩展, 提供快捷键, 主题等  </li><li><a href="https://github.com/facelessuser/ApplySyntax/" target="_blank" rel="noopener">ApplySyntax</a>: 辅助检测语法插件  </li><li><a href="https://github.com/SublimeText/CTags/" target="_blank" rel="noopener">CTags</a>: Sublime Text Ctags 支持插件, 需要安装 ctags  </li><li><a href="https://github.com/reactjs/sublime-react" target="_blank" rel="noopener">sublime-react</a>: React 代码高亮  </li></ul><h4 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h4><ul><li><a href="https://atom.io/" target="_blank" rel="noopener">官网下载</a>   </li></ul><h4 id="HBuilder"><a href="#HBuilder" class="headerlink" title="HBuilder"></a>HBuilder</h4><ul><li><a href="http://www.dcloud.io/" target="_blank" rel="noopener">官网下载</a> </li></ul><h3 id="JS框架-JS-Frameworks"><a href="#JS框架-JS-Frameworks" class="headerlink" title="JS框架 JS Frameworks"></a>JS框架 JS Frameworks</h3><h4 id="Backbone"><a href="#Backbone" class="headerlink" title="Backbone"></a>Backbone</h4><ul><li><a href="http://www.css88.com/doc/backbone/" target="_blank" rel="noopener">Backbone.js API中文文档</a></li></ul><h4 id="AngularJs"><a href="#AngularJs" class="headerlink" title="AngularJs"></a>AngularJs</h4><ul><li><a href="https://angular.cn/" target="_blank" rel="noopener">中文官方文档</a></li><li><a href="http://www.apjs.net/" target="_blank" rel="noopener">angularjs中文网</a></li><li><a href="http://www.angularjs.net.cn/" target="_blank" rel="noopener">angularjs教程</a></li><li><a href="http://www.cnblogs.com/micua/p/angular-essential.html" target="_blank" rel="noopener">Angular 基础入门</a>  </li></ul><ul><li><a href="https://github.com/passy/angular-masonry" target="_blank" rel="noopener">angular-masonry</a>: Masonry 的 AngularJS 插件，用于瀑布流</li><li><a href="https://github.com/Textalk/angular-schema-form" target="_blank" rel="noopener">angular-schema-form</a>: 根据 JSON 生成响应的 Form 表单</li><li><a href="https://github.com/mgonto/restangular" target="_blank" rel="noopener">restangular</a>: Angular 中用来处理 RESTful API 的插件，可替代 $resource</li><li><a href="https://github.com/driftyco/ng-cordova" target="_blank" rel="noopener">ng-cordova</a>: Cordova 常用组件的 Angular 版本</li><li><a href="https://github.com/angular-translate/angular-translate" target="_blank" rel="noopener">angular-translate</a>: Angular 的国际化 (I18n)</li><li><a href="https://github.com/rev087/ng-inspector" target="_blank" rel="noopener">ng-inspector</a>: Chrome 插件，用于调试 Angular</li><li><a href="https://github.com/mgechev/angularjs-style-guide" target="_blank" rel="noopener">angularjs-style-guide</a>: AngularJS 代码风格</li><li><a href="https://github.com/davidchang/ngReact" target="_blank" rel="noopener">ngReact</a>: React 的 Angular 插件，可以在 Angular 中使用 React Components</li><li><a href="https://github.com/angular/material" target="_blank" rel="noopener">material</a>: Google Material Design 效果的 Angular 实现</li><li><a href="https://github.com/grevory/angular-local-storage" target="_blank" rel="noopener">angular-local-storage</a>: Angular 插件, 提供了对 localStorage 的友好支持, 并对不支持的浏览器使用 cookie 优雅降级</li><li><a href="https://github.com/a8m/angular-filter" target="_blank" rel="noopener">angular-filter</a>: 一组有用的 Angular Filters</li><li><a href="https://github.com/Pasvaz/bindonce" target="_blank" rel="noopener">bindonce</a>: Angular 插件, 用于减少 Watcher 的数量, 提升性能</li></ul><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><ul><li><a href="https://facebook.github.io/react/docs/hello-world.html" target="_blank" rel="noopener">英文官方文档</a></li><li><a href="http://reactjs.cn/react/docs/getting-started-zh-CN.html" target="_blank" rel="noopener">中文官方文档</a></li><li><a href="https://hulufei.gitbooks.io/react-tutorial/content/introduction.html" target="_blank" rel="noopener">gitbooks手册</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">阮一峰react入门</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html" target="_blank" rel="noopener">阮一峰React Router入门</a></li><li><a href="https://react-guide.github.io/react-router-cn/" target="_blank" rel="noopener">React Router 中文文档</a></li><li><a href="http://cn.redux.js.org/docs/react-redux/index.html" target="_blank" rel="noopener">react-redux 中文文档</a></li><li><a href="http://www.ruanyifeng.com/blog" target="_blank" rel="noopener">阮一峰Redux 入门教程</a></li></ul><ul><li><a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a>: React 框架源代码</li><li><a href="https://github.com/facebook/react-native" target="_blank" rel="noopener">react-native</a>: Facebook 出品的使用 React 开发 IOS 原生应用的框架</li><li><a href="https://github.com/gaearon/react-hot-loader" target="_blank" rel="noopener">react-hot-loader</a>: 实时调整 React 组件效果</li><li><a href="https://github.com/ericclemmons/grunt-react" target="_blank" rel="noopener">grunt-react</a>: React 的 Grunt 组件, 用于将 JSX 编译成 JS</li><li><a href="https://github.com/JedWatson/touchstonejs" target="_blank" rel="noopener">touchstonejs</a>: 基于 React 的手机应用前端框架</li><li><a href="https://github.com/pheuter/essential-react" target="_blank" rel="noopener">essential-react</a>: 基于 React, ES6, React-Router的一个应用脚手架</li><li><a href="https://github.com/pheuter/essential-react" target="_blank" rel="noopener">react-router</a>: React 路由解决方案</li></ul><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><ul><li><a href="http://cn.vuejs.org/" target="_blank" rel="noopener">vue官方</a></li><li><a href="http://vuex.vuejs.org/zh-cn/" target="_blank" rel="noopener">vuex官方</a></li><li><a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">vue-router官方</a></li></ul><h3 id="UI框架-UI-Frameworks"><a href="#UI框架-UI-Frameworks" class="headerlink" title="UI框架 UI Frameworks"></a>UI框架 UI Frameworks</h3><h4 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h4><ul><li><a href="http://v3.bootcss.com/" target="_blank" rel="noopener">最受欢迎的 HTML、CSS 和 JS 框架</a></li></ul><h4 id="Ionic"><a href="#Ionic" class="headerlink" title="Ionic"></a>Ionic</h4><ul><li><a href="http://www.ionic.wang/" target="_blank" rel="noopener">一款接近原生的Html5移动App开发框架 会html css js就可以开发app</a></li></ul><h4 id="Foundation"><a href="#Foundation" class="headerlink" title="Foundation"></a>Foundation</h4><ul><li><a href="http://www.foundcss.com" target="_blank" rel="noopener">Foundation 中文网 迄今为止最好的响应式前端框架</a></li></ul><h4 id="FrozenUI"><a href="#FrozenUI" class="headerlink" title="FrozenUI"></a>FrozenUI</h4><ul><li><a href="http://frozenui.github.io/" target="_blank" rel="noopener">移动端服务的前端框架</a></li></ul><h4 id="materializecss"><a href="#materializecss" class="headerlink" title="materializecss"></a>materializecss</h4><ul><li><a href="http://www.materializecss.cn/" target="_blank" rel="noopener">基于Material Design的主流前端响应式框架</a></li></ul><h4 id="mui"><a href="#mui" class="headerlink" title="mui"></a>mui</h4><ul><li><a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">最接近原生APP体验的高性能前端框架</a></li></ul><h4 id="AntDesign"><a href="#AntDesign" class="headerlink" title="AntDesign"></a>AntDesign</h4><ul><li><a href="https://ant.design" target="_blank" rel="noopener">和react配合的UI框架</a></li></ul><h4 id="eleme"><a href="#eleme" class="headerlink" title="eleme"></a>eleme</h4><ul><li><a href="http://element.eleme.io/" target="_blank" rel="noopener">和vue配合的UI框架</a></li></ul><h3 id="JS预处理-JS-Preprocessors"><a href="#JS预处理-JS-Preprocessors" class="headerlink" title="JS预处理 JS Preprocessors"></a>JS预处理 JS Preprocessors</h3><h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h4><ul><li><a href="http://www.runoob.com/" target="_blank" rel="noopener">TypeScript 入门教程 菜鸟教程</a></li><li><a href="https://www.tslang.cn/" target="_blank" rel="noopener">TypeScript中文网</a></li><li><a href="https://www.gitbook.com/" target="_blank" rel="noopener">TypeScript教程gitbook</a></li></ul><h4 id="CoffeeScript"><a href="#CoffeeScript" class="headerlink" title="CoffeeScript"></a>CoffeeScript</h4><ul><li><a href="http://coffee-script.org/" target="_blank" rel="noopener">CoffeeScript 中文</a></li><li><a href="http://wiki.jikexueyuan.com/project/coffeescript/" target="_blank" rel="noopener">CoffeeScript 实用手册 极客学院</a></li></ul><h3 id="过程自动化-Process-Automation"><a href="#过程自动化-Process-Automation" class="headerlink" title="过程自动化 Process Automation"></a>过程自动化 Process Automation</h3><h4 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h4><ul><li><a href="http://www.gruntjs.net/" target="_blank" rel="noopener">Grunt中文网</a></li></ul><h4 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h4><ul><li><a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">gulp.js 中文网</a></li><li><a href="https://www.w3ctrain.com/2015/12/22/gulp-for-beginners/" target="_blank" rel="noopener">Gulp新手入门教程</a></li><li><a href="http://www.ydcss.com/" target="_blank" rel="noopener">gulp详细入门教程</a></li><li><a href="http://www.cnblogs.com/2050/p/4198792.html" target="_blank" rel="noopener">前端构建工具gulpjs的使用介绍及技巧</a></li><li><a href="https://www.w3ctech.com/topic/134" target="_blank" rel="noopener">Gulp开发教程</a></li></ul><h3 id="模板引擎-Templating"><a href="#模板引擎-Templating" class="headerlink" title="模板引擎 Templating"></a>模板引擎 Templating</h3><h4 id="Handlebars"><a href="#Handlebars" class="headerlink" title="Handlebars"></a>Handlebars</h4><ul><li><a href="http://handlebarsjs.com/" target="_blank" rel="noopener">handlebarsjs官网</a></li><li><a href="http://www.360doc.com/content/" target="_blank" rel="noopener">Handlebars中文文档</a></li><li><a href="http://keenwon.com/992.html" target="_blank" rel="noopener">Handlebars.js 中文文档</a></li><li><a href="http://www.tuicool.com/articles/fqQFN3" target="_blank" rel="noopener">Handlebars的使用方法文档整理</a></li></ul><h4 id="Haml"><a href="#Haml" class="headerlink" title="Haml"></a>Haml</h4><ul><li><a href="https://github.com/haml/haml" target="_blank" rel="noopener">haml官方文档</a></li><li><a href="http://blog.csdn.net/napoay/article/details/50491363" target="_blank" rel="noopener">haml入门</a></li></ul><h4 id="Jade"><a href="#Jade" class="headerlink" title="Jade"></a>Jade</h4><ul><li><a href="http://www.w3cplus.com/html/how-to-use-jade.html" target="_blank" rel="noopener">Jade 官方的英文文档</a></li><li><a href="http://www.w3cplus.com/html/how-to-use-jade.html" target="_blank" rel="noopener">Jade的使用</a></li><li><a href="http://www.imooc.com/learn/259" target="_blank" rel="noopener">带你学习Jade模板引擎视频</a></li></ul><h3 id="构建工具-Build-Tools"><a href="#构建工具-Build-Tools" class="headerlink" title="构建工具 Build Tools"></a>构建工具 Build Tools</h3><h4 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a>RequireJS</h4><ul><li><a href="http://requirejs.org/" target="_blank" rel="noopener">RequireJS 英文网</a></li><li><a href="http://requirejs.cn/" target="_blank" rel="noopener">RequireJS 中文网</a></li><li><a href="http://www.ruanyifeng.com/blog" target="_blank" rel="noopener">require.js的用法-阮一峰</a></li></ul><h4 id="seajs"><a href="#seajs" class="headerlink" title="seajs"></a>seajs</h4><ul><li><a href="http://seajs.org/docs/" target="_blank" rel="noopener">seajs文档</a></li><li><a href="http://www.tuicool.com/articles/FfEJv2u" target="_blank" rel="noopener">SeaJS从入门到原理</a></li></ul><h4 id="Browserify"><a href="#Browserify" class="headerlink" title="Browserify"></a>Browserify</h4><ul><li><a href="http://browserify.org/" target="_blank" rel="noopener">官网</a></li><li><a href="https://github.com/substack/node-browserify/" target="_blank" rel="noopener">github</a></li></ul><h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><ul><li><a href="http://webpackdoc.com/" target="_blank" rel="noopener">Webpack 中文指南</a></li><li><a href="http://www.vichily.com/2016/11/25/webpack-demo/" target="_blank" rel="noopener">webpack的实例</a></li><li><a href="http://www.vichily.com/2016/11/25/webpack/" target="_blank" rel="noopener">webpack的入门</a></li><li><a href="http://www.w2bc.com/Article/50764" target="_blank" rel="noopener">一小时包教会 —— webpack 入门指南</a></li></ul><h3 id="CSS预处理器-CSS-Preprocessors"><a href="#CSS预处理器-CSS-Preprocessors" class="headerlink" title="CSS预处理器 CSS Preprocessors"></a>CSS预处理器 CSS Preprocessors</h3><h4 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h4><ul><li><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="noopener">sass入门</a></li><li><a href="http://sass.bootcss.com/docs/sass-reference/" target="_blank" rel="noopener">sass参考手册</a></li><li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">SASS用法指南-阮一峰</a></li></ul><h4 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h4><ul><li><a href="http://lesscss.cn/" target="_blank" rel="noopener">less中文网</a></li><li><a href="http://less.bootcss.com/" target="_blank" rel="noopener">less快速入门</a></li></ul><h4 id="stylus"><a href="#stylus" class="headerlink" title="stylus"></a>stylus</h4><ul><li><a href="http://www.zhangxinxu.com/jq/stylus/" target="_blank" rel="noopener">stylus中文文档-张鑫旭</a></li></ul><h3 id="版本控制-Version-Control"><a href="#版本控制-Version-Control" class="headerlink" title="版本控制 Version Control"></a>版本控制 Version Control</h3><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><ul><li><a href="http://www.liaoxuefeng.com/wiki/" target="_blank" rel="noopener">Git教程-廖雪峰</a> </li></ul><h4 id="Svn"><a href="#Svn" class="headerlink" title="Svn"></a>Svn</h4><ul><li><a href="http://blog.csdn.net/fwzkj/article/details/47988885" target="_blank" rel="noopener">史上最简单的SVN使用教程和注意事项</a></li><li><a href="http://wiki.jikexueyuan.com/project/svn/" target="_blank" rel="noopener">SVN 教程 极客学院</a></li><li><a href="http://www.runoob.com/svn/svn-tutorial.html" target="_blank" rel="noopener">SVN 教程 菜鸟教程</a></li></ul><h6 id="文章来源"><a href="#文章来源" class="headerlink" title="文章来源:"></a>文章来源:</h6><h6 id="VICHILY’S-BLOG"><a href="#VICHILY’S-BLOG" class="headerlink" title="VICHILY’S BLOG"></a><a href="http://www.vichily.com/2017/02/28/笼统的前端/" target="_blank" rel="noopener">VICHILY’S BLOG</a></h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/post/web-Map.JPG&quot; class=&quot;full-image&quot; alt=&quot;前端图谱，前端工具大全&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;em&gt;文章转自 &lt;a href=&quot;http://www.vichily.com/2017/02/28/笼统的前端/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VICHILY’S BLOG&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;h3 id=&quot;核心-Core&quot;&gt;&lt;a href=&quot;#核心-Core&quot; class=&quot;headerlink&quot; title=&quot;核心 Core&quot;&gt;&lt;/a&gt;核心 Core&lt;/h3&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>css3的3D立体效果</title>
    <link href="http://yoursite.com/2017/02/10/css3-3d/"/>
    <id>http://yoursite.com/2017/02/10/css3-3d/</id>
    <published>2017-02-10T09:52:05.000Z</published>
    <updated>2017-03-02T02:41:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/post/3D.jpg" class="full-image" alt="3D"></p><blockquote><p>周末朋友叫我去看电影，<br>我：“啥片，3D的不？”，<br>朋友：“不是！”；<br>我：“不是3D那就不去了，等以后在电脑上看吧，去电影院不就是去感受影片的3D的视觉效果么！”<br>朋友：“……”    </p></blockquote><p> 做网页也一样，现在2D已经不能满足我们的视觉需求，为了追求视觉冲突的真实感，我们往往会使用一些css3 3D效果的交互；最近我被<a href="http://jdc.jd.com/lab/zaowu/index_new.html" target="_blank" rel="noopener">淘宝造物节</a>给刺激了，试着学着折腾css3的 3D transform效果。虽然现在还没有达到效果，但是还是有所收获。</p><h3 id="建立立体感"><a href="#建立立体感" class="headerlink" title="建立立体感"></a>建立立体感</h3><p> 首先我们要有一定的立体感： </p><p> <img src="http://littlombie.github.io/images/post/3d_axes.png" alt="3d_axes"></p><p> 通过这个图片应该清楚的了解到了x轴 y轴 z轴是什么概念了。<br> <a id="more"></a><br> 3D transform 就是沿着x轴 y轴 z轴 做变化；<br> 3D transform中有下面这三个方法：</p><p> <code>rotateX( angle )</code><br> <code>rotateY( angle )</code><br> <code>rotateZ( angle )</code> </p><p><code>rotateX</code>旋转X轴，<code>rotateY</code>旋转Y轴，<code>rotateZ</code>旋转Z轴，括号里边都是变化的度数；<br>3d无非就是通过X Y Z轴来进行操作  </p><h3 id="搭建3D"><a href="#搭建3D" class="headerlink" title="搭建3D"></a>搭建3D</h3><p>搭建之前首先明白以下属性的意思：<br><code>transform-style: preserve-3d;</code> 3d空间<br><code>perspective: 800px;</code>它被成为视距或者景深.<br><code>perspective-origin:50% 50%;</code> 这就是你的眼睛位置 位置不同效果也就不用了  </p><p><code>translateZ</code>则可以帮你理解透视位置。<br><code>transform-origin</code>我们成为基点 在水平方向改变观看div的位置<br><code>backface-visibility:hidden;</code>为了切合实际，我们常常会这样设置，使后面元素不可见<br><code>scale</code> 缩放 <code>rotate</code> 旋转 <code>translate</code>移动 <code>skew</code>倾斜 通过这些来进行3d效果   </p><p>一个小例子：</p><p><img src="http://littlombie.github.io/images/post/3dTransform.gif" alt="翻转"><br>HTML:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bian zhi1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"01.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bian zhi2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"02.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>CSS:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>; </span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto; </span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d; </span><br><span class="line">    <span class="attribute">position</span>: relative; </span><br><span class="line">    <span class="attribute">transition</span>: <span class="number">2s</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-id">#box</span><span class="selector-pseudo">:hover</span>&#123; </span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotateY</span>(180deg);</span><br><span class="line">&#125; <span class="selector-id">#box</span> <span class="selector-class">.bian</span>&#123; </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>; </span><br><span class="line">    <span class="attribute">text-align</span>: center; </span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">300px</span>; </span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>; </span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125; <span class="selector-class">.zhi1</span>&#123; </span><br><span class="line">    <span class="attribute">background-color</span>: red; </span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">rotateY</span>(180deg); </span><br><span class="line">&#125; <span class="selector-class">.zhi2</span>&#123; </span><br><span class="line">    <span class="attribute">background-color</span>: yellow; </span><br><span class="line">    <span class="attribute">backface-visibility</span>: hidden;<span class="comment">/*设置后面的可视度为看不见 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>我们可以用css 3Dtransform制作个魔方<br>首先先让六个面全部叠加在一起； 通过自己对3d空间的理解 和 x y z 轴的移动来拼接这个立方体；<br>然后使用css3 动画 animation 改变rotate值，使其动起来   </p><ol><li><img src="http://littlombie.github.io/images/post/rotate.gif" alt="魔方"></li></ol><p>部分css3代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">     <span class="attribute">perspective</span>: <span class="number">800px</span>;</span><br><span class="line">     <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">     <span class="attribute">transition</span>: <span class="number">5s</span> infinite;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(0deg) <span class="built_in">rotateY</span>(0deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mofang_box</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">300PX</span> auto;</span><br><span class="line">     <span class="attribute">position</span>: relative;</span><br><span class="line">     <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">     <span class="attribute">-webkit-animation</span>: rotate <span class="number">60s</span> linear infinite;</span><br><span class="line">     <span class="attribute">-o-animation</span>: rotate <span class="number">60s</span> linear infinite;</span><br><span class="line">     <span class="attribute">animation</span>: rotate <span class="number">60s</span>  linear infinite;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> rotate&#123;</span><br><span class="line">     0%&#123;</span><br><span class="line">         <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(0deg) <span class="built_in">rotateY</span>(0deg);</span><br><span class="line">     &#125;</span><br><span class="line">     100% &#123;</span><br><span class="line">         <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(3600deg) <span class="built_in">rotateY</span>(3600deg);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mofang_box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(3600deg) <span class="built_in">rotateY</span>(3600deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mofang</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">rotateY</span>(90deg)<span class="built_in">translateZ</span>(-100px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(90deg) <span class="built_in">translateZ</span>(100px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(90deg) <span class="built_in">translateZ</span>(100px) <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.buttom</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(90deg) <span class="built_in">translateZ</span>(-100px) <span class="built_in">rotateZ</span>(180deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hou</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(0deg) <span class="built_in">translateZ</span>(-100px) <span class="built_in">rotateZ</span>(180deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.qian</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(0deg) <span class="built_in">translateZ</span>(100px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>设置6个<code>div</code>分别表示<code>left(左)</code>、<code>right(右)</code>、<code>top(上)</code>、<code>buttom(下)</code>、<code>hou(后)</code>、<code>qian(前)</code>各六个面，然后给一定的<code>transform</code>形成一个立方体，再给整体添加个动画，让其自运动  </li></ul><p><a href="https://github.com/Littlombie/practice/blob/master/css3-cube/index.html" target="_blank" rel="noopener">查看完整代码</a></p><p>2.<a href="https://littlombie.github.io/practice/css3-rotate-banner/" target="_blank" rel="noopener">css3 3D轮播图（demo）</a></p><h6 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h6><h6 id="一篇文章搞定css3-3d效果"><a href="#一篇文章搞定css3-3d效果" class="headerlink" title="一篇文章搞定css3 3d效果"></a><a href="http://www.cnblogs.com/changlel/p/6385953.html" target="_blank" rel="noopener">一篇文章搞定css3 3d效果</a></h6><h6 id="好吧，CSS3-3D-transform变换，不过如此！"><a href="#好吧，CSS3-3D-transform变换，不过如此！" class="headerlink" title="好吧，CSS3 3D transform变换，不过如此！"></a><a href="http://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition/" target="_blank" rel="noopener">好吧，CSS3 3D transform变换，不过如此！</a></h6><h6 id="图片来源于网络"><a href="#图片来源于网络" class="headerlink" title="图片来源于网络"></a>图片来源于网络</h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/post/3D.jpg&quot; class=&quot;full-image&quot; alt=&quot;3D&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;周末朋友叫我去看电影，&lt;br&gt;我：“啥片，3D的不？”，&lt;br&gt;朋友：“不是！”；&lt;br&gt;我：“不是3D那就不去了，等以后在电脑上看吧，去电影院不就是去感受影片的3D的视觉效果么！”&lt;br&gt;朋友：“……”    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 做网页也一样，现在2D已经不能满足我们的视觉需求，为了追求视觉冲突的真实感，我们往往会使用一些css3 3D效果的交互；最近我被&lt;a href=&quot;http://jdc.jd.com/lab/zaowu/index_new.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;淘宝造物节&lt;/a&gt;给刺激了，试着学着折腾css3的 3D transform效果。虽然现在还没有达到效果，但是还是有所收获。&lt;/p&gt;
&lt;h3 id=&quot;建立立体感&quot;&gt;&lt;a href=&quot;#建立立体感&quot; class=&quot;headerlink&quot; title=&quot;建立立体感&quot;&gt;&lt;/a&gt;建立立体感&lt;/h3&gt;&lt;p&gt; 首先我们要有一定的立体感： &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://littlombie.github.io/images/post/3d_axes.png&quot; alt=&quot;3d_axes&quot;&gt;&lt;/p&gt;
&lt;p&gt; 通过这个图片应该清楚的了解到了x轴 y轴 z轴是什么概念了。&lt;br&gt;
    
    </summary>
    
      <category term="css3" scheme="http://yoursite.com/categories/css3/"/>
    
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
      <category term="3d" scheme="http://yoursite.com/tags/3d/"/>
    
  </entry>
  
  <entry>
    <title>Shake--手机摇一摇</title>
    <link href="http://yoursite.com/2017/01/17/shake-mobile/"/>
    <id>http://yoursite.com/2017/01/17/shake-mobile/</id>
    <published>2017-01-17T08:46:00.000Z</published>
    <updated>2017-01-17T11:01:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/post/newYear.jpg" class="full-image"></p><blockquote><p>马上过年了，发红包肯定是不能少的，为了增加趣味性，我们可以做一个摇一摇抢红包。</p></blockquote><p>页面演示(用手机扫描下边二维码)   </p><p><img src="http://littlombie.github.io/images/post/qr-shake.png" alt="shake">  </p><p><a href="https://github.com/Littlombie/practice/tree/master/shake" target="_blank" rel="noopener">查看代码</a>   </p><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><ol><li>页面刚打开，是不能执行摇一摇，需要点击<code>Shake</code>按钮开启；  </li><li>点击按钮后，会有一个摇一摇动画，提示可也摇；  </li><li>摇一摇后执行函数，弹出奖品页面</li></ol><a id="more"></a><h3 id="HTML页面"><a href="#HTML页面" class="headerlink" title="HTML页面"></a>HTML页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Shake<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"yaoPic"</span> <span class="attr">src</span>=<span class="string">"images/ico-yao.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"showPage"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Congratulations <span class="tag">&lt;<span class="name">br</span>/&gt;</span>to you on the award!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"qr"</span> <span class="attr">src</span>=<span class="string">"images/qr.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/close.svg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>=<span class="string">"controls"</span> <span class="attr">id</span>=<span class="string">"audio"</span> <span class="attr">autoplay</span>=<span class="string">"false"</span> <span class="attr">loop</span>=<span class="string">"false"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"shake.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--noHorizontal--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"noHorizontal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>请在竖屏模式下浏览<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>button</code>按钮为摇一摇的开关，如果不点击，摇一摇函数不会执行；<br><code>yaoPic</code> 点击按钮后 图片会有一个摇一摇的动画，提示现在可以开始摇一摇；<br><code>showPage</code> 是摇一摇后的回调函数：显示要到的内容； </p><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><ul><li>引入代码库 shake.js:  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"shake.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><a href="https://github.com/alexgibson/shake.js" target="_blank" rel="noopener">shake.js</a>代码：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> factory(global, global.document);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</span><br><span class="line">        <span class="built_in">module</span>.exports = factory(global, global.document);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        global.Shake = factory(global, global.document);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">window, document</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Shake</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//feature detect</span></span><br><span class="line">        <span class="keyword">this</span>.hasDeviceMotion = <span class="string">'ondevicemotion'</span> <span class="keyword">in</span> <span class="built_in">window</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.options = &#123;</span><br><span class="line">            threshold: <span class="number">15</span>, <span class="comment">//default velocity threshold for shake to register</span></span><br><span class="line">            timeout: <span class="number">1000</span> <span class="comment">//default interval between events</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'object'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> options) &#123;</span><br><span class="line">                <span class="keyword">if</span> (options.hasOwnProperty(i)) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.options[i] = options[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//use date to prevent multiple shakes firing</span></span><br><span class="line">        <span class="keyword">this</span>.lastTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//accelerometer values</span></span><br><span class="line">        <span class="keyword">this</span>.lastX = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.lastY = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.lastZ = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//create custom event</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.CustomEvent === <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.event = <span class="keyword">new</span> <span class="built_in">document</span>.CustomEvent(<span class="string">'shake'</span>, &#123;</span><br><span class="line">                bubbles: <span class="literal">true</span>,</span><br><span class="line">                cancelable: <span class="literal">true</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.createEvent === <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.event = <span class="built_in">document</span>.createEvent(<span class="string">'Event'</span>);</span><br><span class="line">            <span class="keyword">this</span>.event.initEvent(<span class="string">'shake'</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//reset timer values</span></span><br><span class="line">    Shake.prototype.reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">this</span>.lastX = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.lastY = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.lastZ = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//start listening for devicemotion</span></span><br><span class="line">    Shake.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.reset();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hasDeviceMotion) &#123;</span><br><span class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">'devicemotion'</span>, <span class="keyword">this</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//stop listening for devicemotion</span></span><br><span class="line">    Shake.prototype.stop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hasDeviceMotion) &#123;</span><br><span class="line">            <span class="built_in">window</span>.removeEventListener(<span class="string">'devicemotion'</span>, <span class="keyword">this</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.reset();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//calculates if shake did occur</span></span><br><span class="line">    Shake.prototype.devicemotion = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> current = e.accelerationIncludingGravity;</span><br><span class="line">        <span class="keyword">var</span> currentTime;</span><br><span class="line">        <span class="keyword">var</span> timeDifference;</span><br><span class="line">        <span class="keyword">var</span> deltaX = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> deltaY = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> deltaZ = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">this</span>.lastX === <span class="literal">null</span>) &amp;&amp; (<span class="keyword">this</span>.lastY === <span class="literal">null</span>) &amp;&amp; (<span class="keyword">this</span>.lastZ === <span class="literal">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.lastX = current.x;</span><br><span class="line">            <span class="keyword">this</span>.lastY = current.y;</span><br><span class="line">            <span class="keyword">this</span>.lastZ = current.z;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        deltaX = <span class="built_in">Math</span>.abs(<span class="keyword">this</span>.lastX - current.x);</span><br><span class="line">        deltaY = <span class="built_in">Math</span>.abs(<span class="keyword">this</span>.lastY - current.y);</span><br><span class="line">        deltaZ = <span class="built_in">Math</span>.abs(<span class="keyword">this</span>.lastZ - current.z);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (((deltaX &gt; <span class="keyword">this</span>.options.threshold) &amp;&amp; (deltaY &gt; <span class="keyword">this</span>.options.threshold)) || ((deltaX &gt; <span class="keyword">this</span>.options.threshold) &amp;&amp; (deltaZ &gt; <span class="keyword">this</span>.options.threshold)) || ((deltaY &gt; <span class="keyword">this</span>.options.threshold) &amp;&amp; (deltaZ &gt; <span class="keyword">this</span>.options.threshold))) &#123;</span><br><span class="line">            <span class="comment">//calculate time in milliseconds since last shake registered</span></span><br><span class="line">            currentTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            timeDifference = currentTime.getTime() - <span class="keyword">this</span>.lastTime.getTime();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (timeDifference &gt; <span class="keyword">this</span>.options.timeout) &#123;</span><br><span class="line">                <span class="built_in">window</span>.dispatchEvent(<span class="keyword">this</span>.event);</span><br><span class="line">                <span class="keyword">this</span>.lastTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.lastX = current.x;</span><br><span class="line">        <span class="keyword">this</span>.lastY = current.y;</span><br><span class="line">        <span class="keyword">this</span>.lastZ = current.z;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//event handler</span></span><br><span class="line">    Shake.prototype.handleEvent = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> (<span class="keyword">this</span>[e.type]) === <span class="string">'function'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>[e.type](e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Shake;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>实现、设置参数如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//create a new instance of shake.js.</span></span><br><span class="line"><span class="keyword">var</span> myShakeEvent = <span class="keyword">new</span> Shake(&#123;</span><br><span class="line">    threshold: <span class="number">15</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// start listening to device motion</span></span><br><span class="line">btn.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    yao.className = <span class="string">'yaoPic yaoAni'</span>;</span><br><span class="line">    <span class="comment">// start listening to device motion</span></span><br><span class="line">     myShakeEvent.start();</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// register a shake event</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'shake'</span>, shakeEventDidOccur, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//shake event callback</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shakeEventDidOccur</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//if phone support navigator.vibrate</span></span><br><span class="line">    <span class="keyword">if</span> (navigator.vibrate) &#123;</span><br><span class="line">        <span class="comment">//vibrate 1 second</span></span><br><span class="line">        navigator.vibrate(<span class="number">1000</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.webkitVibrate) &#123;</span><br><span class="line">        navigator.webkitVibrate(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//put your own code here etc.</span></span><br><span class="line">    audio.play();</span><br><span class="line">    audio.loop = <span class="literal">false</span>;</span><br><span class="line">    setTimeout( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        showPage.className = <span class="string">'showPage showAni'</span>;</span><br><span class="line">    &#125;,<span class="number">600</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">'shaked! O_o'</span></span><br><span class="line">    close.addEventListener(<span class="string">'touchend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        showPage.className = <span class="string">'showPage'</span>;</span><br><span class="line">    &#125;,<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>代码中 <code>myShakeEvent</code> 里边设置摇动的幅度，数字越大，表示幅度越大，启动摇一摇函数；  </li><li><code>myShakeEvent.start();</code>按钮点击后启动摇一摇函数；  </li><li><code>navigator.vibrate</code> 检测手机是否支持振动，目前经测试大部分Android手机支持振动，ios不支持；  </li><li>添加一个手机摇一摇声音，音乐执行一次就关闭  </li></ul><h6 id="弹出页面内容可以使根据奖品内容不同随机展示"><a href="#弹出页面内容可以使根据奖品内容不同随机展示" class="headerlink" title="弹出页面内容可以使根据奖品内容不同随机展示"></a><strong>弹出页面内容可以使根据奖品内容不同随机展示</strong></h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/post/newYear.jpg&quot; class=&quot;full-image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;马上过年了，发红包肯定是不能少的，为了增加趣味性，我们可以做一个摇一摇抢红包。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;页面演示(用手机扫描下边二维码)   &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://littlombie.github.io/images/post/qr-shake.png&quot; alt=&quot;shake&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Littlombie/practice/tree/master/shake&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;查看代码&lt;/a&gt;   &lt;/p&gt;
&lt;h3 id=&quot;操作流程&quot;&gt;&lt;a href=&quot;#操作流程&quot; class=&quot;headerlink&quot; title=&quot;操作流程&quot;&gt;&lt;/a&gt;操作流程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;页面刚打开，是不能执行摇一摇，需要点击&lt;code&gt;Shake&lt;/code&gt;按钮开启；  &lt;/li&gt;
&lt;li&gt;点击按钮后，会有一个摇一摇动画，提示可也摇；  &lt;/li&gt;
&lt;li&gt;摇一摇后执行函数，弹出奖品页面&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
